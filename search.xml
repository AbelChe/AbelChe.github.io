<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>C++复习！！！</title>
      <link href="/2018/06/24/c++%E5%A4%8D%E4%B9%A0/"/>
      <url>/2018/06/24/c++%E5%A4%8D%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h4 id="C-如何实现I-O？它的优势在哪里？"><a href="#C-如何实现I-O？它的优势在哪里？" class="headerlink" title="C++如何实现I/O？它的优势在哪里？"></a>C++如何实现I/O？它的优势在哪里？</h4><ul><li>1、c++中I/O的概念<blockquote><p>在c++中有一个<strong>stream</strong>，这个类，所有的I/O都以这个“流”为基础，包括我们认识的文件I/O。stream有两个重要的运算符：</p><blockquote><p>1、<strong>插入器（&lt;&lt;）</strong>：向流输入数据。<br>2、<strong>析取器（&gt;&gt;）</strong>：从流中读取数据。</p></blockquote></blockquote></li><li>2、与c语言相比之下的优势<blockquote><p>1、最大的好处时完成了对流操作的<strong>封装</strong>。原来文件操作都是一个个分开的函数，现在的操作都是对象的方法。<br>2、stream适用于设备输入和输出的。fstream是stream的派生类，即文件流（设备对象是文件），作为文件在c++中的一个抽象对象。</p></blockquote></li></ul><hr><h4 id="什么是重载函数？如何区分重载函数？"><a href="#什么是重载函数？如何区分重载函数？" class="headerlink" title="什么是重载函数？如何区分重载函数？"></a>什么是重载函数？如何区分重载函数？</h4><ul><li>1、什么是重载函数？<blockquote><p>c++允许在同一作用域中用同意函数名来定义多个函数，这些函数的参数个数和参数类型不相同，这些同名的函数用来实现不同的功能，这就是<strong>函数的重载</strong>，即一个<strong>函数名多用</strong>。</p></blockquote></li><li>2、区分函数重载<blockquote><ul><li>1、<strong>函数形参的个数</strong>；</li><li>2、<strong>函数形参的类型</strong>；</li><li>3、<strong>形参的顺序</strong>；</li><li>4、<strong>不能把返回值作为函数重载的条件</strong>，原因是编辑器在编译时不回去判断函数的返回类型，函数只有调用后，编译器才会去验证返回类型，所以返回值类型不能做为函数重载的依据；</li><li>5、<strong>常函数const可以作为函数重载的判断依据</strong>，原因：重载[]运算符时，有没有const的区别是：有const只读，没有const读写都可以。</li></ul></blockquote></li></ul><hr><h4 id="什么是函数模板？为什么要使用函数模板？"><a href="#什么是函数模板？为什么要使用函数模板？" class="headerlink" title="什么是函数模板？为什么要使用函数模板？"></a>什么是函数模板？为什么要使用函数模板？</h4><ul><li>1、什么是函数模板？<blockquote><p>建立一个通用函数，其函数类型和形参不具体指定，用一个虚函数的类型来代表，这个通用的函数就称为<strong>函数模板</strong>。<br>例：max函数模板<br><code>template&lt;typename T&gt;T max(T a, T b, T c) {}</code></p></blockquote></li></ul><hr><h4 id="使用带有默认参数的函数时，要注意些什么？"><a href="#使用带有默认参数的函数时，要注意些什么？" class="headerlink" title="使用带有默认参数的函数时，要注意些什么？"></a>使用带有默认参数的函数时，要注意些什么？</h4><blockquote><ul><li>1、如果函数的定义在函数调用之前，则应在函数定义中给出默认值。</li><li>2、一个函数不能既作为重载函数，又作为有默认参数的函数。</li></ul></blockquote><hr><h4 id="为什么要使用inline函数？"><a href="#为什么要使用inline函数？" class="headerlink" title="为什么要使用inline函数？"></a>为什么要使用inline函数？</h4><hr><h4 id="作用域限定符“-”的作用是什么"><a href="#作用域限定符“-”的作用是什么" class="headerlink" title="作用域限定符“::”的作用是什么"></a>作用域限定符“::”的作用是什么</h4><hr><h4 id="引用是什么，引用在使用时应该注意哪些问题？为什么要使用引用？"><a href="#引用是什么，引用在使用时应该注意哪些问题？为什么要使用引用？" class="headerlink" title="引用是什么，引用在使用时应该注意哪些问题？为什么要使用引用？"></a>引用是什么，引用在使用时应该注意哪些问题？为什么要使用引用？</h4><hr><h4 id="什么是类？什么是对象？什么是抽象？什么是类的声明、类的定义？"><a href="#什么是类？什么是对象？什么是抽象？什么是类的声明、类的定义？" class="headerlink" title="什么是类？什么是对象？什么是抽象？什么是类的声明、类的定义？"></a>什么是类？什么是对象？什么是抽象？什么是类的声明、类的定义？</h4><hr><h4 id="c-中有哪些权限限定符？各起什么作用？"><a href="#c-中有哪些权限限定符？各起什么作用？" class="headerlink" title="c++中有哪些权限限定符？各起什么作用？"></a>c++中有哪些权限限定符？各起什么作用？</h4><hr><h4 id="什么是类的封装？封装的原则是什么？"><a href="#什么是类的封装？封装的原则是什么？" class="headerlink" title="什么是类的封装？封装的原则是什么？"></a>什么是类的封装？封装的原则是什么？</h4><hr><h4 id="同一个类所定义的不同对象在调用同一个成员函数时，调用的是同一段代码吗？通过什么来区分各自的数据？"><a href="#同一个类所定义的不同对象在调用同一个成员函数时，调用的是同一段代码吗？通过什么来区分各自的数据？" class="headerlink" title="同一个类所定义的不同对象在调用同一个成员函数时，调用的是同一段代码吗？通过什么来区分各自的数据？"></a>同一个类所定义的不同对象在调用同一个成员函数时，调用的是同一段代码吗？通过什么来区分各自的数据？</h4><hr><h4 id="类的成员函数和普通全局函数在形式上有什么区别？在本质上有什么区别？"><a href="#类的成员函数和普通全局函数在形式上有什么区别？在本质上有什么区别？" class="headerlink" title="类的成员函数和普通全局函数在形式上有什么区别？在本质上有什么区别？"></a>类的成员函数和普通全局函数在形式上有什么区别？在本质上有什么区别？</h4><hr>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/06/23/hello-world/"/>
      <url>/2018/06/23/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>
