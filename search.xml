<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[C++复习！！！（课本：谭老爷爷版）]]></title>
    <url>%2F2018%2F06%2F24%2Fc%2B%2B%E5%A4%8D%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[一、从C到C++ C++如何实现I/O？它的优势在哪里？ 1、c++中I/O的概念 在c++中有一个stream，这个类，所有的I/O都以这个“流”为基础，包括我们认识的文件I/O。stream有两个重要的运算符: a、插入器（&lt;&lt;）：向流输入数据。 b、析取器（&gt;&gt;）：从流中读取数据。 2、与c语言相比之下的优势 1、最大的好处时完成了对流操作的封装。原来文件操作都是一个个分开的函数，现在的操作都是对象的方法。2、stream适用于设备输入和输出的。fstream是stream的派生类，即文件流（设备对象是文件），作为文件在c++中的一个抽象对象。 什么是重载函数？如何区分重载函数？ 1、什么是重载函数？ c++允许在同一作用域中用同意函数名来定义多个函数，这些函数的参数个数和参数类型不相同，这些同名的函数用来实现不同的功能，这就是函数的重载，即一个函数名多用。 2、区分函数重载 1、函数形参的个数； 2、函数形参的类型； 3、形参的顺序； 4、不能把返回值作为函数重载的条件，原因是编辑器在编译时不回去判断函数的返回类型，函数只有调用后，编译器才会去验证返回类型，所以返回值类型不能做为函数重载的依据； 5、常函数const可以作为函数重载的判断依据，原因：重载[]运算符时，有没有const的区别是：有const只读，没有const读写都可以。 什么是函数模板？为什么要使用函数模板？ 1、什么是函数模板？ 建立一个通用函数，其函数类型和形参不具体指定，用一个虚函数的类型来代表，这个通用的函数就称为函数模板。 例：max函数模板 template&lt;typename T&gt;T max(T a, T b, T c) {} 2、为什么要使用函数模板？ 简化对同名的知识形参类型不同的函数的定义。 使用带有默认参数的函数时，要注意些什么？ 1、如果函数的定义在函数调用之前，则应在函数定义中给出默认值。 2、一个函数不能既作为重载函数，又作为有默认参数的函数。 什么是变量的引用？要注意什么？ 在c++中，变量的“引用”就是变量的别名，因此，引用又称别名。建立“引用”的作用是为一个变量再起另一个名字，一边在需要时可以方便、间接地引用该变量。对一个变量的“引用”的所有的操作，实际上都是对其所代表的（原来的）变量的操作。ATTENTION:由于引用不是独立的变量，编译系统给它单独分配储存单元，因此，在建立引用时只有声明没有定义，只是声明它和原有某一变量的关系。 例：有一个变量a，想给他起一个别名b12int a;int &amp;b = a; 为什么要使用inline函数？ 为了提高效率。调用函数时需要一定的时间，如果有些函数需要频繁使用，则累计所用时间会很长，从而降低程序的执行效率。c++提供一种提高效率的方法，即在编译时，将所调用函数的代码嵌入到主调函数中。这种嵌入到主调函数中的函数称为内联函数。 作用域限定符“::”的作用是什么 在c++中，不同作用域内声明的变量可以同名，当局部变量和全局变量同名时，在局部变量中引用全局变量用到作用域限定符“::”。当全局变量和局部变量名字相同，重载时，就规定：用 “:: + 全局变量名” 来称呼全局变量。 二、类和对象 程序 = 对象 + 对象对象 = 算法 + 数据结构 什么是类？什么是对象？什么是抽象？什么是类的声明、类的定义？ 对象：客观世界中任何一个事物都可以看成一个对象（object）。 类：类是所有面向对象语言的共同特征，所有面向对象的语言都提供了这种类型。 抽象：类是对象的抽象，而对象是类的具体实例。 数据抽象: 只向外界提供关键信息，并隐藏其后台的实现细节，即只表现必要的信息而不呈现细节。数据抽象是一种依赖于接口和实现分离的编程（设计）技术。 类的声明： 12345678class 类名 &#123;private: 私有的数据和成员函数;public: 公用的数据和成员函数;protected: 受保护的数据和成员函数;&#125;; 类的定义： 12345678910111213141516171819202122232425//1、先声明，后定义：//(1)、class 类名 对象名1,对象名2,...;//(2)、类名 对象名1,对象名2,...;//2、声明同时定义：class 类名 &#123;private: 私有的数据和成员函数;public: 公用的数据和成员函数;protected: 受保护的数据和成员函数;&#125;对象名1,对象名2,...;//3、不出现类名直接定义对象（非常 不建议 使用）：class &#123;private: 私有的数据和成员函数;public: 公用的数据和成员函数;protected: 受保护的数据和成员函数;&#125;对象名1,对象名2,...; c++中有哪些权限限定符？各起什么作用？ private private将成员声明为私有成员，只能被本类中的成员函数引用，类外不能调用（友元类除外）。 public public将成员声明为公有成员，既可以被本类成员函数所引用，也可以被类的作用域内的其他函数所引用。 protected protected将成员声明为受保护成员，不能被类外访问，但是可以被派生类的成员函数访问。 什么是类的封装？封装的原则是什么？ 1、什么是封装？ 封装可以隐藏实现细节，使代码模块化。封装是把过程和数据包围起来，对数据的访问只能通过已定义的界面。在面向对象编程上可理解为：把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。 2、封装的原则是什么？ 简化用户接口，隐藏实现细节，这个是封装的根本目的。封装的难点在于如何设计接口。其一：必须保证接口是功能的全集，即接口能够覆盖所有需求。不能完成必要功能的封装是没有意义的。其二：尽量使接口是最小冗余的。这是为了简化类使用者的学习和使用，难用的接口是最容易让人遗忘的。冗余接口的存在是被允许的，但必须保证冗余接口是有效的。也就是说，增加冗余接口会带来很大的好处，比如性能的飞升。其三：要保证接口是稳定的，将接口和实现分离，并将实现隐藏，就是为了能保护类使用者在类的实现细节改变的情况下，不必随时修改。一旦接口被公布，永远也不要改变它。 同一个类所定义的不同对象在调用同一个成员函数时，调用的是同一段代码吗？通过什么来区分各自的数据？ 是同一段代码。通过this指针：每一个成员函数中都包括这个指针的名字是固定的，称为this。它是指向对象的指针，他的值是当前被调用的成员函数所在的对象的起始地址。例：1234567int Box::volume()&#123; return (height * width * length);&#125;//C++把它处理为:int Box::volume(Box * this)&#123; return (this-&gt;height * this-&gt;width * this-&gt;length);&#125; 类的成员函数和普通全局函数在形式上有什么区别？在本质上有什么区别？ 区别1：静态成员函数实际上是一个全局函数,不依赖一个类的对象. 而属于类，不创建对象也可调用，静态成员函数没有this指针。普通成员函数依赖一个类的对象,也就是它有一个隐藏的调用参数（this）指针,必须指向一个类的对象。区别2：静态函数只能访问类中的静态成员变量；区别3：如果成员函数想作为回调函数来使用，如创建线程等，一般只能将它定义为静态成员函数才行。 三、类和对象的进一步讨论 构造函数、析构函数的英文单词是什么？ 构造函数——constructor 析构函数——destructor 构造函数的特点是什么？析构函数的特点是什么？ c++提供构造函数，来处理对象的初始化。构造函数是一种特殊的成员函数，与其他成员函数不同，不需要用户来调用它，而是在建立对象时自动执行。 构造函数、析构函数的执行顺序是什么？ 先构造的先执行析构。 在C语言中，我们说main()函数是程序的入口，是最先被调用的函数，在C++中情况是这样吗？如果不是请说明原因，并举出实例。 const关键字的作用是什么？const成员函数的语法是什么？它有什么作用。const数据成员如何完成初始化？ 定义常变量 初始化列表的语法是怎样的？ 1234567891011121314类名::构造函数名([参数表])[:成员初始化表]&#123;[构造函数体]&#125;//例：class Student&#123;public: Student(int n, char s, nam[]):num(n), sex(s)&#123; strcpy(name, nam); &#125;private: int num; char sex; int name[20];&#125;; 在C++中为什么使用new/delete，而不是malloc()/free()来来动态创建对象？如何使用new/delete来动态创建数组？ 什么是对象的复制？什么是对象的赋值？ 什么是深拷贝/浅拷贝？ 拷贝构造函数的语法如何？ static数据成员和static成员函数的特点是什么？ static数据成员如何初始化？static成员函数有什么限制？ 为什么要使用友元？哪些内容可以作为类的友元？我们对友元的态度是什么？ 四、运算符重载 在C++中运算符被当作什么处理？如何重载运算符？重载运算符有什么好处？需要注意哪些问题？ 运算符重载一般以哪两种方式出现？该如何选择？ 五、继承和派生 继承的单词是什么？语法如何？继承方式限定符有哪些？作用分别是什么？ 继承——inheritance 语法： 继承方式限定符：private，public，protected。 继承发生时，在派生类的对象内部会有一个基类的对象，这个基类对象的初始化是由基类的构造函数完成的，那么如何在派生类中有选择的调用基类的非默认构造函数呢？ 继承发生时，派生类是否全部接收基类的成员？如果不是哪些成员不被继承。 组合（子对象）的作用是什么？如何有选择的调用对象成员的非默认构造函数？组合和继承都可以实现代码重用，那么什么时候选择组合，什么时候选择继承？ 当继承和组合都存在时，构造和析构的顺序如何？ 哪些地方必须使用初始化列表？ 什么是overriding、overload？什么是upcasting？ 多继承会带来什么问题？如何解决这个问题？对待多继承的态度是什么？ 六、多态性和虚函数 什么是多态性？英文单词是什么？它能给我们程序设计带来什么好处？ 如何实现多态性？ 虚函数是如何实现的（考试不会考）？ 动态/静态绑定（binding、联编）的优缺点各是什么？ 什么是纯虚函数？什么是抽象类？其意义各自是什么？ 七、输入输出流 C++I/O的优势在哪（和前面第一章的类似）？ 标准输出流有哪些？它们之间的区别是什么？如何控制格式的输出？标准的输入流是什么？ 如何使用文件流进行输入/输出（步骤）？ 什么是字符串流？它有什么用好处？ 八、C++工具 实现异常的三个关键字是什么？大致的作用是什么？]]></content>
  </entry>
</search>
